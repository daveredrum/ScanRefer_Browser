var Module = function(Module) {
  Module = Module || {};

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 268435456;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 24608;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_LoaderPNG_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}


  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      Module['abort']();
    }

   

   

  
  
   
  
   function _longjmp(env, value) {
      Module['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }



   

  var _llvm_pow_f64=Math_pow;


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   


  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 

embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_free_exception": ___cxa_free_exception, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__embind_register_bool": __embind_register_bool, "__embind_register_emval": __embind_register_emval, "__embind_register_float": __embind_register_float, "__embind_register_function": __embind_register_function, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_void": __embind_register_void, "__emval_decref": __emval_decref, "__emval_register": __emval_register, "_abort": _abort, "_embind_repr": _embind_repr, "_emscripten_longjmp": _emscripten_longjmp, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_pow_f64": _llvm_pow_f64, "_longjmp": _longjmp, "count_emval_handles": count_emval_handles, "craftInvokerFunction": craftInvokerFunction, "createNamedFunction": createNamedFunction, "embind__requireFunction": embind__requireFunction, "embind_init_charCodes": embind_init_charCodes, "ensureOverloadTable": ensureOverloadTable, "exposePublicSymbol": exposePublicSymbol, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "getShiftFromSize": getShiftFromSize, "getTypeName": getTypeName, "get_first_emval": get_first_emval, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "makeLegalFunctionName": makeLegalFunctionName, "new_": new_, "readLatin1String": readLatin1String, "registerType": registerType, "replacePublicSymbol": replacePublicSymbol, "runDestructors": runDestructors, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwBindingError": throwBindingError, "throwInternalError": throwInternalError, "throwUnboundTypeError": throwUnboundTypeError, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __embind_register_bool=env.__embind_register_bool;
  var __embind_register_emval=env.__embind_register_emval;
  var __embind_register_float=env.__embind_register_float;
  var __embind_register_function=env.__embind_register_function;
  var __embind_register_integer=env.__embind_register_integer;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var __embind_register_std_string=env.__embind_register_std_string;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var __embind_register_void=env.__embind_register_void;
  var __emval_decref=env.__emval_decref;
  var __emval_register=env.__emval_register;
  var _abort=env._abort;
  var _embind_repr=env._embind_repr;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _longjmp=env._longjmp;
  var count_emval_handles=env.count_emval_handles;
  var craftInvokerFunction=env.craftInvokerFunction;
  var createNamedFunction=env.createNamedFunction;
  var embind__requireFunction=env.embind__requireFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ensureOverloadTable=env.ensureOverloadTable;
  var exposePublicSymbol=env.exposePublicSymbol;
  var extendError=env.extendError;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var getShiftFromSize=env.getShiftFromSize;
  var getTypeName=env.getTypeName;
  var get_first_emval=env.get_first_emval;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_emval=env.init_emval;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var new_=env.new_;
  var readLatin1String=env.readLatin1String;
  var registerType=env.registerType;
  var replacePublicSymbol=env.replacePublicSymbol;
  var runDestructors=env.runDestructors;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwBindingError=env.throwBindingError;
  var throwInternalError=env.throwInternalError;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z23ReadDataFromInputStreamP14png_struct_defPhj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (_png_get_io_ptr($8)|0);
 $6 = $9;
 $10 = $6;
 $11 = HEAP32[$10>>2]|0;
 $12 = $6;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) + ($14)|0);
 $7 = $15;
 $16 = $4;
 $17 = $7;
 $18 = $5;
 _memcpy(($16|0),($17|0),($18|0))|0;
 $19 = $5;
 $20 = $6;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($19))|0;
 HEAP32[$21>>2] = $23;
 STACKTOP = sp;return;
}
function __Z4loadjjiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0166 = 0, $$0167 = 0, $$0167$phi = 0, $$0168 = 0, $$0169 = 0, $$0170 = 0, $$0170$phi = 0, $$1 = 0, $$1171 = 0, $$reg2mem164$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $cond172 = 0, $cond173 = 0, $cond174 = 0, $cond175 = 0, $cond176 = 0, $cond177 = 0, $cond178 = 0, $cond179 = 0, $cond180 = 0, $cond181 = 0, $cond182 = 0, $cond183 = 0, $cond184 = 0, $cond185 = 0, $cond186 = 0, $cond187 = 0, $cond188 = 0;
 var $cond189 = 0, $cond190 = 0, $cond191 = 0, $cond192 = 0, $cond193 = 0, $cond194 = 0, $cond195 = 0, $cond196 = 0, $cond197 = 0, $cond198 = 0, $cond199 = 0, $cond200 = 0, $cond201 = 0, $cond202 = 0, $cond203 = 0, $cond204 = 0, $cond205 = 0, $cond206 = 0, $cond207 = 0, _setjmpTable = 0;
 var _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $5 = sp;
 $6 = $0;
 HEAP32[$5>>2] = $6;
 $7 = $1;
 __THREW__ = 0;
 $8 = (invoke_iiiii(29,(12467|0),(0|0),(0|0),(0|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 if ((($9|0) != 0) & ((threwValue|0) != 0)) { $10 = _testSetjmp(HEAP32[$9>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($10|0) == 0) { _longjmp($9|0, threwValue|0); } tempRet0 = (threwValue); } else { $10 = -1; };
 $11 = tempRet0;
 $cond = ($10|0)==(1);
 do {
  if ($cond) {
   $$0167 = 0;$$0170 = 0;$$reg2mem164$0 = $11;
  } else {
   $12 = ($8|0)!=(0|0);
   if (!($12)) {
    __THREW__ = 0;
    $13 = (invoke_ii(30,8)|0);
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = (threwValue); } else { $15 = -1; };
    $16 = tempRet0;
    $cond172 = ($15|0)==(1);
    if ($cond172) {
     $$0167 = 0;$$0170 = $8;$$reg2mem164$0 = $16;
     break;
    }
    __THREW__ = 0;
    invoke_vii(31,($13|0),(12330|0));
    $17 = __THREW__; __THREW__ = 0;
    if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = (threwValue); } else { $18 = -1; };
    $19 = tempRet0;
    $cond173 = ($18|0)==(1);
    if ($cond173) {
     $$0167 = 0;$$0170 = $8;$$reg2mem164$0 = $19;
     break;
    }
    $20 = $17&1;
    if (!($20)) {
     __THREW__ = 0;
     invoke_viii(32,($13|0),(272|0),(20|0));
     $21 = __THREW__; __THREW__ = 0;
     if ((($21|0) != 0) & ((threwValue|0) != 0)) { $22 = _testSetjmp(HEAP32[$21>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($22|0) == 0) { _longjmp($21|0, threwValue|0); } tempRet0 = (threwValue); } else { $22 = -1; };
     $23 = tempRet0;
     $$0167 = 0;$$0170 = $8;$$reg2mem164$0 = $23;
     break;
    }
    __THREW__ = 0;
    $24 = ___cxa_find_matching_catch_2()|0;
    $25 = __THREW__; __THREW__ = 0;
    if ((($25|0) != 0) & ((threwValue|0) != 0)) { $26 = _testSetjmp(HEAP32[$25>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($26|0) == 0) { _longjmp($25|0, threwValue|0); } tempRet0 = (threwValue); } else { $26 = -1; };
    $27 = tempRet0;
    $cond174 = ($26|0)==(1);
    if ($cond174) {
     $$0167 = 0;$$0170 = $8;$$reg2mem164$0 = $27;
     break;
    }
    __THREW__ = 0;
    $28 = tempRet0;
    $29 = __THREW__; __THREW__ = 0;
    if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = (threwValue); } else { $30 = -1; };
    $31 = tempRet0;
    $cond175 = ($30|0)==(1);
    if ($cond175) {
     $$0167 = 0;$$0170 = $8;$$reg2mem164$0 = $31;
     break;
    }
    __THREW__ = 0;
    invoke_vi(33,($13|0));
    $32 = __THREW__; __THREW__ = 0;
    if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = (threwValue); } else { $33 = -1; };
    $34 = tempRet0;
    $cond176 = ($33|0)==(1);
    if ($cond176) {
     $$0167 = 0;$$0170 = $8;$$reg2mem164$0 = $34;
     break;
    }
    $$0168 = $28;$$0169 = $24;$$1 = 0;$$1171 = $8;
    label = 67;
    break;
   }
   __THREW__ = 0;
   $35 = (invoke_ii(34,($8|0))|0);
   $36 = __THREW__; __THREW__ = 0;
   if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = (threwValue); } else { $37 = -1; };
   $38 = tempRet0;
   $cond177 = ($37|0)==(1);
   if ($cond177) {
    $$0167 = 0;$$0170 = $8;$$reg2mem164$0 = $38;
   } else {
    $39 = ($35|0)!=(0|0);
    if ($39) {
     __THREW__ = 0;
     $62 = (invoke_iiii(35,($8|0),(36|0),156)|0);
     $63 = __THREW__; __THREW__ = 0;
     if ((($63|0) != 0) & ((threwValue|0) != 0)) { $64 = _testSetjmp(HEAP32[$63>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($64|0) == 0) { _longjmp($63|0, threwValue|0); } tempRet0 = (threwValue); } else { $64 = -1; };
     $65 = tempRet0;
     $cond183 = ($64|0)==(1);
     if ($cond183) {
      $$0167 = $35;$$0170 = $8;$$reg2mem164$0 = $65;
      break;
     }
     _setjmpTable = _saveSetjmp($62,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $66 = __THREW__; __THREW__ = 0;
     if ((($66|0) != 0) & ((threwValue|0) != 0)) { $67 = _testSetjmp(HEAP32[$66>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($67|0) == 0) { _longjmp($66|0, threwValue|0); } tempRet0 = (threwValue); } else { $67 = -1; };
     $68 = tempRet0;
     $cond184 = ($67|0)==(1);
     if ($cond184) {
      $$0167 = $35;$$0170 = $8;$$reg2mem164$0 = $68;
      break;
     }
     $$0167 = $35;$$0170 = $8;$$reg2mem164$0 = 0;
     break;
    }
    __THREW__ = 0;
    $40 = (invoke_ii(30,8)|0);
    $41 = __THREW__; __THREW__ = 0;
    if ((($41|0) != 0) & ((threwValue|0) != 0)) { $42 = _testSetjmp(HEAP32[$41>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($42|0) == 0) { _longjmp($41|0, threwValue|0); } tempRet0 = (threwValue); } else { $42 = -1; };
    $43 = tempRet0;
    $cond178 = ($42|0)==(1);
    if ($cond178) {
     $$0167 = $35;$$0170 = $8;$$reg2mem164$0 = $43;
    } else {
     __THREW__ = 0;
     invoke_vii(31,($40|0),(12361|0));
     $44 = __THREW__; __THREW__ = 0;
     if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = (threwValue); } else { $45 = -1; };
     $46 = tempRet0;
     $cond179 = ($45|0)==(1);
     if ($cond179) {
      $$0167 = $35;$$0170 = $8;$$reg2mem164$0 = $46;
     } else {
      $47 = $44&1;
      if (!($47)) {
       __THREW__ = 0;
       invoke_viii(32,($40|0),(272|0),(20|0));
       $48 = __THREW__; __THREW__ = 0;
       if ((($48|0) != 0) & ((threwValue|0) != 0)) { $49 = _testSetjmp(HEAP32[$48>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($49|0) == 0) { _longjmp($48|0, threwValue|0); } tempRet0 = (threwValue); } else { $49 = -1; };
       $50 = tempRet0;
       $$0167 = $35;$$0170 = $8;$$reg2mem164$0 = $50;
       break;
      }
      __THREW__ = 0;
      $51 = ___cxa_find_matching_catch_2()|0;
      $52 = __THREW__; __THREW__ = 0;
      if ((($52|0) != 0) & ((threwValue|0) != 0)) { $53 = _testSetjmp(HEAP32[$52>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($53|0) == 0) { _longjmp($52|0, threwValue|0); } tempRet0 = (threwValue); } else { $53 = -1; };
      $54 = tempRet0;
      $cond180 = ($53|0)==(1);
      if ($cond180) {
       $$0167 = $35;$$0170 = $8;$$reg2mem164$0 = $54;
      } else {
       __THREW__ = 0;
       $55 = tempRet0;
       $56 = __THREW__; __THREW__ = 0;
       if ((($56|0) != 0) & ((threwValue|0) != 0)) { $57 = _testSetjmp(HEAP32[$56>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($57|0) == 0) { _longjmp($56|0, threwValue|0); } tempRet0 = (threwValue); } else { $57 = -1; };
       $58 = tempRet0;
       $cond181 = ($57|0)==(1);
       if ($cond181) {
        $$0167 = $35;$$0170 = $8;$$reg2mem164$0 = $58;
       } else {
        __THREW__ = 0;
        invoke_vi(33,($40|0));
        $59 = __THREW__; __THREW__ = 0;
        if ((($59|0) != 0) & ((threwValue|0) != 0)) { $60 = _testSetjmp(HEAP32[$59>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($60|0) == 0) { _longjmp($59|0, threwValue|0); } tempRet0 = (threwValue); } else { $60 = -1; };
        $61 = tempRet0;
        $cond182 = ($60|0)==(1);
        if ($cond182) {
         $$0167 = $35;$$0170 = $8;$$reg2mem164$0 = $61;
        } else {
         $$0168 = $55;$$0169 = $51;$$1 = $35;$$1171 = $8;
         label = 67;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 L28: while(1) {
  if ((label|0) == 67) {
   label = 0;
   __THREW__ = 0;
   ___resumeException($$0169|0);
   $173 = __THREW__; __THREW__ = 0;
   if ((($173|0) != 0) & ((threwValue|0) != 0)) { $174 = _testSetjmp(HEAP32[$173>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($174|0) == 0) { _longjmp($173|0, threwValue|0); } tempRet0 = (threwValue); } else { $174 = -1; };
   $175 = tempRet0;
   $$0167 = $$1;$$0170 = $$1171;$$reg2mem164$0 = $175;
  }
  $69 = ($$reg2mem164$0|0)!=(0);
  if ($69) {
   __THREW__ = 0;
   $70 = (invoke_ii(30,8)|0);
   $71 = __THREW__; __THREW__ = 0;
   if ((($71|0) != 0) & ((threwValue|0) != 0)) { $72 = _testSetjmp(HEAP32[$71>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($72|0) == 0) { _longjmp($71|0, threwValue|0); } tempRet0 = (threwValue); } else { $72 = -1; };
   $73 = tempRet0;
   $cond203 = ($72|0)==(1);
   if ($cond203) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $73;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue;
   }
   __THREW__ = 0;
   invoke_vii(31,($70|0),(12392|0));
   $74 = __THREW__; __THREW__ = 0;
   if ((($74|0) != 0) & ((threwValue|0) != 0)) { $75 = _testSetjmp(HEAP32[$74>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($75|0) == 0) { _longjmp($74|0, threwValue|0); } tempRet0 = (threwValue); } else { $75 = -1; };
   $76 = tempRet0;
   $cond204 = ($75|0)==(1);
   if ($cond204) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $76;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue;
   }
   $77 = $74&1;
   if (!($77)) {
    __THREW__ = 0;
    invoke_viii(32,($70|0),(272|0),(20|0));
    $78 = __THREW__; __THREW__ = 0;
    if ((($78|0) != 0) & ((threwValue|0) != 0)) { $79 = _testSetjmp(HEAP32[$78>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($79|0) == 0) { _longjmp($78|0, threwValue|0); } tempRet0 = (threwValue); } else { $79 = -1; };
    $80 = tempRet0;
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $80;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue;
   }
   __THREW__ = 0;
   $81 = ___cxa_find_matching_catch_2()|0;
   $82 = __THREW__; __THREW__ = 0;
   if ((($82|0) != 0) & ((threwValue|0) != 0)) { $83 = _testSetjmp(HEAP32[$82>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($83|0) == 0) { _longjmp($82|0, threwValue|0); } tempRet0 = (threwValue); } else { $83 = -1; };
   $84 = tempRet0;
   $cond205 = ($83|0)==(1);
   if ($cond205) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $84;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue;
   }
   __THREW__ = 0;
   $85 = tempRet0;
   $86 = __THREW__; __THREW__ = 0;
   if ((($86|0) != 0) & ((threwValue|0) != 0)) { $87 = _testSetjmp(HEAP32[$86>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($87|0) == 0) { _longjmp($86|0, threwValue|0); } tempRet0 = (threwValue); } else { $87 = -1; };
   $88 = tempRet0;
   $cond206 = ($87|0)==(1);
   if ($cond206) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $88;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue;
   }
   __THREW__ = 0;
   invoke_vi(33,($70|0));
   $89 = __THREW__; __THREW__ = 0;
   if ((($89|0) != 0) & ((threwValue|0) != 0)) { $90 = _testSetjmp(HEAP32[$89>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($90|0) == 0) { _longjmp($89|0, threwValue|0); } tempRet0 = (threwValue); } else { $90 = -1; };
   $91 = tempRet0;
   $cond207 = ($90|0)==(1);
   if ($cond207) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $91;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue;
   }
   $$0168 = $85;$$0169 = $81;$$1 = $$0167;$$1171 = $$0170;
   label = 67;
   continue;
  }
  __THREW__ = 0;
  invoke_viii(37,($$0170|0),($5|0),(38|0));
  $92 = __THREW__; __THREW__ = 0;
  if ((($92|0) != 0) & ((threwValue|0) != 0)) { $93 = _testSetjmp(HEAP32[$92>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($93|0) == 0) { _longjmp($92|0, threwValue|0); } tempRet0 = (threwValue); } else { $93 = -1; };
  $94 = tempRet0;
  $cond185 = ($93|0)==(1);
  if ($cond185) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $94;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(39,($$0170|0),($$0167|0));
  $95 = __THREW__; __THREW__ = 0;
  if ((($95|0) != 0) & ((threwValue|0) != 0)) { $96 = _testSetjmp(HEAP32[$95>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($96|0) == 0) { _longjmp($95|0, threwValue|0); } tempRet0 = (threwValue); } else { $96 = -1; };
  $97 = tempRet0;
  $cond186 = ($96|0)==(1);
  if ($cond186) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $97;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(40,($$0170|0),($$0167|0))|0);
  $98 = __THREW__; __THREW__ = 0;
  if ((($98|0) != 0) & ((threwValue|0) != 0)) { $99 = _testSetjmp(HEAP32[$98>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($99|0) == 0) { _longjmp($98|0, threwValue|0); } tempRet0 = (threwValue); } else { $99 = -1; };
  $100 = tempRet0;
  $cond187 = ($99|0)==(1);
  if ($cond187) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $100;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(41,($$0170|0),($$0167|0))|0);
  $101 = __THREW__; __THREW__ = 0;
  if ((($101|0) != 0) & ((threwValue|0) != 0)) { $102 = _testSetjmp(HEAP32[$101>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($102|0) == 0) { _longjmp($101|0, threwValue|0); } tempRet0 = (threwValue); } else { $102 = -1; };
  $103 = tempRet0;
  $cond188 = ($102|0)==(1);
  if ($cond188) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $103;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(42,($$0170|0),($$0167|0))|0);
  $104 = __THREW__; __THREW__ = 0;
  if ((($104|0) != 0) & ((threwValue|0) != 0)) { $105 = _testSetjmp(HEAP32[$104>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($105|0) == 0) { _longjmp($104|0, threwValue|0); } tempRet0 = (threwValue); } else { $105 = -1; };
  $106 = tempRet0;
  $cond189 = ($105|0)==(1);
  if ($cond189) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $106;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  __THREW__ = 0;
  $107 = (invoke_iii(43,($$0170|0),($$0167|0))|0);
  $108 = __THREW__; __THREW__ = 0;
  if ((($108|0) != 0) & ((threwValue|0) != 0)) { $109 = _testSetjmp(HEAP32[$108>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($109|0) == 0) { _longjmp($108|0, threwValue|0); } tempRet0 = (threwValue); } else { $109 = -1; };
  $110 = tempRet0;
  $cond190 = ($109|0)==(1);
  if ($cond190) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $110;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  __THREW__ = 0;
  $111 = (invoke_iii(44,($$0170|0),($$0167|0))|0);
  $112 = __THREW__; __THREW__ = 0;
  if ((($112|0) != 0) & ((threwValue|0) != 0)) { $113 = _testSetjmp(HEAP32[$112>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($113|0) == 0) { _longjmp($112|0, threwValue|0); } tempRet0 = (threwValue); } else { $113 = -1; };
  $114 = tempRet0;
  $cond191 = ($113|0)==(1);
  if ($cond191) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $114;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  $115 = $111&255;
  $116 = ($115|0)==(16);
  if ($116) {
   __THREW__ = 0;
   invoke_vi(45,($$0170|0));
   $117 = __THREW__; __THREW__ = 0;
   if ((($117|0) != 0) & ((threwValue|0) != 0)) { $118 = _testSetjmp(HEAP32[$117>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($118|0) == 0) { _longjmp($117|0, threwValue|0); } tempRet0 = (threwValue); } else { $118 = -1; };
   $119 = tempRet0;
   $cond202 = ($118|0)==(1);
   if ($cond202) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $119;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue;
   }
  }
  $120 = $107&255;
  $121 = ($120|0)==(3);
  if ($121) {
   __THREW__ = 0;
   invoke_vi(46,($$0170|0));
   $122 = __THREW__; __THREW__ = 0;
   if ((($122|0) != 0) & ((threwValue|0) != 0)) { $123 = _testSetjmp(HEAP32[$122>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($123|0) == 0) { _longjmp($122|0, threwValue|0); } tempRet0 = (threwValue); } else { $123 = -1; };
   $124 = tempRet0;
   $cond201 = ($123|0)==(1);
   if ($cond201) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $124;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue;
   }
  }
  $125 = $107&255;
  $126 = ($125|0)==(0);
  if ($126) {
   $127 = $111&255;
   $128 = ($127|0)<(8);
   if ($128) {
    __THREW__ = 0;
    invoke_vi(47,($$0170|0));
    $129 = __THREW__; __THREW__ = 0;
    if ((($129|0) != 0) & ((threwValue|0) != 0)) { $130 = _testSetjmp(HEAP32[$129>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($130|0) == 0) { _longjmp($129|0, threwValue|0); } tempRet0 = (threwValue); } else { $130 = -1; };
    $131 = tempRet0;
    $cond200 = ($130|0)==(1);
    if ($cond200) {
     $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $131;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
     continue;
    }
   }
  }
  __THREW__ = 0;
  $132 = (invoke_iiii(48,($$0170|0),($$0167|0),16)|0);
  $133 = __THREW__; __THREW__ = 0;
  if ((($133|0) != 0) & ((threwValue|0) != 0)) { $134 = _testSetjmp(HEAP32[$133>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($134|0) == 0) { _longjmp($133|0, threwValue|0); } tempRet0 = (threwValue); } else { $134 = -1; };
  $135 = tempRet0;
  $cond192 = ($134|0)==(1);
  if ($cond192) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $135;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  $136 = ($132|0)!=(0);
  if ($136) {
   __THREW__ = 0;
   invoke_vi(49,($$0170|0));
   $137 = __THREW__; __THREW__ = 0;
   if ((($137|0) != 0) & ((threwValue|0) != 0)) { $138 = _testSetjmp(HEAP32[$137>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($138|0) == 0) { _longjmp($137|0, threwValue|0); } tempRet0 = (threwValue); } else { $138 = -1; };
   $139 = tempRet0;
   $cond199 = ($138|0)==(1);
   if ($cond199) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $139;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue;
   }
  }
  __THREW__ = 0;
  invoke_vii(50,($$0170|0),($$0167|0));
  $140 = __THREW__; __THREW__ = 0;
  if ((($140|0) != 0) & ((threwValue|0) != 0)) { $141 = _testSetjmp(HEAP32[$140>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($141|0) == 0) { _longjmp($140|0, threwValue|0); } tempRet0 = (threwValue); } else { $141 = -1; };
  $142 = tempRet0;
  $cond193 = ($141|0)==(1);
  if ($cond193) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $142;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  __THREW__ = 0;
  $143 = (invoke_iii(51,($$0170|0),($$0167|0))|0);
  $144 = __THREW__; __THREW__ = 0;
  if ((($144|0) != 0) & ((threwValue|0) != 0)) { $145 = _testSetjmp(HEAP32[$144>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($145|0) == 0) { _longjmp($144|0, threwValue|0); } tempRet0 = (threwValue); } else { $145 = -1; };
  $146 = tempRet0;
  $cond194 = ($145|0)==(1);
  if ($cond194) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $146;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  $147 = $3<<2;
  __THREW__ = 0;
  $148 = (invoke_ii(52,($147|0))|0);
  $149 = __THREW__; __THREW__ = 0;
  if ((($149|0) != 0) & ((threwValue|0) != 0)) { $150 = _testSetjmp(HEAP32[$149>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($150|0) == 0) { _longjmp($149|0, threwValue|0); } tempRet0 = (threwValue); } else { $150 = -1; };
  $151 = tempRet0;
  $cond195 = ($150|0)==(1);
  if ($cond195) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $151;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  $$0166 = 0;
  while(1) {
   $152 = ($$0166|0)<($3|0);
   if (!($152)) {
    break;
   }
   __THREW__ = 0;
   $153 = (invoke_ii(52,($143|0))|0);
   $154 = __THREW__; __THREW__ = 0;
   if ((($154|0) != 0) & ((threwValue|0) != 0)) { $155 = _testSetjmp(HEAP32[$154>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($155|0) == 0) { _longjmp($154|0, threwValue|0); } tempRet0 = (threwValue); } else { $155 = -1; };
   $156 = tempRet0;
   $cond198 = ($155|0)==(1);
   if ($cond198) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $156;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue L28;
   }
   $157 = (($148) + ($$0166<<2)|0);
   HEAP32[$157>>2] = $153;
   $158 = (($$0166) + 1)|0;
   $$0166 = $158;
  }
  __THREW__ = 0;
  invoke_vii(53,($$0170|0),($148|0));
  $159 = __THREW__; __THREW__ = 0;
  if ((($159|0) != 0) & ((threwValue|0) != 0)) { $160 = _testSetjmp(HEAP32[$159>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($160|0) == 0) { _longjmp($159|0, threwValue|0); } tempRet0 = (threwValue); } else { $160 = -1; };
  $161 = tempRet0;
  $cond196 = ($160|0)==(1);
  if ($cond196) {
   $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $161;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
   continue;
  }
  $$0 = 0;
  while(1) {
   $162 = ($$0|0)<($3|0);
   if (!($162)) {
    break L28;
   }
   $163 = Math_imul($$0, $143)|0;
   $164 = (($7) + ($163)|0);
   $165 = (($148) + ($$0<<2)|0);
   $166 = HEAP32[$165>>2]|0;
   _memcpy(($164|0),($166|0),($143|0))|0;
   $167 = (($148) + ($$0<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   __THREW__ = 0;
   invoke_vi(54,($168|0));
   $169 = __THREW__; __THREW__ = 0;
   if ((($169|0) != 0) & ((threwValue|0) != 0)) { $170 = _testSetjmp(HEAP32[$169>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($170|0) == 0) { _longjmp($169|0, threwValue|0); } tempRet0 = (threwValue); } else { $170 = -1; };
   $171 = tempRet0;
   $cond197 = ($170|0)==(1);
   if ($cond197) {
    $$0170$phi = $$0170;$$0167$phi = $$0167;$$reg2mem164$0 = $171;$$0170 = $$0170$phi;$$0167 = $$0167$phi;
    continue L28;
   }
   $172 = (($$0) + 1)|0;
   $$0 = $172;
  }
 }
 _free(_setjmpTable|0);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(23564);
 return;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 5|0;
 $2 = sp + 4|0;
 $1 = $0;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;
 __ZN10emscripten8functionIvJjjiiiEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_(12411,55,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIvJjjiiiEJNS_18allow_raw_pointersEEEEvPKcPFT_DpT0_EDpT1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $7 = 56;
 $8 = $4;
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvjjiiiEE8getCountEv($6)|0);
 $10 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvjjiiiEE8getTypesEv($6)|0);
 $11 = $7;
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiiiEEEPKcv()|0);
 $13 = $7;
 $14 = $5;
 __embind_register_function(($8|0),($9|0),($10|0),($12|0),($13|0),($14|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerIvJjjiiiEE6invokeEPFvjjiiiEjjiii($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($13)|0);
 $15 = $8;
 $16 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($15)|0);
 $17 = $9;
 $18 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($17)|0);
 $19 = $10;
 $20 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($19)|0);
 $21 = $11;
 $22 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($21)|0);
 FUNCTION_TABLE_viiiii[$12 & 63]($14,$16,$18,$20,$22);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvjjiiiEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvjjiiiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvjjiiiEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvjjiiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (424|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12416|0);
}
function __GLOBAL__sub_I_LoaderPNG_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function _png_sig_cmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 ;HEAP8[$7>>0]=HEAP8[12424>>0]|0;HEAP8[$7+1>>0]=HEAP8[12424+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[12424+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[12424+3>>0]|0;HEAP8[$7+4>>0]=HEAP8[12424+4>>0]|0;HEAP8[$7+5>>0]=HEAP8[12424+5>>0]|0;HEAP8[$7+6>>0]=HEAP8[12424+6>>0]|0;HEAP8[$7+7>>0]=HEAP8[12424+7>>0]|0;
 $8 = $6;
 $9 = ($8>>>0)>(8);
 if ($9) {
  $6 = 8;
 } else {
  $10 = $6;
  $11 = ($10>>>0)<(1);
  if ($11) {
   $3 = -1;
   $27 = $3;
   STACKTOP = sp;return ($27|0);
  }
 }
 $12 = $5;
 $13 = ($12>>>0)>(7);
 if ($13) {
  $3 = -1;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 $14 = $5;
 $15 = $6;
 $16 = (($14) + ($15))|0;
 $17 = ($16>>>0)>(8);
 if ($17) {
  $18 = $5;
  $19 = (8 - ($18))|0;
  $6 = $19;
 }
 $20 = $4;
 $21 = $5;
 $22 = (($20) + ($21)|0);
 $23 = $5;
 $24 = (($7) + ($23)|0);
 $25 = $6;
 $26 = (_memcmp($22,$24,$25)|0);
 $3 = $26;
 $27 = $3;
 STACKTOP = sp;return ($27|0);
}
function _png_zalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $7 = $8;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 do {
  if ($10) {
   $3 = 0;
  } else {
   $11 = $5;
   $12 = $6;
   $13 = (4294967295 / ($12>>>0))&-1;
   $14 = ($11>>>0)>=($13>>>0);
   if ($14) {
    $15 = $4;
    _png_warning($15,12432);
    $3 = 0;
    break;
   } else {
    $16 = $5;
    $17 = $7;
    $18 = Math_imul($17, $16)|0;
    $7 = $18;
    $19 = $4;
    $20 = $7;
    $21 = (_png_malloc_warn($19,$20)|0);
    $3 = $21;
    break;
   }
  }
 } while(0);
 $22 = $3;
 STACKTOP = sp;return ($22|0);
}
function _png_zfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _png_free($4,$5);
 STACKTOP = sp;return;
}
function _png_reset_crc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (_crc32(0,0,0)|0);
 $3 = $1;
 $4 = ((($3)) + 404|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _png_calculate_crc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 1;
 $9 = $3;
 $10 = ((($9)) + 376|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >>> 29;
 $13 = 1 & $12;
 $14 = ($13|0)!=(0);
 $15 = $3;
 $16 = ((($15)) + 212|0);
 $17 = HEAP32[$16>>2]|0;
 if ($14) {
  $18 = $17 & 768;
  $19 = ($18|0)==(768);
  if ($19) {
   $6 = 0;
  }
 } else {
  $20 = $17 & 2048;
  $21 = ($20|0)!=(0);
  if ($21) {
   $6 = 0;
  }
 }
 $22 = $6;
 $23 = ($22|0)!=(0);
 $24 = $5;
 $25 = ($24>>>0)>(0);
 $or$cond = $23 & $25;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $26 = $3;
 $27 = ((($26)) + 404|0);
 $28 = HEAP32[$27>>2]|0;
 $7 = $28;
 while(1) {
  $29 = $5;
  $8 = $29;
  $30 = $8;
  $31 = ($30|0)==(0);
  $$ = $31 ? -1 : $29;
  $8 = $$;
  $32 = $7;
  $33 = $4;
  $34 = $8;
  $35 = (_crc32($32,$33,$34)|0);
  $7 = $35;
  $36 = $8;
  $37 = $4;
  $38 = (($37) + ($36)|0);
  $4 = $38;
  $39 = $8;
  $40 = $5;
  $41 = (($40) - ($39))|0;
  $5 = $41;
  $42 = $5;
  $43 = ($42>>>0)>(0);
  if (!($43)) {
   break;
  }
 }
 $44 = $7;
 $45 = $3;
 $46 = ((($45)) + 404|0);
 HEAP32[$46>>2] = $44;
 STACKTOP = sp;return;
}
function _png_user_version_check($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $8 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = ($9|0)!=(0|0);
 L1: do {
  if ($10) {
   $5 = -1;
   $6 = 0;
   while(1) {
    $11 = $5;
    $12 = (($11) + 1)|0;
    $5 = $12;
    $13 = $4;
    $14 = $5;
    $15 = (($13) + ($14)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = $5;
    $19 = (12467 + ($18)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 << 24 >> 24;
    $22 = ($17|0)!=($21|0);
    if ($22) {
     $23 = $3;
     $24 = ((($23)) + 212|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $25 | 131072;
     HEAP32[$24>>2] = $26;
    }
    $27 = $4;
    $28 = $5;
    $29 = (($27) + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = ($31|0)==(46);
    if ($32) {
     $33 = $6;
     $34 = (($33) + 1)|0;
     $6 = $34;
    }
    $35 = $6;
    $36 = ($35|0)<(2);
    if (!($36)) {
     break L1;
    }
    $37 = $4;
    $38 = $5;
    $39 = (($37) + ($38)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = ($41|0)!=(0);
    if (!($42)) {
     break L1;
    }
    $43 = $5;
    $44 = (12467 + ($43)|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45 << 24 >> 24;
    $47 = ($46|0)!=(0);
    if (!($47)) {
     break;
    }
   }
  } else {
   $48 = $3;
   $49 = ((($48)) + 212|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 | 131072;
   HEAP32[$49>>2] = $51;
  }
 } while(0);
 $52 = $3;
 $53 = ((($52)) + 212|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 & 131072;
 $56 = ($55|0)!=(0);
 if ($56) {
  $7 = 0;
  $57 = $7;
  $58 = (_png_safecat($8,128,$57,12474)|0);
  $7 = $58;
  $59 = $7;
  $60 = $4;
  $61 = (_png_safecat($8,128,$59,$60)|0);
  $7 = $61;
  $62 = $7;
  $63 = (_png_safecat($8,128,$62,12505)|0);
  $7 = $63;
  $64 = $7;
  $65 = (_png_safecat($8,128,$64,12467)|0);
  $7 = $65;
  $66 = $3;
  _png_warning($66,$8);
  $2 = 0;
  $67 = $2;
  STACKTOP = sp;return ($67|0);
 } else {
  $2 = 1;
  $67 = $2;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function _png_create_png_struct($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$reg2mem16$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cond = 0, $cond19 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $7 = sp + 156|0;
 $8 = sp;
 _memset(($7|0),0,868)|0;
 $9 = ((($7)) + 716|0);
 HEAP32[$9>>2] = 1000000;
 $10 = ((($7)) + 720|0);
 HEAP32[$10>>2] = 1000000;
 $11 = ((($7)) + 724|0);
 HEAP32[$11>>2] = 1000;
 $12 = ((($7)) + 728|0);
 HEAP32[$12>>2] = 8000000;
 __THREW__ = 0;
 invoke_viiii(57,($7|0),($4|0),($5|0),($6|0));
 $13 = __THREW__; __THREW__ = 0;
 if ((($13|0) != 0) & ((threwValue|0) != 0)) { $14 = _testSetjmp(HEAP32[$13>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($14|0) == 0) { _longjmp($13|0, threwValue|0); } tempRet0 = (threwValue); } else { $14 = -1; };
 $15 = tempRet0;
 $cond = ($14|0)==(1);
 if ($cond) {
  $$reg2mem16$0 = $15;
 } else {
  __THREW__ = 0;
  invoke_viiii(58,($7|0),($1|0),($2|0),($3|0));
  $16 = __THREW__; __THREW__ = 0;
  if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = (threwValue); } else { $17 = -1; };
  $18 = tempRet0;
  $cond19 = ($17|0)==(1);
  if ($cond19) {
   $$reg2mem16$0 = $18;
  } else {
   _setjmpTable = _saveSetjmp($8,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $19 = __THREW__; __THREW__ = 0;
   if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = (threwValue); } else { $20 = -1; };
   $21 = tempRet0;
   $cond20 = ($20|0)==(1);
   if ($cond20) {
    $$reg2mem16$0 = $21;
   } else {
    $$reg2mem16$0 = 0;
   }
  }
 }
 while(1) {
  $22 = ($$reg2mem16$0|0)!=(0);
  if ($22) {
   break;
  }
  $23 = ((($7)) + 160|0);
  HEAP32[$23>>2] = $8;
  $24 = ((($7)) + 164|0);
  HEAP32[$24>>2] = 0;
  $25 = ((($7)) + 156|0);
  HEAP32[$25>>2] = 36;
  __THREW__ = 0;
  $26 = (invoke_iii(59,($7|0),($0|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } tempRet0 = (threwValue); } else { $28 = -1; };
  $29 = tempRet0;
  $cond21 = ($28|0)==(1);
  if ($cond21) {
   $$reg2mem16$0 = $29;
   continue;
  }
  $30 = ($26|0)!=(0);
  if (!($30)) {
   break;
  }
  __THREW__ = 0;
  $31 = (invoke_iii(60,($7|0),868)|0);
  $32 = __THREW__; __THREW__ = 0;
  if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = (threwValue); } else { $33 = -1; };
  $34 = tempRet0;
  $cond22 = ($33|0)==(1);
  if ($cond22) {
   $$reg2mem16$0 = $34;
  } else {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $35 = ($31|0)!=(0|0);
  if ($35) {
   $36 = ((($7)) + 224|0);
   $37 = ((($36)) + 32|0);
   HEAP32[$37>>2] = 61;
   $38 = ((($7)) + 224|0);
   $39 = ((($38)) + 36|0);
   HEAP32[$39>>2] = 62;
   $40 = ((($7)) + 224|0);
   $41 = ((($40)) + 40|0);
   HEAP32[$41>>2] = $31;
   $42 = ((($7)) + 160|0);
   HEAP32[$42>>2] = 0;
   $43 = ((($7)) + 164|0);
   HEAP32[$43>>2] = 0;
   $44 = ((($7)) + 156|0);
   HEAP32[$44>>2] = 0;
   _memcpy(($31|0),($7|0),868)|0;
   $$0 = $31;
   _free(_setjmpTable|0);
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($$0|0);
}
function _png_create_info_struct($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 $6 = $2;
 $7 = (_png_malloc_base($6,268)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $3;
  _memset(($10|0),0,268)|0;
 }
 $11 = $3;
 $1 = $11;
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _png_free_data($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $14 = ($13|0)==(0|0);
 $15 = $5;
 $16 = ($15|0)==(0|0);
 $or$cond = $14 | $16;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $17 = $5;
 $18 = ((($17)) + 136|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 do {
  if ($20) {
   $21 = $6;
   $22 = $21 & 16384;
   $23 = $5;
   $24 = ((($23)) + 232|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $22 & $25;
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = $7;
    $29 = ($28|0)!=(-1);
    if ($29) {
     $30 = $4;
     $31 = $5;
     $32 = ((($31)) + 136|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $7;
     $35 = (($33) + (($34*28)|0)|0);
     $36 = ((($35)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     _png_free($30,$37);
     $38 = $5;
     $39 = ((($38)) + 136|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $7;
     $42 = (($40) + (($41*28)|0)|0);
     $43 = ((($42)) + 4|0);
     HEAP32[$43>>2] = 0;
     break;
    }
    $8 = 0;
    while(1) {
     $44 = $8;
     $45 = $5;
     $46 = ((($45)) + 128|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($44|0)<($47|0);
     $49 = $4;
     $50 = $5;
     $51 = ((($50)) + 136|0);
     $52 = HEAP32[$51>>2]|0;
     if (!($48)) {
      break;
     }
     $53 = $8;
     $54 = (($52) + (($53*28)|0)|0);
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     _png_free($49,$56);
     $57 = $8;
     $58 = (($57) + 1)|0;
     $8 = $58;
    }
    _png_free($49,$52);
    $59 = $5;
    $60 = ((($59)) + 136|0);
    HEAP32[$60>>2] = 0;
    $61 = $5;
    $62 = ((($61)) + 128|0);
    HEAP32[$62>>2] = 0;
   }
  }
 } while(0);
 $63 = $6;
 $64 = $63 & 8192;
 $65 = $5;
 $66 = ((($65)) + 232|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $64 & $67;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $5;
  $71 = ((($70)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 & -17;
  HEAP32[$71>>2] = $73;
  $74 = $4;
  $75 = $5;
  $76 = ((($75)) + 156|0);
  $77 = HEAP32[$76>>2]|0;
  _png_free($74,$77);
  $78 = $5;
  $79 = ((($78)) + 156|0);
  HEAP32[$79>>2] = 0;
  $80 = $5;
  $81 = ((($80)) + 22|0);
  HEAP16[$81>>1] = 0;
 }
 $82 = $6;
 $83 = $82 & 256;
 $84 = $5;
 $85 = ((($84)) + 232|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $83 & $86;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $4;
  $90 = $5;
  $91 = ((($90)) + 256|0);
  $92 = HEAP32[$91>>2]|0;
  _png_free($89,$92);
  $93 = $4;
  $94 = $5;
  $95 = ((($94)) + 260|0);
  $96 = HEAP32[$95>>2]|0;
  _png_free($93,$96);
  $97 = $5;
  $98 = ((($97)) + 256|0);
  HEAP32[$98>>2] = 0;
  $99 = $5;
  $100 = ((($99)) + 260|0);
  HEAP32[$100>>2] = 0;
  $101 = $5;
  $102 = ((($101)) + 8|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $103 & -16385;
  HEAP32[$102>>2] = $104;
 }
 $105 = $6;
 $106 = $105 & 128;
 $107 = $5;
 $108 = ((($107)) + 232|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $106 & $109;
 $111 = ($110|0)!=(0);
 if ($111) {
  $112 = $4;
  $113 = $5;
  $114 = ((($113)) + 208|0);
  $115 = HEAP32[$114>>2]|0;
  _png_free($112,$115);
  $116 = $4;
  $117 = $5;
  $118 = ((($117)) + 220|0);
  $119 = HEAP32[$118>>2]|0;
  _png_free($116,$119);
  $120 = $5;
  $121 = ((($120)) + 208|0);
  HEAP32[$121>>2] = 0;
  $122 = $5;
  $123 = ((($122)) + 220|0);
  HEAP32[$123>>2] = 0;
  $124 = $5;
  $125 = ((($124)) + 224|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($126|0)!=(0|0);
  if ($127) {
   $9 = 0;
   while(1) {
    $128 = $9;
    $129 = $5;
    $130 = ((($129)) + 229|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131&255;
    $133 = ($128|0)<($132|0);
    $134 = $4;
    $135 = $5;
    $136 = ((($135)) + 224|0);
    $137 = HEAP32[$136>>2]|0;
    if (!($133)) {
     break;
    }
    $138 = $9;
    $139 = (($137) + ($138<<2)|0);
    $140 = HEAP32[$139>>2]|0;
    _png_free($134,$140);
    $141 = $9;
    $142 = (($141) + 1)|0;
    $9 = $142;
   }
   _png_free($134,$137);
   $143 = $5;
   $144 = ((($143)) + 224|0);
   HEAP32[$144>>2] = 0;
  }
  $145 = $5;
  $146 = ((($145)) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 & -1025;
  HEAP32[$146>>2] = $148;
 }
 $149 = $6;
 $150 = $149 & 16;
 $151 = $5;
 $152 = ((($151)) + 232|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $150 & $153;
 $155 = ($154|0)!=(0);
 if ($155) {
  $156 = $4;
  $157 = $5;
  $158 = ((($157)) + 116|0);
  $159 = HEAP32[$158>>2]|0;
  _png_free($156,$159);
  $160 = $4;
  $161 = $5;
  $162 = ((($161)) + 120|0);
  $163 = HEAP32[$162>>2]|0;
  _png_free($160,$163);
  $164 = $5;
  $165 = ((($164)) + 116|0);
  HEAP32[$165>>2] = 0;
  $166 = $5;
  $167 = ((($166)) + 120|0);
  HEAP32[$167>>2] = 0;
  $168 = $5;
  $169 = ((($168)) + 8|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $170 & -4097;
  HEAP32[$169>>2] = $171;
 }
 $172 = $5;
 $173 = ((($172)) + 244|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ($174|0)!=(0|0);
 do {
  if ($175) {
   $176 = $6;
   $177 = $176 & 32;
   $178 = $5;
   $179 = ((($178)) + 232|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $177 & $180;
   $182 = ($181|0)!=(0);
   if ($182) {
    $183 = $7;
    $184 = ($183|0)!=(-1);
    if ($184) {
     $185 = $4;
     $186 = $5;
     $187 = ((($186)) + 244|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = $7;
     $190 = (($188) + ($189<<4)|0);
     $191 = HEAP32[$190>>2]|0;
     _png_free($185,$191);
     $192 = $4;
     $193 = $5;
     $194 = ((($193)) + 244|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $7;
     $197 = (($195) + ($196<<4)|0);
     $198 = ((($197)) + 8|0);
     $199 = HEAP32[$198>>2]|0;
     _png_free($192,$199);
     $200 = $5;
     $201 = ((($200)) + 244|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = $7;
     $204 = (($202) + ($203<<4)|0);
     HEAP32[$204>>2] = 0;
     $205 = $5;
     $206 = ((($205)) + 244|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = $7;
     $209 = (($207) + ($208<<4)|0);
     $210 = ((($209)) + 8|0);
     HEAP32[$210>>2] = 0;
     break;
    }
    $10 = 0;
    while(1) {
     $211 = $10;
     $212 = $5;
     $213 = ((($212)) + 248|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($211|0)<($214|0);
     $216 = $4;
     $217 = $5;
     $218 = ((($217)) + 244|0);
     $219 = HEAP32[$218>>2]|0;
     if (!($215)) {
      break;
     }
     $220 = $10;
     $221 = (($219) + ($220<<4)|0);
     $222 = HEAP32[$221>>2]|0;
     _png_free($216,$222);
     $223 = $4;
     $224 = $5;
     $225 = ((($224)) + 244|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = $10;
     $228 = (($226) + ($227<<4)|0);
     $229 = ((($228)) + 8|0);
     $230 = HEAP32[$229>>2]|0;
     _png_free($223,$230);
     $231 = $10;
     $232 = (($231) + 1)|0;
     $10 = $232;
    }
    _png_free($216,$219);
    $233 = $5;
    $234 = ((($233)) + 244|0);
    HEAP32[$234>>2] = 0;
    $235 = $5;
    $236 = ((($235)) + 248|0);
    HEAP32[$236>>2] = 0;
    $237 = $5;
    $238 = ((($237)) + 8|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8193;
    HEAP32[$238>>2] = $240;
   }
  }
 } while(0);
 $241 = $5;
 $242 = ((($241)) + 236|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = ($243|0)!=(0|0);
 do {
  if ($244) {
   $245 = $6;
   $246 = $245 & 512;
   $247 = $5;
   $248 = ((($247)) + 232|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $246 & $249;
   $251 = ($250|0)!=(0);
   if ($251) {
    $252 = $7;
    $253 = ($252|0)!=(-1);
    if ($253) {
     $254 = $4;
     $255 = $5;
     $256 = ((($255)) + 236|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $7;
     $259 = (($257) + (($258*20)|0)|0);
     $260 = ((($259)) + 8|0);
     $261 = HEAP32[$260>>2]|0;
     _png_free($254,$261);
     $262 = $5;
     $263 = ((($262)) + 236|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = $7;
     $266 = (($264) + (($265*20)|0)|0);
     $267 = ((($266)) + 8|0);
     HEAP32[$267>>2] = 0;
     break;
    }
    $11 = 0;
    while(1) {
     $268 = $11;
     $269 = $5;
     $270 = ((($269)) + 240|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ($268|0)<($271|0);
     $273 = $4;
     $274 = $5;
     $275 = ((($274)) + 236|0);
     $276 = HEAP32[$275>>2]|0;
     if (!($272)) {
      break;
     }
     $277 = $11;
     $278 = (($276) + (($277*20)|0)|0);
     $279 = ((($278)) + 8|0);
     $280 = HEAP32[$279>>2]|0;
     _png_free($273,$280);
     $281 = $11;
     $282 = (($281) + 1)|0;
     $11 = $282;
    }
    _png_free($273,$276);
    $283 = $5;
    $284 = ((($283)) + 236|0);
    HEAP32[$284>>2] = 0;
    $285 = $5;
    $286 = ((($285)) + 240|0);
    HEAP32[$286>>2] = 0;
   }
  }
 } while(0);
 $287 = $6;
 $288 = $287 & 8;
 $289 = $5;
 $290 = ((($289)) + 232|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = $288 & $291;
 $293 = ($292|0)!=(0);
 if ($293) {
  $294 = $4;
  $295 = $5;
  $296 = ((($295)) + 204|0);
  $297 = HEAP32[$296>>2]|0;
  _png_free($294,$297);
  $298 = $5;
  $299 = ((($298)) + 204|0);
  HEAP32[$299>>2] = 0;
  $300 = $5;
  $301 = ((($300)) + 8|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = $302 & -65;
  HEAP32[$301>>2] = $303;
 }
 $304 = $6;
 $305 = $304 & 4096;
 $306 = $5;
 $307 = ((($306)) + 232|0);
 $308 = HEAP32[$307>>2]|0;
 $309 = $305 & $308;
 $310 = ($309|0)!=(0);
 if ($310) {
  $311 = $4;
  $312 = $5;
  $313 = ((($312)) + 16|0);
  $314 = HEAP32[$313>>2]|0;
  _png_free($311,$314);
  $315 = $5;
  $316 = ((($315)) + 16|0);
  HEAP32[$316>>2] = 0;
  $317 = $5;
  $318 = ((($317)) + 8|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = $319 & -9;
  HEAP32[$318>>2] = $320;
  $321 = $5;
  $322 = ((($321)) + 20|0);
  HEAP16[$322>>1] = 0;
 }
 $323 = $6;
 $324 = $323 & 64;
 $325 = $5;
 $326 = ((($325)) + 232|0);
 $327 = HEAP32[$326>>2]|0;
 $328 = $324 & $327;
 $329 = ($328|0)!=(0);
 if ($329) {
  $330 = $5;
  $331 = ((($330)) + 264|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = ($332|0)!=(0|0);
  if ($333) {
   $12 = 0;
   while(1) {
    $334 = $12;
    $335 = $5;
    $336 = ((($335)) + 4|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($334>>>0)<($337>>>0);
    $339 = $4;
    $340 = $5;
    $341 = ((($340)) + 264|0);
    $342 = HEAP32[$341>>2]|0;
    if (!($338)) {
     break;
    }
    $343 = $12;
    $344 = (($342) + ($343<<2)|0);
    $345 = HEAP32[$344>>2]|0;
    _png_free($339,$345);
    $346 = $12;
    $347 = (($346) + 1)|0;
    $12 = $347;
   }
   _png_free($339,$342);
   $348 = $5;
   $349 = ((($348)) + 264|0);
   HEAP32[$349>>2] = 0;
  }
  $350 = $5;
  $351 = ((($350)) + 8|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = $352 & -32769;
  HEAP32[$351>>2] = $353;
 }
 $354 = $7;
 $355 = ($354|0)!=(-1);
 if ($355) {
  $356 = $6;
  $357 = $356 & -16929;
  $6 = $357;
 }
 $358 = $6;
 $359 = $358 ^ -1;
 $360 = $5;
 $361 = ((($360)) + 232|0);
 $362 = HEAP32[$361>>2]|0;
 $363 = $362 & $359;
 HEAP32[$361>>2] = $363;
 STACKTOP = sp;return;
}
function _png_get_io_ptr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = ((($5)) + 188|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _png_handle_as_unknown($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 $9 = $4;
 $10 = ($9|0)==(0|0);
 $or$cond = $8 | $10;
 if (!($or$cond)) {
  $11 = $3;
  $12 = ((($11)) + 660|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = $3;
   $16 = ((($15)) + 664|0);
   $17 = HEAP32[$16>>2]|0;
   $6 = $17;
   $18 = $6;
   $19 = $3;
   $20 = ((($19)) + 660|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21*5)|0;
   $23 = (($18) + ($22)|0);
   $5 = $23;
   while(1) {
    $24 = $5;
    $25 = ((($24)) + -5|0);
    $5 = $25;
    $26 = $4;
    $27 = $5;
    $28 = (_memcmp($26,$27,4)|0);
    $29 = ($28|0)==(0);
    $30 = $5;
    if ($29) {
     label = 6;
     break;
    }
    $34 = $6;
    $35 = ($30>>>0)>($34>>>0);
    if (!($35)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
    $31 = ((($30)) + 4|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $2 = $33;
    $36 = $2;
    STACKTOP = sp;return ($36|0);
   }
   else if ((label|0) == 8) {
    $2 = 0;
    $36 = $2;
    STACKTOP = sp;return ($36|0);
   }
  }
 }
 $2 = 0;
 $36 = $2;
 STACKTOP = sp;return ($36|0);
}
function _png_chunk_unknown_handling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $5 >>> 24;
 $7 = $6 & 255;
 $8 = $7&255;
 HEAP8[$4>>0] = $8;
 $9 = $3;
 $10 = $9 >>> 16;
 $11 = $10 & 255;
 $12 = $11&255;
 $13 = ((($4)) + 1|0);
 HEAP8[$13>>0] = $12;
 $14 = $3;
 $15 = $14 >>> 8;
 $16 = $15 & 255;
 $17 = $16&255;
 $18 = ((($4)) + 2|0);
 HEAP8[$18>>0] = $17;
 $19 = $3;
 $20 = $19 & 255;
 $21 = $20&255;
 $22 = ((($4)) + 3|0);
 HEAP8[$22>>0] = $21;
 $23 = ((($4)) + 4|0);
 HEAP8[$23>>0] = 0;
 $24 = $2;
 $25 = (_png_handle_as_unknown($24,$4)|0);
 STACKTOP = sp;return ($25|0);
}
function _png_zstream_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 224|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $3;
 do {
  switch ($9|0) {
  case -7:  {
   $19 = $2;
   $$sink = 12682;$$sink3 = $19;
   break;
  }
  case 1:  {
   $11 = $2;
   $$sink = 12552;$$sink3 = $11;
   break;
  }
  case 2:  {
   $12 = $2;
   $$sink = 12580;$$sink3 = $12;
   break;
  }
  case -1:  {
   $13 = $2;
   $$sink = 12602;$$sink3 = $13;
   break;
  }
  case -2:  {
   $14 = $2;
   $$sink = 12616;$$sink3 = $14;
   break;
  }
  case -3:  {
   $15 = $2;
   $$sink = 12639;$$sink3 = $15;
   break;
  }
  case -4:  {
   $16 = $2;
   $$sink = 16303;$$sink3 = $16;
   break;
  }
  case -5:  {
   $17 = $2;
   $$sink = 15772;$$sink3 = $17;
   break;
  }
  case -6:  {
   $18 = $2;
   $$sink = 12657;$$sink3 = $18;
   break;
  }
  default: {
   $10 = $2;
   $$sink = 12524;$$sink3 = $10;
  }
  }
 } while(0);
 $20 = ((($$sink3)) + 224|0);
 $21 = ((($20)) + 24|0);
 HEAP32[$21>>2] = $$sink;
 STACKTOP = sp;return;
}
function _png_colorspace_set_gamma($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = ($7|0)<(16);
 $9 = $5;
 $10 = ($9|0)>(625000000);
 $or$cond = $8 | $10;
 do {
  if ($or$cond) {
   $6 = 12705;
  } else {
   $11 = $3;
   $12 = ((($11)) + 208|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 32768;
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $4;
    $17 = ((($16)) + 74|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = $18&65535;
    $20 = $19 & 8;
    $21 = ($20|0)!=(0);
    if ($21) {
     $6 = 15564;
     break;
    }
   }
   $22 = $4;
   $23 = ((($22)) + 74|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = $25 & 32768;
   $27 = ($26|0)!=(0);
   if ($27) {
    STACKTOP = sp;return;
   }
   $28 = $3;
   $29 = $4;
   $30 = $5;
   $31 = (_png_colorspace_check_gamma($28,$29,$30,1)|0);
   $32 = ($31|0)!=(0);
   if (!($32)) {
    STACKTOP = sp;return;
   }
   $33 = $5;
   $34 = $4;
   HEAP32[$34>>2] = $33;
   $35 = $4;
   $36 = ((($35)) + 74|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $37&65535;
   $39 = $38 | 9;
   $40 = $39&65535;
   HEAP16[$36>>1] = $40;
   STACKTOP = sp;return;
  }
 } while(0);
 $41 = $4;
 $42 = ((($41)) + 74|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = $44 | 32768;
 $46 = $45&65535;
 HEAP16[$42>>1] = $46;
 $47 = $3;
 $48 = $6;
 _png_chunk_report($47,$48,1);
 STACKTOP = sp;return;
}
function _png_colorspace_check_gamma($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $6;
 $11 = ((($10)) + 74|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 do {
  if ($15) {
   $16 = $6;
   $17 = HEAP32[$16>>2]|0;
   $18 = $7;
   $19 = (_png_muldiv($9,$17,100000,$18)|0);
   $20 = ($19|0)==(0);
   if (!($20)) {
    $21 = HEAP32[$9>>2]|0;
    $22 = (_png_gamma_significant($21)|0);
    $23 = ($22|0)!=(0);
    if (!($23)) {
     break;
    }
   }
   $24 = $6;
   $25 = ((($24)) + 74|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = $27 & 32;
   $29 = ($28|0)!=(0);
   $30 = $8;
   $31 = ($30|0)==(2);
   $or$cond = $29 | $31;
   $32 = $5;
   if ($or$cond) {
    _png_chunk_report($32,12730,2);
    $33 = $8;
    $34 = ($33|0)==(2);
    $35 = $34&1;
    $4 = $35;
    $39 = $4;
    STACKTOP = sp;return ($39|0);
   } else {
    _png_chunk_report($32,12762,0);
    $36 = $8;
    $37 = ($36|0)==(1);
    $38 = $37&1;
    $4 = $38;
    $39 = $4;
    STACKTOP = sp;return ($39|0);
   }
  }
 } while(0);
 $4 = 1;
 $39 = $4;
 STACKTOP = sp;return ($39|0);
}
function _png_muldiv($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $8;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $6;
  $13 = ($12|0)==(0);
  $14 = $7;
  $15 = ($14|0)==(0);
  $or$cond = $13 | $15;
  if ($or$cond) {
   $16 = $5;
   HEAP32[$16>>2] = 0;
   $4 = 1;
   $37 = $4;
   STACKTOP = sp;return ($37|0);
  }
  $17 = $6;
  $18 = (+($17|0));
  $9 = $18;
  $19 = $7;
  $20 = (+($19|0));
  $21 = $9;
  $22 = $21 * $20;
  $9 = $22;
  $23 = $8;
  $24 = (+($23|0));
  $25 = $9;
  $26 = $25 / $24;
  $9 = $26;
  $27 = $9;
  $28 = $27 + 0.5;
  $29 = (+Math_floor((+$28)));
  $9 = $29;
  $30 = $9;
  $31 = $30 <= 2147483647.0;
  $32 = $9;
  $33 = $32 >= -2147483648.0;
  $or$cond3 = $31 & $33;
  if ($or$cond3) {
   $34 = $9;
   $35 = (~~(($34)));
   $36 = $5;
   HEAP32[$36>>2] = $35;
   $4 = 1;
   $37 = $4;
   STACKTOP = sp;return ($37|0);
  }
 }
 $4 = 0;
 $37 = $4;
 STACKTOP = sp;return ($37|0);
}
function _png_gamma_significant($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)<(95000);
 $4 = $1;
 $5 = ($4|0)>(105000);
 $6 = $3 ? 1 : $5;
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _png_colorspace_sync_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink1 = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ((($4)) + 40|0);
 $6 = ((($5)) + 74|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = $8 & 32768;
 $10 = ($9|0)!=(0);
 $11 = $3;
 if ($10) {
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & -6150;
  HEAP32[$12>>2] = $14;
  $15 = $2;
  $16 = $3;
  _png_free_data($15,$16,16,-1);
  STACKTOP = sp;return;
 } else {
  $17 = ((($11)) + 40|0);
  $18 = ((($17)) + 74|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = $20 & 128;
  $22 = ($21|0)!=(0);
  $23 = $3;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & -2049;
  $27 = $25 | 2048;
  $$sink = $22 ? $27 : $26;
  HEAP32[$24>>2] = $$sink;
  $28 = $3;
  $29 = ((($28)) + 40|0);
  $30 = ((($29)) + 74|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = $32 & 2;
  $34 = ($33|0)!=(0);
  $35 = $3;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37 & -5;
  $39 = $37 | 4;
  $$sink1 = $34 ? $39 : $38;
  HEAP32[$36>>2] = $$sink1;
  $40 = $3;
  $41 = ((($40)) + 40|0);
  $42 = ((($41)) + 74|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43&65535;
  $45 = $44 & 1;
  $46 = ($45|0)!=(0);
  $47 = $3;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49 & -2;
  $51 = $49 | 1;
  $$sink2 = $46 ? $51 : $50;
  HEAP32[$48>>2] = $$sink2;
  STACKTOP = sp;return;
 }
}
function _png_colorspace_sync($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $3;
 $7 = ((($6)) + 40|0);
 $8 = $2;
 $9 = ((($8)) + 792|0);
 dest=$7; src=$9; stop=dest+76|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $10 = $2;
 $11 = $3;
 _png_colorspace_sync_info($10,$11);
 STACKTOP = sp;return;
}
function _png_colorspace_set_chromaticities($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $11 = (_png_colorspace_check_xy($9,$10)|0);
 switch ($11|0) {
 case 0:  {
  $12 = $5;
  $13 = $6;
  $14 = $7;
  $15 = $8;
  $16 = (_png_colorspace_set_xy_and_XYZ($12,$13,$14,$9,$15)|0);
  $4 = $16;
  $31 = $4;
  STACKTOP = sp;return ($31|0);
  break;
 }
 case 1:  {
  $17 = $6;
  $18 = ((($17)) + 74|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = $20 | 32768;
  $22 = $21&65535;
  HEAP16[$18>>1] = $22;
  $23 = $5;
  _png_benign_error($23,12805);
  $4 = 0;
  $31 = $4;
  STACKTOP = sp;return ($31|0);
  break;
 }
 default: {
  $24 = $6;
  $25 = ((($24)) + 74|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = $27 | 32768;
  $29 = $28&65535;
  HEAP16[$25>>1] = $29;
  $30 = $5;
  _png_error($30,12828);
  // unreachable;
 }
 }
 return (0)|0;
}
function _png_colorspace_check_xy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $4;
 $9 = (_png_XYZ_from_xy($7,$8)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $5;
   $2 = $12;
  } else {
   $13 = $3;
   $14 = (_png_xy_from_XYZ($6,$13)|0);
   $5 = $14;
   $15 = $5;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $5;
    $2 = $17;
    break;
   }
   $18 = $4;
   $19 = (_png_colorspace_endpoints_match($18,$6,5)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    $2 = 0;
    break;
   } else {
    $2 = 1;
    break;
   }
  }
 } while(0);
 $21 = $2;
 STACKTOP = sp;return ($21|0);
}
function _png_colorspace_set_xy_and_XYZ($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $7;
 $12 = ((($11)) + 74|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = $14 & 32768;
 $16 = ($15|0)!=(0);
 if ($16) {
  $5 = 0;
  $61 = $5;
  STACKTOP = sp;return ($61|0);
 }
 $17 = $10;
 $18 = ($17|0)<(2);
 if ($18) {
  $19 = $7;
  $20 = ((($19)) + 74|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 & 2;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $8;
   $26 = $7;
   $27 = ((($26)) + 4|0);
   $28 = (_png_colorspace_endpoints_match($25,$27,100)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $30 = $7;
    $31 = ((($30)) + 74|0);
    $32 = HEAP16[$31>>1]|0;
    $33 = $32&65535;
    $34 = $33 | 32768;
    $35 = $34&65535;
    HEAP16[$31>>1] = $35;
    $36 = $6;
    _png_benign_error($36,12867);
    $5 = 0;
    $61 = $5;
    STACKTOP = sp;return ($61|0);
   }
   $37 = $10;
   $38 = ($37|0)==(0);
   if ($38) {
    $5 = 1;
    $61 = $5;
    STACKTOP = sp;return ($61|0);
   }
  }
 }
 $39 = $7;
 $40 = ((($39)) + 4|0);
 $41 = $8;
 ;HEAP32[$40>>2]=HEAP32[$41>>2]|0;HEAP32[$40+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$40+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$40+12>>2]=HEAP32[$41+12>>2]|0;HEAP32[$40+16>>2]=HEAP32[$41+16>>2]|0;HEAP32[$40+20>>2]=HEAP32[$41+20>>2]|0;HEAP32[$40+24>>2]=HEAP32[$41+24>>2]|0;HEAP32[$40+28>>2]=HEAP32[$41+28>>2]|0;
 $42 = $7;
 $43 = ((($42)) + 36|0);
 $44 = $9;
 dest=$43; src=$44; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $45 = $7;
 $46 = ((($45)) + 74|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47&65535;
 $49 = $48 | 2;
 $50 = $49&65535;
 HEAP16[$46>>1] = $50;
 $51 = $8;
 $52 = (_png_colorspace_endpoints_match($51,448,1000)|0);
 $53 = ($52|0)!=(0);
 $54 = $7;
 $55 = ((($54)) + 74|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = $57 & 65471;
 $59 = $57 | 64;
 $$sink1 = $53 ? $59 : $58;
 $60 = $$sink1&65535;
 HEAP16[$55>>1] = $60;
 $5 = 2;
 $61 = $5;
 STACKTOP = sp;return ($61|0);
}
function _png_colorspace_endpoints_match($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = (($12) - ($13))|0;
 $15 = ($9|0)<($14|0);
 if (!($15)) {
  $16 = $4;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $5;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $6;
  $23 = (($21) + ($22))|0;
  $24 = ($18|0)>($23|0);
  if (!($24)) {
   $25 = $4;
   $26 = ((($25)) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $5;
   $29 = ((($28)) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $6;
   $32 = (($30) - ($31))|0;
   $33 = ($27|0)<($32|0);
   if (!($33)) {
    $34 = $4;
    $35 = ((($34)) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $5;
    $38 = ((($37)) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $6;
    $41 = (($39) + ($40))|0;
    $42 = ($36|0)>($41|0);
    if (!($42)) {
     $43 = $4;
     $44 = HEAP32[$43>>2]|0;
     $45 = $5;
     $46 = HEAP32[$45>>2]|0;
     $47 = $6;
     $48 = (($46) - ($47))|0;
     $49 = ($44|0)<($48|0);
     if (!($49)) {
      $50 = $4;
      $51 = HEAP32[$50>>2]|0;
      $52 = $5;
      $53 = HEAP32[$52>>2]|0;
      $54 = $6;
      $55 = (($53) + ($54))|0;
      $56 = ($51|0)>($55|0);
      if (!($56)) {
       $57 = $4;
       $58 = ((($57)) + 4|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = $5;
       $61 = ((($60)) + 4|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = $6;
       $64 = (($62) - ($63))|0;
       $65 = ($59|0)<($64|0);
       if (!($65)) {
        $66 = $4;
        $67 = ((($66)) + 4|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = $5;
        $70 = ((($69)) + 4|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = $6;
        $73 = (($71) + ($72))|0;
        $74 = ($68|0)>($73|0);
        if (!($74)) {
         $75 = $4;
         $76 = ((($75)) + 8|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = $5;
         $79 = ((($78)) + 8|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = $6;
         $82 = (($80) - ($81))|0;
         $83 = ($77|0)<($82|0);
         if (!($83)) {
          $84 = $4;
          $85 = ((($84)) + 8|0);
          $86 = HEAP32[$85>>2]|0;
          $87 = $5;
          $88 = ((($87)) + 8|0);
          $89 = HEAP32[$88>>2]|0;
          $90 = $6;
          $91 = (($89) + ($90))|0;
          $92 = ($86|0)>($91|0);
          if (!($92)) {
           $93 = $4;
           $94 = ((($93)) + 12|0);
           $95 = HEAP32[$94>>2]|0;
           $96 = $5;
           $97 = ((($96)) + 12|0);
           $98 = HEAP32[$97>>2]|0;
           $99 = $6;
           $100 = (($98) - ($99))|0;
           $101 = ($95|0)<($100|0);
           if (!($101)) {
            $102 = $4;
            $103 = ((($102)) + 12|0);
            $104 = HEAP32[$103>>2]|0;
            $105 = $5;
            $106 = ((($105)) + 12|0);
            $107 = HEAP32[$106>>2]|0;
            $108 = $6;
            $109 = (($107) + ($108))|0;
            $110 = ($104|0)>($109|0);
            if (!($110)) {
             $111 = $4;
             $112 = ((($111)) + 16|0);
             $113 = HEAP32[$112>>2]|0;
             $114 = $5;
             $115 = ((($114)) + 16|0);
             $116 = HEAP32[$115>>2]|0;
             $117 = $6;
             $118 = (($116) - ($117))|0;
             $119 = ($113|0)<($118|0);
             if (!($119)) {
              $120 = $4;
              $121 = ((($120)) + 16|0);
              $122 = HEAP32[$121>>2]|0;
              $123 = $5;
              $124 = ((($123)) + 16|0);
              $125 = HEAP32[$124>>2]|0;
              $126 = $6;
              $127 = (($125) + ($126))|0;
              $128 = ($122|0)>($127|0);
              if (!($128)) {
               $129 = $4;
               $130 = ((($129)) + 20|0);
               $131 = HEAP32[$130>>2]|0;
               $132 = $5;
               $133 = ((($132)) + 20|0);
               $134 = HEAP32[$133>>2]|0;
               $135 = $6;
               $136 = (($134) - ($135))|0;
               $137 = ($131|0)<($136|0);
               if (!($137)) {
                $138 = $4;
                $139 = ((($138)) + 20|0);
                $140 = HEAP32[$139>>2]|0;
                $141 = $5;
                $142 = ((($141)) + 20|0);
                $143 = HEAP32[$142>>2]|0;
                $144 = $6;
                $145 = (($143) + ($144))|0;
                $146 = ($140|0)>($145|0);
                if (!($146)) {
                 $3 = 1;
                 $147 = $3;
                 STACKTOP = sp;return ($147|0);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $3 = 0;
 $147 = $3;
 STACKTOP = sp;return ($147|0);
}
function _png_XYZ_from_xy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(0);
 if (!($13)) {
  $14 = $4;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(100000);
  if (!($16)) {
   $17 = $4;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)<(0);
   if (!($20)) {
    $21 = $4;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $4;
    $25 = HEAP32[$24>>2]|0;
    $26 = (100000 - ($25))|0;
    $27 = ($23|0)>($26|0);
    if (!($27)) {
     $28 = $4;
     $29 = ((($28)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)<(0);
     if (!($31)) {
      $32 = $4;
      $33 = ((($32)) + 8|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($34|0)>(100000);
      if (!($35)) {
       $36 = $4;
       $37 = ((($36)) + 12|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)<(0);
       if (!($39)) {
        $40 = $4;
        $41 = ((($40)) + 12|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = $4;
        $44 = ((($43)) + 8|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = (100000 - ($45))|0;
        $47 = ($42|0)>($46|0);
        if (!($47)) {
         $48 = $4;
         $49 = ((($48)) + 16|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ($50|0)<(0);
         if (!($51)) {
          $52 = $4;
          $53 = ((($52)) + 16|0);
          $54 = HEAP32[$53>>2]|0;
          $55 = ($54|0)>(100000);
          if (!($55)) {
           $56 = $4;
           $57 = ((($56)) + 20|0);
           $58 = HEAP32[$57>>2]|0;
           $59 = ($58|0)<(0);
           if (!($59)) {
            $60 = $4;
            $61 = ((($60)) + 20|0);
            $62 = HEAP32[$61>>2]|0;
            $63 = $4;
            $64 = ((($63)) + 16|0);
            $65 = HEAP32[$64>>2]|0;
            $66 = (100000 - ($65))|0;
            $67 = ($62|0)>($66|0);
            if (!($67)) {
             $68 = $4;
             $69 = ((($68)) + 24|0);
             $70 = HEAP32[$69>>2]|0;
             $71 = ($70|0)<(0);
             do {
              if (!($71)) {
               $72 = $4;
               $73 = ((($72)) + 24|0);
               $74 = HEAP32[$73>>2]|0;
               $75 = ($74|0)>(100000);
               if ($75) {
                break;
               }
               $76 = $4;
               $77 = ((($76)) + 28|0);
               $78 = HEAP32[$77>>2]|0;
               $79 = ($78|0)<(5);
               do {
                if (!($79)) {
                 $80 = $4;
                 $81 = ((($80)) + 28|0);
                 $82 = HEAP32[$81>>2]|0;
                 $83 = $4;
                 $84 = ((($83)) + 24|0);
                 $85 = HEAP32[$84>>2]|0;
                 $86 = (100000 - ($85))|0;
                 $87 = ($82|0)>($86|0);
                 if ($87) {
                  break;
                 }
                 $88 = $4;
                 $89 = ((($88)) + 8|0);
                 $90 = HEAP32[$89>>2]|0;
                 $91 = $4;
                 $92 = ((($91)) + 16|0);
                 $93 = HEAP32[$92>>2]|0;
                 $94 = (($90) - ($93))|0;
                 $95 = $4;
                 $96 = ((($95)) + 4|0);
                 $97 = HEAP32[$96>>2]|0;
                 $98 = $4;
                 $99 = ((($98)) + 20|0);
                 $100 = HEAP32[$99>>2]|0;
                 $101 = (($97) - ($100))|0;
                 $102 = (_png_muldiv($8,$94,$101,7)|0);
                 $103 = ($102|0)==(0);
                 if ($103) {
                  $2 = 2;
                  $309 = $2;
                  STACKTOP = sp;return ($309|0);
                 }
                 $104 = $4;
                 $105 = ((($104)) + 12|0);
                 $106 = HEAP32[$105>>2]|0;
                 $107 = $4;
                 $108 = ((($107)) + 20|0);
                 $109 = HEAP32[$108>>2]|0;
                 $110 = (($106) - ($109))|0;
                 $111 = $4;
                 $112 = HEAP32[$111>>2]|0;
                 $113 = $4;
                 $114 = ((($113)) + 16|0);
                 $115 = HEAP32[$114>>2]|0;
                 $116 = (($112) - ($115))|0;
                 $117 = (_png_muldiv($9,$110,$116,7)|0);
                 $118 = ($117|0)==(0);
                 if ($118) {
                  $2 = 2;
                  $309 = $2;
                  STACKTOP = sp;return ($309|0);
                 }
                 $119 = HEAP32[$8>>2]|0;
                 $120 = HEAP32[$9>>2]|0;
                 $121 = (($119) - ($120))|0;
                 $10 = $121;
                 $122 = $4;
                 $123 = ((($122)) + 8|0);
                 $124 = HEAP32[$123>>2]|0;
                 $125 = $4;
                 $126 = ((($125)) + 16|0);
                 $127 = HEAP32[$126>>2]|0;
                 $128 = (($124) - ($127))|0;
                 $129 = $4;
                 $130 = ((($129)) + 28|0);
                 $131 = HEAP32[$130>>2]|0;
                 $132 = $4;
                 $133 = ((($132)) + 20|0);
                 $134 = HEAP32[$133>>2]|0;
                 $135 = (($131) - ($134))|0;
                 $136 = (_png_muldiv($8,$128,$135,7)|0);
                 $137 = ($136|0)==(0);
                 if ($137) {
                  $2 = 2;
                  $309 = $2;
                  STACKTOP = sp;return ($309|0);
                 }
                 $138 = $4;
                 $139 = ((($138)) + 12|0);
                 $140 = HEAP32[$139>>2]|0;
                 $141 = $4;
                 $142 = ((($141)) + 20|0);
                 $143 = HEAP32[$142>>2]|0;
                 $144 = (($140) - ($143))|0;
                 $145 = $4;
                 $146 = ((($145)) + 24|0);
                 $147 = HEAP32[$146>>2]|0;
                 $148 = $4;
                 $149 = ((($148)) + 16|0);
                 $150 = HEAP32[$149>>2]|0;
                 $151 = (($147) - ($150))|0;
                 $152 = (_png_muldiv($9,$144,$151,7)|0);
                 $153 = ($152|0)==(0);
                 if ($153) {
                  $2 = 2;
                  $309 = $2;
                  STACKTOP = sp;return ($309|0);
                 }
                 $154 = $4;
                 $155 = ((($154)) + 28|0);
                 $156 = HEAP32[$155>>2]|0;
                 $157 = $10;
                 $158 = HEAP32[$8>>2]|0;
                 $159 = HEAP32[$9>>2]|0;
                 $160 = (($158) - ($159))|0;
                 $161 = (_png_muldiv($5,$156,$157,$160)|0);
                 $162 = ($161|0)==(0);
                 do {
                  if (!($162)) {
                   $163 = HEAP32[$5>>2]|0;
                   $164 = $4;
                   $165 = ((($164)) + 28|0);
                   $166 = HEAP32[$165>>2]|0;
                   $167 = ($163|0)<=($166|0);
                   if ($167) {
                    break;
                   }
                   $168 = $4;
                   $169 = ((($168)) + 4|0);
                   $170 = HEAP32[$169>>2]|0;
                   $171 = $4;
                   $172 = ((($171)) + 20|0);
                   $173 = HEAP32[$172>>2]|0;
                   $174 = (($170) - ($173))|0;
                   $175 = $4;
                   $176 = ((($175)) + 24|0);
                   $177 = HEAP32[$176>>2]|0;
                   $178 = $4;
                   $179 = ((($178)) + 16|0);
                   $180 = HEAP32[$179>>2]|0;
                   $181 = (($177) - ($180))|0;
                   $182 = (_png_muldiv($8,$174,$181,7)|0);
                   $183 = ($182|0)==(0);
                   if ($183) {
                    $2 = 2;
                    $309 = $2;
                    STACKTOP = sp;return ($309|0);
                   }
                   $184 = $4;
                   $185 = HEAP32[$184>>2]|0;
                   $186 = $4;
                   $187 = ((($186)) + 16|0);
                   $188 = HEAP32[$187>>2]|0;
                   $189 = (($185) - ($188))|0;
                   $190 = $4;
                   $191 = ((($190)) + 28|0);
                   $192 = HEAP32[$191>>2]|0;
                   $193 = $4;
                   $194 = ((($193)) + 20|0);
                   $195 = HEAP32[$194>>2]|0;
                   $196 = (($192) - ($195))|0;
                   $197 = (_png_muldiv($9,$189,$196,7)|0);
                   $198 = ($197|0)==(0);
                   if ($198) {
                    $2 = 2;
                    $309 = $2;
                    STACKTOP = sp;return ($309|0);
                   }
                   $199 = $4;
                   $200 = ((($199)) + 28|0);
                   $201 = HEAP32[$200>>2]|0;
                   $202 = $10;
                   $203 = HEAP32[$8>>2]|0;
                   $204 = HEAP32[$9>>2]|0;
                   $205 = (($203) - ($204))|0;
                   $206 = (_png_muldiv($6,$201,$202,$205)|0);
                   $207 = ($206|0)==(0);
                   do {
                    if (!($207)) {
                     $208 = HEAP32[$6>>2]|0;
                     $209 = $4;
                     $210 = ((($209)) + 28|0);
                     $211 = HEAP32[$210>>2]|0;
                     $212 = ($208|0)<=($211|0);
                     if ($212) {
                      break;
                     }
                     $213 = $4;
                     $214 = ((($213)) + 28|0);
                     $215 = HEAP32[$214>>2]|0;
                     $216 = (_png_reciprocal($215)|0);
                     $217 = HEAP32[$5>>2]|0;
                     $218 = (_png_reciprocal($217)|0);
                     $219 = (($216) - ($218))|0;
                     $220 = HEAP32[$6>>2]|0;
                     $221 = (_png_reciprocal($220)|0);
                     $222 = (($219) - ($221))|0;
                     $7 = $222;
                     $223 = $7;
                     $224 = ($223|0)<=(0);
                     if ($224) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                     $225 = $3;
                     $226 = $4;
                     $227 = HEAP32[$226>>2]|0;
                     $228 = HEAP32[$5>>2]|0;
                     $229 = (_png_muldiv($225,$227,100000,$228)|0);
                     $230 = ($229|0)==(0);
                     if ($230) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                     $231 = $3;
                     $232 = ((($231)) + 4|0);
                     $233 = $4;
                     $234 = ((($233)) + 4|0);
                     $235 = HEAP32[$234>>2]|0;
                     $236 = HEAP32[$5>>2]|0;
                     $237 = (_png_muldiv($232,$235,100000,$236)|0);
                     $238 = ($237|0)==(0);
                     if ($238) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                     $239 = $3;
                     $240 = ((($239)) + 8|0);
                     $241 = $4;
                     $242 = HEAP32[$241>>2]|0;
                     $243 = (100000 - ($242))|0;
                     $244 = $4;
                     $245 = ((($244)) + 4|0);
                     $246 = HEAP32[$245>>2]|0;
                     $247 = (($243) - ($246))|0;
                     $248 = HEAP32[$5>>2]|0;
                     $249 = (_png_muldiv($240,$247,100000,$248)|0);
                     $250 = ($249|0)==(0);
                     if ($250) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                     $251 = $3;
                     $252 = ((($251)) + 12|0);
                     $253 = $4;
                     $254 = ((($253)) + 8|0);
                     $255 = HEAP32[$254>>2]|0;
                     $256 = HEAP32[$6>>2]|0;
                     $257 = (_png_muldiv($252,$255,100000,$256)|0);
                     $258 = ($257|0)==(0);
                     if ($258) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                     $259 = $3;
                     $260 = ((($259)) + 16|0);
                     $261 = $4;
                     $262 = ((($261)) + 12|0);
                     $263 = HEAP32[$262>>2]|0;
                     $264 = HEAP32[$6>>2]|0;
                     $265 = (_png_muldiv($260,$263,100000,$264)|0);
                     $266 = ($265|0)==(0);
                     if ($266) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                     $267 = $3;
                     $268 = ((($267)) + 20|0);
                     $269 = $4;
                     $270 = ((($269)) + 8|0);
                     $271 = HEAP32[$270>>2]|0;
                     $272 = (100000 - ($271))|0;
                     $273 = $4;
                     $274 = ((($273)) + 12|0);
                     $275 = HEAP32[$274>>2]|0;
                     $276 = (($272) - ($275))|0;
                     $277 = HEAP32[$6>>2]|0;
                     $278 = (_png_muldiv($268,$276,100000,$277)|0);
                     $279 = ($278|0)==(0);
                     if ($279) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                     $280 = $3;
                     $281 = ((($280)) + 24|0);
                     $282 = $4;
                     $283 = ((($282)) + 16|0);
                     $284 = HEAP32[$283>>2]|0;
                     $285 = $7;
                     $286 = (_png_muldiv($281,$284,$285,100000)|0);
                     $287 = ($286|0)==(0);
                     if ($287) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                     $288 = $3;
                     $289 = ((($288)) + 28|0);
                     $290 = $4;
                     $291 = ((($290)) + 20|0);
                     $292 = HEAP32[$291>>2]|0;
                     $293 = $7;
                     $294 = (_png_muldiv($289,$292,$293,100000)|0);
                     $295 = ($294|0)==(0);
                     if ($295) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                     $296 = $3;
                     $297 = ((($296)) + 32|0);
                     $298 = $4;
                     $299 = ((($298)) + 16|0);
                     $300 = HEAP32[$299>>2]|0;
                     $301 = (100000 - ($300))|0;
                     $302 = $4;
                     $303 = ((($302)) + 20|0);
                     $304 = HEAP32[$303>>2]|0;
                     $305 = (($301) - ($304))|0;
                     $306 = $7;
                     $307 = (_png_muldiv($297,$305,$306,100000)|0);
                     $308 = ($307|0)==(0);
                     if ($308) {
                      $2 = 1;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     } else {
                      $2 = 0;
                      $309 = $2;
                      STACKTOP = sp;return ($309|0);
                     }
                    }
                   } while(0);
                   $2 = 1;
                   $309 = $2;
                   STACKTOP = sp;return ($309|0);
                  }
                 } while(0);
                 $2 = 1;
                 $309 = $2;
                 STACKTOP = sp;return ($309|0);
                }
               } while(0);
               $2 = 1;
               $309 = $2;
               STACKTOP = sp;return ($309|0);
              }
             } while(0);
             $2 = 1;
             $309 = $2;
             STACKTOP = sp;return ($309|0);
            }
           }
           $2 = 1;
           $309 = $2;
           STACKTOP = sp;return ($309|0);
          }
         }
         $2 = 1;
         $309 = $2;
         STACKTOP = sp;return ($309|0);
        }
       }
       $2 = 1;
       $309 = $2;
       STACKTOP = sp;return ($309|0);
      }
     }
     $2 = 1;
     $309 = $2;
     STACKTOP = sp;return ($309|0);
    }
   }
   $2 = 1;
   $309 = $2;
   STACKTOP = sp;return ($309|0);
  }
 }
 $2 = 1;
 $309 = $2;
 STACKTOP = sp;return ($309|0);
}
function _png_xy_from_XYZ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) + ($13))|0;
 $15 = $4;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) + ($17))|0;
 $5 = $18;
 $19 = $3;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = $5;
 $23 = (_png_muldiv($19,$21,100000,$22)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $2 = 1;
  $131 = $2;
  STACKTOP = sp;return ($131|0);
 }
 $25 = $3;
 $26 = ((($25)) + 4|0);
 $27 = $4;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $5;
 $31 = (_png_muldiv($26,$29,100000,$30)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $2 = 1;
  $131 = $2;
  STACKTOP = sp;return ($131|0);
 }
 $33 = $5;
 $6 = $33;
 $34 = $4;
 $35 = HEAP32[$34>>2]|0;
 $7 = $35;
 $36 = $4;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $8 = $38;
 $39 = $4;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $4;
 $43 = ((($42)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($41) + ($44))|0;
 $46 = $4;
 $47 = ((($46)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($45) + ($48))|0;
 $5 = $49;
 $50 = $3;
 $51 = ((($50)) + 8|0);
 $52 = $4;
 $53 = ((($52)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $5;
 $56 = (_png_muldiv($51,$54,100000,$55)|0);
 $57 = ($56|0)==(0);
 if ($57) {
  $2 = 1;
  $131 = $2;
  STACKTOP = sp;return ($131|0);
 }
 $58 = $3;
 $59 = ((($58)) + 12|0);
 $60 = $4;
 $61 = ((($60)) + 16|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $5;
 $64 = (_png_muldiv($59,$62,100000,$63)|0);
 $65 = ($64|0)==(0);
 if ($65) {
  $2 = 1;
  $131 = $2;
  STACKTOP = sp;return ($131|0);
 }
 $66 = $5;
 $67 = $6;
 $68 = (($67) + ($66))|0;
 $6 = $68;
 $69 = $4;
 $70 = ((($69)) + 12|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $7;
 $73 = (($72) + ($71))|0;
 $7 = $73;
 $74 = $4;
 $75 = ((($74)) + 16|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $8;
 $78 = (($77) + ($76))|0;
 $8 = $78;
 $79 = $4;
 $80 = ((($79)) + 24|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $4;
 $83 = ((($82)) + 28|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($81) + ($84))|0;
 $86 = $4;
 $87 = ((($86)) + 32|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($85) + ($88))|0;
 $5 = $89;
 $90 = $3;
 $91 = ((($90)) + 16|0);
 $92 = $4;
 $93 = ((($92)) + 24|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $5;
 $96 = (_png_muldiv($91,$94,100000,$95)|0);
 $97 = ($96|0)==(0);
 if ($97) {
  $2 = 1;
  $131 = $2;
  STACKTOP = sp;return ($131|0);
 }
 $98 = $3;
 $99 = ((($98)) + 20|0);
 $100 = $4;
 $101 = ((($100)) + 28|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $5;
 $104 = (_png_muldiv($99,$102,100000,$103)|0);
 $105 = ($104|0)==(0);
 if ($105) {
  $2 = 1;
  $131 = $2;
  STACKTOP = sp;return ($131|0);
 }
 $106 = $5;
 $107 = $6;
 $108 = (($107) + ($106))|0;
 $6 = $108;
 $109 = $4;
 $110 = ((($109)) + 24|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $7;
 $113 = (($112) + ($111))|0;
 $7 = $113;
 $114 = $4;
 $115 = ((($114)) + 28|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $8;
 $118 = (($117) + ($116))|0;
 $8 = $118;
 $119 = $3;
 $120 = ((($119)) + 24|0);
 $121 = $7;
 $122 = $6;
 $123 = (_png_muldiv($120,$121,100000,$122)|0);
 $124 = ($123|0)==(0);
 if ($124) {
  $2 = 1;
  $131 = $2;
  STACKTOP = sp;return ($131|0);
 }
 $125 = $3;
 $126 = ((($125)) + 28|0);
 $127 = $8;
 $128 = $6;
 $129 = (_png_muldiv($126,$127,100000,$128)|0);
 $130 = ($129|0)==(0);
 if ($130) {
  $2 = 1;
  $131 = $2;
  STACKTOP = sp;return ($131|0);
 } else {
  $2 = 0;
  $131 = $2;
  STACKTOP = sp;return ($131|0);
 }
 return (0)|0;
}
function _png_reciprocal($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (+($4|0));
 $6 = 1.0E+10 / $5;
 $7 = $6 + 0.5;
 $8 = (+Math_floor((+$7)));
 $3 = $8;
 $9 = $3;
 $10 = $9 <= 2147483647.0;
 $11 = $3;
 $12 = $11 >= -2147483648.0;
 $or$cond = $10 & $12;
 if ($or$cond) {
  $13 = $3;
  $14 = (~~(($13)));
  $1 = $14;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 } else {
  $1 = 0;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _png_colorspace_set_sRGB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ((($7)) + 74|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 & 32768;
 $12 = ($11|0)!=(0);
 if ($12) {
  $3 = 0;
  $90 = $3;
  STACKTOP = sp;return ($90|0);
 }
 $13 = $6;
 $14 = ($13|0)<(0);
 $15 = $6;
 $16 = ($15|0)>=(4);
 $or$cond = $14 | $16;
 if ($or$cond) {
  $17 = $4;
  $18 = $5;
  $19 = $6;
  $20 = (_png_icc_profile_error($17,$18,12895,$19,12900)|0);
  $3 = $20;
  $90 = $3;
  STACKTOP = sp;return ($90|0);
 }
 $21 = $5;
 $22 = ((($21)) + 74|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = $24 & 4;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $5;
  $28 = ((($27)) + 72|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = $6;
  $32 = ($30|0)!=($31|0);
  if ($32) {
   $33 = $4;
   $34 = $5;
   $35 = $6;
   $36 = (_png_icc_profile_error($33,$34,12895,$35,12930)|0);
   $3 = $36;
   $90 = $3;
   STACKTOP = sp;return ($90|0);
  }
 }
 $37 = $5;
 $38 = ((($37)) + 74|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = $40 & 32;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $4;
  _png_benign_error($43,12961);
  $3 = 0;
  $90 = $3;
  STACKTOP = sp;return ($90|0);
 }
 $44 = $5;
 $45 = ((($44)) + 74|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = $47 & 2;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $5;
  $51 = ((($50)) + 4|0);
  $52 = (_png_colorspace_endpoints_match(448,$51,100)|0);
  $53 = ($52|0)!=(0);
  if (!($53)) {
   $54 = $4;
   _png_chunk_report($54,12996,2);
  }
 }
 $55 = $4;
 $56 = $5;
 (_png_colorspace_check_gamma($55,$56,45455,2)|0);
 $57 = $6;
 $58 = $57&65535;
 $59 = $5;
 $60 = ((($59)) + 72|0);
 HEAP16[$60>>1] = $58;
 $61 = $5;
 $62 = ((($61)) + 74|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = $63&65535;
 $65 = $64 | 4;
 $66 = $65&65535;
 HEAP16[$62>>1] = $66;
 $67 = $5;
 $68 = ((($67)) + 4|0);
 ;HEAP32[$68>>2]=HEAP32[448>>2]|0;HEAP32[$68+4>>2]=HEAP32[448+4>>2]|0;HEAP32[$68+8>>2]=HEAP32[448+8>>2]|0;HEAP32[$68+12>>2]=HEAP32[448+12>>2]|0;HEAP32[$68+16>>2]=HEAP32[448+16>>2]|0;HEAP32[$68+20>>2]=HEAP32[448+20>>2]|0;HEAP32[$68+24>>2]=HEAP32[448+24>>2]|0;HEAP32[$68+28>>2]=HEAP32[448+28>>2]|0;
 $69 = $5;
 $70 = ((($69)) + 36|0);
 dest=$70; src=480; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $71 = $5;
 $72 = ((($71)) + 74|0);
 $73 = HEAP16[$72>>1]|0;
 $74 = $73&65535;
 $75 = $74 | 66;
 $76 = $75&65535;
 HEAP16[$72>>1] = $76;
 $77 = $5;
 HEAP32[$77>>2] = 45455;
 $78 = $5;
 $79 = ((($78)) + 74|0);
 $80 = HEAP16[$79>>1]|0;
 $81 = $80&65535;
 $82 = $81 | 1;
 $83 = $82&65535;
 HEAP16[$79>>1] = $83;
 $84 = $5;
 $85 = ((($84)) + 74|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = $87 | 160;
 $89 = $88&65535;
 HEAP16[$85>>1] = $89;
 $3 = 1;
 $90 = $3;
 STACKTOP = sp;return ($90|0);
}
function _png_icc_profile_error($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $11 = sp + 48|0;
 $12 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $6;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $6;
  $16 = ((($15)) + 74|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = $18 | 32768;
  $20 = $19&65535;
  HEAP16[$16>>1] = $20;
 }
 $21 = (_png_safecat($11,196,0,13027)|0);
 $10 = $21;
 $22 = $10;
 $23 = (($22) + 79)|0;
 $24 = $10;
 $25 = $7;
 $26 = (_png_safecat($11,$23,$24,$25)|0);
 $10 = $26;
 $27 = $10;
 $28 = (_png_safecat($11,196,$27,13037)|0);
 $10 = $28;
 $29 = $8;
 $30 = (_is_ICC_signature($29)|0);
 $31 = ($30|0)!=(0);
 $32 = $10;
 if ($31) {
  $33 = (($11) + ($32)|0);
  $34 = $8;
  _png_icc_tag_name($33,$34);
  $35 = $10;
  $36 = (($35) + 6)|0;
  $10 = $36;
  $37 = $10;
  $38 = (($37) + 1)|0;
  $10 = $38;
  $39 = (($11) + ($37)|0);
  HEAP8[$39>>0] = 58;
  $40 = $10;
  $41 = (($40) + 1)|0;
  $10 = $41;
  $42 = (($11) + ($40)|0);
  HEAP8[$42>>0] = 32;
  $49 = $10;
  $50 = $9;
  $51 = (_png_safecat($11,196,$49,$50)|0);
  $10 = $51;
  $52 = $5;
  $53 = $6;
  $54 = ($53|0)!=(0|0);
  $55 = $54 ? 2 : 1;
  _png_chunk_report($52,$11,$55);
  STACKTOP = sp;return 0;
 } else {
  $43 = ((($12)) + 24|0);
  $44 = $8;
  $45 = (_png_format_number($12,$43,3,$44)|0);
  $46 = (_png_safecat($11,196,$32,$45)|0);
  $10 = $46;
  $47 = $10;
  $48 = (_png_safecat($11,196,$47,13041)|0);
  $10 = $48;
  $49 = $10;
  $50 = $9;
  $51 = (_png_safecat($11,196,$49,$50)|0);
  $10 = $51;
  $52 = $5;
  $53 = $6;
  $54 = ($53|0)!=(0|0);
  $55 = $54 ? 2 : 1;
  _png_chunk_report($52,$11,$55);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _is_ICC_signature($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 >>> 24;
 $4 = (_is_ICC_signature_char($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $1;
  $7 = $6 >>> 16;
  $8 = $7 & 255;
  $9 = (_is_ICC_signature_char($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $1;
   $12 = $11 >>> 8;
   $13 = $12 & 255;
   $14 = (_is_ICC_signature_char($13)|0);
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $1;
    $17 = $16 & 255;
    $18 = (_is_ICC_signature_char($17)|0);
    $19 = ($18|0)!=(0);
    $21 = $19;
   } else {
    $21 = 0;
   }
  } else {
   $21 = 0;
  }
 } else {
  $21 = 0;
 }
 $20 = $21&1;
 STACKTOP = sp;return ($20|0);
}
function _png_icc_tag_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 HEAP8[$4>>0] = 39;
 $5 = $3;
 $6 = $5 >>> 24;
 $7 = (_png_icc_tag_char($6)|0);
 $8 = $2;
 $9 = ((($8)) + 1|0);
 HEAP8[$9>>0] = $7;
 $10 = $3;
 $11 = $10 >>> 16;
 $12 = (_png_icc_tag_char($11)|0);
 $13 = $2;
 $14 = ((($13)) + 2|0);
 HEAP8[$14>>0] = $12;
 $15 = $3;
 $16 = $15 >>> 8;
 $17 = (_png_icc_tag_char($16)|0);
 $18 = $2;
 $19 = ((($18)) + 3|0);
 HEAP8[$19>>0] = $17;
 $20 = $3;
 $21 = (_png_icc_tag_char($20)|0);
 $22 = $2;
 $23 = ((($22)) + 4|0);
 HEAP8[$23>>0] = $21;
 $24 = $2;
 $25 = ((($24)) + 5|0);
 HEAP8[$25>>0] = 39;
 STACKTOP = sp;return;
}
function _png_icc_tag_char($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 & 255;
 $2 = $4;
 $5 = $2;
 $6 = ($5>>>0)>=(32);
 $7 = $2;
 $8 = ($7>>>0)<=(126);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $2;
  $10 = $9&255;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $1 = 63;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _is_ICC_signature_char($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(32);
 if ($3) {
  $18 = 1;
 } else {
  $4 = $1;
  $5 = ($4>>>0)>=(48);
  $6 = $1;
  $7 = ($6>>>0)<=(57);
  $or$cond = $5 & $7;
  if ($or$cond) {
   $18 = 1;
  } else {
   $8 = $1;
   $9 = ($8>>>0)>=(65);
   $10 = $1;
   $11 = ($10>>>0)<=(90);
   $or$cond3 = $9 & $11;
   if ($or$cond3) {
    $18 = 1;
   } else {
    $12 = $1;
    $13 = ($12>>>0)>=(97);
    $14 = $1;
    $15 = ($14>>>0)<=(122);
    $16 = $13 ? $15 : 0;
    $18 = $16;
   }
  }
 }
 $17 = $18&1;
 STACKTOP = sp;return ($17|0);
}
function _png_icc_check_length($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $8;
 $10 = ($9>>>0)<(132);
 if ($10) {
  $11 = $5;
  $12 = $6;
  $13 = $7;
  $14 = $8;
  $15 = (_png_icc_profile_error($11,$12,$13,$14,15726)|0);
  $4 = $15;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 } else {
  $4 = 1;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _png_icc_check_header($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch$split112D = 0, $switch$split142D = 0, $switch$split172D = 0, $switch$split202D = 0, $switch$split232D = 0, $switch$split262D = 0, $switch$split2D = 0, $switch$split82D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = $11;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = $11;
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 << 16;
 $23 = (($17) + ($22))|0;
 $24 = $11;
 $25 = ((($24)) + 2|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 8;
 $29 = (($23) + ($28))|0;
 $30 = $11;
 $31 = ((($30)) + 3|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = (($29) + ($33))|0;
 $13 = $34;
 $35 = $13;
 $36 = $10;
 $37 = ($35|0)!=($36|0);
 if ($37) {
  $38 = $7;
  $39 = $8;
  $40 = $9;
  $41 = $13;
  $42 = (_png_icc_profile_error($38,$39,$40,$41,13045)|0);
  $6 = $42;
  $289 = $6;
  STACKTOP = sp;return ($289|0);
 }
 $43 = $11;
 $44 = ((($43)) + 8|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $13 = $46;
 $47 = $13;
 $48 = ($47>>>0)>(3);
 if ($48) {
  $49 = $10;
  $50 = $49 & 3;
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = $7;
   $53 = $8;
   $54 = $9;
   $55 = $10;
   $56 = (_png_icc_profile_error($52,$53,$54,$55,13075)|0);
   $6 = $56;
   $289 = $6;
   STACKTOP = sp;return ($289|0);
  }
 }
 $57 = $11;
 $58 = ((($57)) + 128|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 << 24;
 $62 = $11;
 $63 = ((($62)) + 128|0);
 $64 = ((($63)) + 1|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = $66 << 16;
 $68 = (($61) + ($67))|0;
 $69 = $11;
 $70 = ((($69)) + 128|0);
 $71 = ((($70)) + 2|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 << 8;
 $75 = (($68) + ($74))|0;
 $76 = $11;
 $77 = ((($76)) + 128|0);
 $78 = ((($77)) + 3|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = (($75) + ($80))|0;
 $13 = $81;
 $82 = $13;
 $83 = ($82>>>0)>(357913930);
 if (!($83)) {
  $84 = $10;
  $85 = $13;
  $86 = ($85*12)|0;
  $87 = (132 + ($86))|0;
  $88 = ($84>>>0)<($87>>>0);
  if (!($88)) {
   $94 = $11;
   $95 = ((($94)) + 64|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $97 << 24;
   $99 = $11;
   $100 = ((($99)) + 64|0);
   $101 = ((($100)) + 1|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $103 << 16;
   $105 = (($98) + ($104))|0;
   $106 = $11;
   $107 = ((($106)) + 64|0);
   $108 = ((($107)) + 2|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = $110 << 8;
   $112 = (($105) + ($111))|0;
   $113 = $11;
   $114 = ((($113)) + 64|0);
   $115 = ((($114)) + 3|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&255;
   $118 = (($112) + ($117))|0;
   $13 = $118;
   $119 = $13;
   $120 = ($119>>>0)>=(65535);
   if ($120) {
    $121 = $7;
    $122 = $8;
    $123 = $9;
    $124 = $13;
    $125 = (_png_icc_profile_error($121,$122,$123,$124,13110)|0);
    $6 = $125;
    $289 = $6;
    STACKTOP = sp;return ($289|0);
   }
   $126 = $13;
   $127 = ($126>>>0)>=(4);
   if ($127) {
    $128 = $7;
    $129 = $9;
    $130 = $13;
    (_png_icc_profile_error($128,0,$129,$130,13135)|0);
   }
   $131 = $11;
   $132 = ((($131)) + 36|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = $134 << 24;
   $136 = $11;
   $137 = ((($136)) + 36|0);
   $138 = ((($137)) + 1|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $139&255;
   $141 = $140 << 16;
   $142 = (($135) + ($141))|0;
   $143 = $11;
   $144 = ((($143)) + 36|0);
   $145 = ((($144)) + 2|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = $147 << 8;
   $149 = (($142) + ($148))|0;
   $150 = $11;
   $151 = ((($150)) + 36|0);
   $152 = ((($151)) + 3|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = (($149) + ($154))|0;
   $13 = $155;
   $156 = $13;
   $157 = ($156|0)!=(1633907568);
   if ($157) {
    $158 = $7;
    $159 = $8;
    $160 = $9;
    $161 = $13;
    $162 = (_png_icc_profile_error($158,$159,$160,$161,13164)|0);
    $6 = $162;
    $289 = $6;
    STACKTOP = sp;return ($289|0);
   }
   $163 = $11;
   $164 = ((($163)) + 68|0);
   $165 = (_memcmp($164,13182,12)|0);
   $166 = ($165|0)!=(0);
   if ($166) {
    $167 = $7;
    $168 = $9;
    (_png_icc_profile_error($167,0,$168,0,13194)|0);
   }
   $169 = $11;
   $170 = ((($169)) + 16|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = $172 << 24;
   $174 = $11;
   $175 = ((($174)) + 16|0);
   $176 = ((($175)) + 1|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = $178 << 16;
   $180 = (($173) + ($179))|0;
   $181 = $11;
   $182 = ((($181)) + 16|0);
   $183 = ((($182)) + 2|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184&255;
   $186 = $185 << 8;
   $187 = (($180) + ($186))|0;
   $188 = $11;
   $189 = ((($188)) + 16|0);
   $190 = ((($189)) + 3|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = (($187) + ($192))|0;
   $13 = $193;
   $194 = $13;
   $switch$split2D = ($194|0)<(1380401696);
   L27: do {
    if ($switch$split2D) {
     switch ($194|0) {
     case 1196573017:  {
      break;
     }
     default: {
      label = 22;
      break L27;
     }
     }
     $203 = $12;
     $204 = $203 & 2;
     $205 = ($204|0)!=(0);
     if ($205) {
      $206 = $7;
      $207 = $8;
      $208 = $9;
      $209 = $13;
      $210 = (_png_icc_profile_error($206,$207,$208,$209,13267)|0);
      $6 = $210;
      $289 = $6;
      STACKTOP = sp;return ($289|0);
     }
    } else {
     switch ($194|0) {
     case 1380401696:  {
      break;
     }
     default: {
      label = 22;
      break L27;
     }
     }
     $195 = $12;
     $196 = $195 & 2;
     $197 = ($196|0)==(0);
     if ($197) {
      $198 = $7;
      $199 = $8;
      $200 = $9;
      $201 = $13;
      $202 = (_png_icc_profile_error($198,$199,$200,$201,13220)|0);
      $6 = $202;
      $289 = $6;
      STACKTOP = sp;return ($289|0);
     }
    }
   } while(0);
   if ((label|0) == 22) {
    $211 = $7;
    $212 = $8;
    $213 = $9;
    $214 = $13;
    $215 = (_png_icc_profile_error($211,$212,$213,$214,13309)|0);
    $6 = $215;
    $289 = $6;
    STACKTOP = sp;return ($289|0);
   }
   $216 = $11;
   $217 = ((($216)) + 12|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = $219 << 24;
   $221 = $11;
   $222 = ((($221)) + 12|0);
   $223 = ((($222)) + 1|0);
   $224 = HEAP8[$223>>0]|0;
   $225 = $224&255;
   $226 = $225 << 16;
   $227 = (($220) + ($226))|0;
   $228 = $11;
   $229 = ((($228)) + 12|0);
   $230 = ((($229)) + 2|0);
   $231 = HEAP8[$230>>0]|0;
   $232 = $231&255;
   $233 = $232 << 8;
   $234 = (($227) + ($233))|0;
   $235 = $11;
   $236 = ((($235)) + 12|0);
   $237 = ((($236)) + 3|0);
   $238 = HEAP8[$237>>0]|0;
   $239 = $238&255;
   $240 = (($234) + ($239))|0;
   $13 = $240;
   $241 = $13;
   $switch$split82D = ($241|0)<(1852662636);
   L40: do {
    if ($switch$split82D) {
     $switch$split142D = ($241|0)<(1818848875);
     if ($switch$split142D) {
      switch ($241|0) {
      case 1633842036:  {
       break;
      }
      default: {
       label = 27;
       break L40;
      }
      }
      $242 = $7;
      $243 = $8;
      $244 = $9;
      $245 = $13;
      $246 = (_png_icc_profile_error($242,$243,$244,$245,13341)|0);
      $6 = $246;
      $289 = $6;
      STACKTOP = sp;return ($289|0);
     }
     $switch$split202D = ($241|0)<(1835955314);
     if (!($switch$split202D)) {
      switch ($241|0) {
      case 1835955314:  {
       break L40;
       break;
      }
      default: {
       label = 27;
       break L40;
      }
      }
     }
     switch ($241|0) {
     case 1818848875:  {
      break;
     }
     default: {
      label = 27;
      break L40;
     }
     }
     $247 = $7;
     $248 = $8;
     $249 = $9;
     $250 = $13;
     $251 = (_png_icc_profile_error($247,$248,$249,$250,13379)|0);
     $6 = $251;
     $289 = $6;
     STACKTOP = sp;return ($289|0);
    } else {
     $switch$split172D = ($241|0)<(1935896178);
     if (!($switch$split172D)) {
      $switch$split262D = ($241|0)<(1936744803);
      if ($switch$split262D) {
       switch ($241|0) {
       case 1935896178:  {
        break L40;
        break;
       }
       default: {
        label = 27;
        break L40;
       }
       }
      } else {
       switch ($241|0) {
       case 1936744803:  {
        break L40;
        break;
       }
       default: {
        label = 27;
        break L40;
       }
       }
      }
     }
     $switch$split232D = ($241|0)<(1886549106);
     if (!($switch$split232D)) {
      switch ($241|0) {
      case 1886549106:  {
       break L40;
       break;
      }
      default: {
       label = 27;
       break L40;
      }
      }
     }
     switch ($241|0) {
     case 1852662636:  {
      break;
     }
     default: {
      label = 27;
      break L40;
     }
     }
     $252 = $7;
     $253 = $9;
     $254 = $13;
     (_png_icc_profile_error($252,0,$253,$254,13419)|0);
    }
   } while(0);
   if ((label|0) == 27) {
    $255 = $7;
    $256 = $9;
    $257 = $13;
    (_png_icc_profile_error($255,0,$256,$257,13459)|0);
   }
   $258 = $11;
   $259 = ((($258)) + 20|0);
   $260 = HEAP8[$259>>0]|0;
   $261 = $260&255;
   $262 = $261 << 24;
   $263 = $11;
   $264 = ((($263)) + 20|0);
   $265 = ((($264)) + 1|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = $266&255;
   $268 = $267 << 16;
   $269 = (($262) + ($268))|0;
   $270 = $11;
   $271 = ((($270)) + 20|0);
   $272 = ((($271)) + 2|0);
   $273 = HEAP8[$272>>0]|0;
   $274 = $273&255;
   $275 = $274 << 8;
   $276 = (($269) + ($275))|0;
   $277 = $11;
   $278 = ((($277)) + 20|0);
   $279 = ((($278)) + 3|0);
   $280 = HEAP8[$279>>0]|0;
   $281 = $280&255;
   $282 = (($276) + ($281))|0;
   $13 = $282;
   $283 = $13;
   $switch$split112D = ($283|0)<(1482250784);
   if ($switch$split112D) {
    switch ($283|0) {
    case 1281450528:  {
     label = 30;
     break;
    }
    default: {
     label = 29;
    }
    }
   } else {
    switch ($283|0) {
    case 1482250784:  {
     label = 30;
     break;
    }
    default: {
     label = 29;
    }
    }
   }
   if ((label|0) == 29) {
    $284 = $7;
    $285 = $8;
    $286 = $9;
    $287 = $13;
    $288 = (_png_icc_profile_error($284,$285,$286,$287,13490)|0);
    $6 = $288;
    $289 = $6;
    STACKTOP = sp;return ($289|0);
   }
   else if ((label|0) == 30) {
    $6 = 1;
    $289 = $6;
    STACKTOP = sp;return ($289|0);
   }
  }
 }
 $89 = $7;
 $90 = $8;
 $91 = $9;
 $92 = $13;
 $93 = (_png_icc_profile_error($89,$90,$91,$92,13090)|0);
 $6 = $93;
 $289 = $6;
 STACKTOP = sp;return ($289|0);
}
function _png_icc_check_tag_table($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = $10;
 $18 = ((($17)) + 128|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 24;
 $22 = $10;
 $23 = ((($22)) + 128|0);
 $24 = ((($23)) + 1|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 << 16;
 $28 = (($21) + ($27))|0;
 $29 = $10;
 $30 = ((($29)) + 128|0);
 $31 = ((($30)) + 2|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = (($28) + ($34))|0;
 $36 = $10;
 $37 = ((($36)) + 128|0);
 $38 = ((($37)) + 3|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = (($35) + ($40))|0;
 $11 = $41;
 $42 = $10;
 $43 = ((($42)) + 132|0);
 $13 = $43;
 $12 = 0;
 while(1) {
  $44 = $12;
  $45 = $11;
  $46 = ($44>>>0)<($45>>>0);
  if (!($46)) {
   label = 9;
   break;
  }
  $47 = $13;
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $13;
  $52 = ((($51)) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $54 << 16;
  $56 = (($50) + ($55))|0;
  $57 = $13;
  $58 = ((($57)) + 2|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $60 << 8;
  $62 = (($56) + ($61))|0;
  $63 = $13;
  $64 = ((($63)) + 3|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = (($62) + ($66))|0;
  $14 = $67;
  $68 = $13;
  $69 = ((($68)) + 4|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 << 24;
  $73 = $13;
  $74 = ((($73)) + 4|0);
  $75 = ((($74)) + 1|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $77 << 16;
  $79 = (($72) + ($78))|0;
  $80 = $13;
  $81 = ((($80)) + 4|0);
  $82 = ((($81)) + 2|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = $84 << 8;
  $86 = (($79) + ($85))|0;
  $87 = $13;
  $88 = ((($87)) + 4|0);
  $89 = ((($88)) + 3|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = (($86) + ($91))|0;
  $15 = $92;
  $93 = $13;
  $94 = ((($93)) + 8|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $96 << 24;
  $98 = $13;
  $99 = ((($98)) + 8|0);
  $100 = ((($99)) + 1|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = $102 << 16;
  $104 = (($97) + ($103))|0;
  $105 = $13;
  $106 = ((($105)) + 8|0);
  $107 = ((($106)) + 2|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = $109 << 8;
  $111 = (($104) + ($110))|0;
  $112 = $13;
  $113 = ((($112)) + 8|0);
  $114 = ((($113)) + 3|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = (($111) + ($116))|0;
  $16 = $117;
  $118 = $15;
  $119 = $118 & 3;
  $120 = ($119|0)!=(0);
  if ($120) {
   $121 = $6;
   $122 = $8;
   $123 = $14;
   (_png_icc_profile_error($121,0,$122,$123,13518)|0);
  }
  $124 = $15;
  $125 = $9;
  $126 = ($124>>>0)>($125>>>0);
  if ($126) {
   label = 7;
   break;
  }
  $127 = $16;
  $128 = $9;
  $129 = $15;
  $130 = (($128) - ($129))|0;
  $131 = ($127>>>0)>($130>>>0);
  if ($131) {
   label = 7;
   break;
  }
  $137 = $12;
  $138 = (($137) + 1)|0;
  $12 = $138;
  $139 = $13;
  $140 = ((($139)) + 12|0);
  $13 = $140;
 }
 if ((label|0) == 7) {
  $132 = $6;
  $133 = $7;
  $134 = $8;
  $135 = $14;
  $136 = (_png_icc_profile_error($132,$133,$134,$135,13560)|0);
  $5 = $136;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 9) {
  $5 = 1;
  $141 = $5;
  STACKTOP = sp;return ($141|0);
 }
 return (0)|0;
}
function _png_icc_set_sRGB($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $6;
 $10 = $7;
 $11 = (_png_compare_ICC_profile_with_sRGB($8,$9,$10)|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 64|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 24;
 $20 = $6;
 $21 = ((($20)) + 64|0);
 $22 = ((($21)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 16;
 $26 = (($19) + ($25))|0;
 $27 = $6;
 $28 = ((($27)) + 64|0);
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 << 8;
 $33 = (($26) + ($32))|0;
 $34 = $6;
 $35 = ((($34)) + 64|0);
 $36 = ((($35)) + 3|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = (($33) + ($38))|0;
 (_png_colorspace_set_sRGB($13,$14,$39)|0);
 STACKTOP = sp;return;
}
function _png_compare_ICC_profile_with_sRGB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 65536;
 $9 = 0;
 $11 = $4;
 $12 = ((($11)) + 612|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 >> 4;
 $16 = $15 & 3;
 $17 = ($16|0)==(3);
 if ($17) {
  $3 = 0;
  $252 = $3;
  STACKTOP = sp;return ($252|0);
 }
 $10 = 0;
 while(1) {
  $18 = $10;
  $19 = ($18>>>0)<(7);
  if (!($19)) {
   break;
  }
  $20 = $5;
  $21 = ((($20)) + 84|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 << 24;
  $25 = $5;
  $26 = ((($25)) + 84|0);
  $27 = ((($26)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 << 16;
  $31 = (($24) + ($30))|0;
  $32 = $5;
  $33 = ((($32)) + 84|0);
  $34 = ((($33)) + 2|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 << 8;
  $38 = (($31) + ($37))|0;
  $39 = $5;
  $40 = ((($39)) + 84|0);
  $41 = ((($40)) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($38) + ($43))|0;
  $45 = $10;
  $46 = (516 + ($45<<5)|0);
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($44|0)==($48|0);
  if ($49) {
   $50 = $5;
   $51 = ((($50)) + 88|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 << 24;
   $55 = $5;
   $56 = ((($55)) + 88|0);
   $57 = ((($56)) + 1|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $59 << 16;
   $61 = (($54) + ($60))|0;
   $62 = $5;
   $63 = ((($62)) + 88|0);
   $64 = ((($63)) + 2|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $66 << 8;
   $68 = (($61) + ($67))|0;
   $69 = $5;
   $70 = ((($69)) + 88|0);
   $71 = ((($70)) + 3|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = (($68) + ($73))|0;
   $75 = $10;
   $76 = (516 + ($75<<5)|0);
   $77 = ((($76)) + 12|0);
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($74|0)==($79|0);
   if ($80) {
    $81 = $5;
    $82 = ((($81)) + 92|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = $84 << 24;
    $86 = $5;
    $87 = ((($86)) + 92|0);
    $88 = ((($87)) + 1|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = $90 << 16;
    $92 = (($85) + ($91))|0;
    $93 = $5;
    $94 = ((($93)) + 92|0);
    $95 = ((($94)) + 2|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 << 8;
    $99 = (($92) + ($98))|0;
    $100 = $5;
    $101 = ((($100)) + 92|0);
    $102 = ((($101)) + 3|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = (($99) + ($104))|0;
    $106 = $10;
    $107 = (516 + ($106<<5)|0);
    $108 = ((($107)) + 12|0);
    $109 = ((($108)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($105|0)==($110|0);
    if ($111) {
     $112 = $5;
     $113 = ((($112)) + 96|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = $115 << 24;
     $117 = $5;
     $118 = ((($117)) + 96|0);
     $119 = ((($118)) + 1|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = $121 << 16;
     $123 = (($116) + ($122))|0;
     $124 = $5;
     $125 = ((($124)) + 96|0);
     $126 = ((($125)) + 2|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127&255;
     $129 = $128 << 8;
     $130 = (($123) + ($129))|0;
     $131 = $5;
     $132 = ((($131)) + 96|0);
     $133 = ((($132)) + 3|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = $134&255;
     $136 = (($130) + ($135))|0;
     $137 = $10;
     $138 = (516 + ($137<<5)|0);
     $139 = ((($138)) + 12|0);
     $140 = ((($139)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($136|0)==($141|0);
     if ($142) {
      $143 = $7;
      $144 = ($143|0)==(0);
      if ($144) {
       $145 = $5;
       $146 = HEAP8[$145>>0]|0;
       $147 = $146&255;
       $148 = $147 << 24;
       $149 = $5;
       $150 = ((($149)) + 1|0);
       $151 = HEAP8[$150>>0]|0;
       $152 = $151&255;
       $153 = $152 << 16;
       $154 = (($148) + ($153))|0;
       $155 = $5;
       $156 = ((($155)) + 2|0);
       $157 = HEAP8[$156>>0]|0;
       $158 = $157&255;
       $159 = $158 << 8;
       $160 = (($154) + ($159))|0;
       $161 = $5;
       $162 = ((($161)) + 3|0);
       $163 = HEAP8[$162>>0]|0;
       $164 = $163&255;
       $165 = (($160) + ($164))|0;
       $7 = $165;
       $166 = $5;
       $167 = ((($166)) + 64|0);
       $168 = HEAP8[$167>>0]|0;
       $169 = $168&255;
       $170 = $169 << 24;
       $171 = $5;
       $172 = ((($171)) + 64|0);
       $173 = ((($172)) + 1|0);
       $174 = HEAP8[$173>>0]|0;
       $175 = $174&255;
       $176 = $175 << 16;
       $177 = (($170) + ($176))|0;
       $178 = $5;
       $179 = ((($178)) + 64|0);
       $180 = ((($179)) + 2|0);
       $181 = HEAP8[$180>>0]|0;
       $182 = $181&255;
       $183 = $182 << 8;
       $184 = (($177) + ($183))|0;
       $185 = $5;
       $186 = ((($185)) + 64|0);
       $187 = ((($186)) + 3|0);
       $188 = HEAP8[$187>>0]|0;
       $189 = $188&255;
       $190 = (($184) + ($189))|0;
       $8 = $190;
      }
      $191 = $7;
      $192 = $10;
      $193 = (516 + ($192<<5)|0);
      $194 = ((($193)) + 8|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($191|0)==($195|0);
      if ($196) {
       $197 = $8;
       $198 = $10;
       $199 = (516 + ($198<<5)|0);
       $200 = ((($199)) + 30|0);
       $201 = HEAP16[$200>>1]|0;
       $202 = $201&65535;
       $203 = ($197|0)==($202|0);
       if ($203) {
        label = 13;
        break;
       }
      }
     }
    }
   }
  }
  $250 = $10;
  $251 = (($250) + 1)|0;
  $10 = $251;
 }
 if ((label|0) == 13) {
  $204 = $6;
  $205 = ($204|0)==(0);
  if ($205) {
   $206 = (_adler32(0,0,0)|0);
   $6 = $206;
   $207 = $6;
   $208 = $5;
   $209 = $7;
   $210 = (_adler32($207,$208,$209)|0);
   $6 = $210;
  }
  $211 = $6;
  $212 = $10;
  $213 = (516 + ($212<<5)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ($211|0)==($214|0);
  if ($215) {
   $216 = $9;
   $217 = ($216|0)==(0);
   if ($217) {
    $218 = (_crc32(0,0,0)|0);
    $9 = $218;
    $219 = $9;
    $220 = $5;
    $221 = $7;
    $222 = (_crc32($219,$220,$221)|0);
    $9 = $222;
   }
   $223 = $9;
   $224 = $10;
   $225 = (516 + ($224<<5)|0);
   $226 = ((($225)) + 4|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ($223|0)==($227|0);
   if ($228) {
    $229 = $10;
    $230 = (516 + ($229<<5)|0);
    $231 = ((($230)) + 29|0);
    $232 = HEAP8[$231>>0]|0;
    $233 = $232&255;
    $234 = ($233|0)!=(0);
    if ($234) {
     $235 = $4;
     _png_chunk_report($235,13592,2);
    } else {
     $236 = $10;
     $237 = (516 + ($236<<5)|0);
     $238 = ((($237)) + 28|0);
     $239 = HEAP8[$238>>0]|0;
     $240 = $239&255;
     $241 = ($240|0)==(0);
     if ($241) {
      $242 = $4;
      _png_chunk_report($242,13621,0);
     }
    }
    $243 = $10;
    $244 = (516 + ($243<<5)|0);
    $245 = ((($244)) + 29|0);
    $246 = HEAP8[$245>>0]|0;
    $247 = $246&255;
    $248 = (1 + ($247))|0;
    $3 = $248;
    $252 = $3;
    STACKTOP = sp;return ($252|0);
   }
  }
  $249 = $4;
  _png_chunk_report($249,13664,0);
 }
 $3 = 0;
 $252 = $3;
 STACKTOP = sp;return ($252|0);
}
function _png_colorspace_set_rgb_coefficients($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $1 = $0;
 $7 = $1;
 $8 = ((($7)) + 669|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = ((($12)) + 792|0);
 $14 = ((($13)) + 74|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 & 2;
 $18 = ($17|0)!=(0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $1;
 $20 = ((($19)) + 792|0);
 $21 = ((($20)) + 36|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$2>>2] = $23;
 $24 = $1;
 $25 = ((($24)) + 792|0);
 $26 = ((($25)) + 36|0);
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$3>>2] = $28;
 $29 = $1;
 $30 = ((($29)) + 792|0);
 $31 = ((($30)) + 36|0);
 $32 = ((($31)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$4>>2] = $33;
 $34 = HEAP32[$2>>2]|0;
 $35 = HEAP32[$3>>2]|0;
 $36 = (($34) + ($35))|0;
 $37 = HEAP32[$4>>2]|0;
 $38 = (($36) + ($37))|0;
 $5 = $38;
 $39 = $5;
 $40 = ($39|0)>(0);
 $41 = HEAP32[$2>>2]|0;
 $42 = ($41|0)>=(0);
 $or$cond = $40 & $42;
 if (!($or$cond)) {
  $127 = $1;
  _png_error($127,13762);
  // unreachable;
 }
 $43 = HEAP32[$2>>2]|0;
 $44 = $5;
 $45 = (_png_muldiv($2,$43,32768,$44)|0);
 $46 = ($45|0)!=(0);
 $47 = HEAP32[$2>>2]|0;
 $48 = ($47|0)>=(0);
 $or$cond3 = $46 & $48;
 $49 = HEAP32[$2>>2]|0;
 $50 = ($49|0)<=(32768);
 $or$cond5 = $or$cond3 & $50;
 $51 = HEAP32[$3>>2]|0;
 $52 = ($51|0)>=(0);
 $or$cond7 = $or$cond5 & $52;
 if (!($or$cond7)) {
  $127 = $1;
  _png_error($127,13762);
  // unreachable;
 }
 $53 = HEAP32[$3>>2]|0;
 $54 = $5;
 $55 = (_png_muldiv($3,$53,32768,$54)|0);
 $56 = ($55|0)!=(0);
 $57 = HEAP32[$3>>2]|0;
 $58 = ($57|0)>=(0);
 $or$cond9 = $56 & $58;
 $59 = HEAP32[$3>>2]|0;
 $60 = ($59|0)<=(32768);
 $or$cond11 = $or$cond9 & $60;
 $61 = HEAP32[$4>>2]|0;
 $62 = ($61|0)>=(0);
 $or$cond13 = $or$cond11 & $62;
 if (!($or$cond13)) {
  $127 = $1;
  _png_error($127,13762);
  // unreachable;
 }
 $63 = HEAP32[$4>>2]|0;
 $64 = $5;
 $65 = (_png_muldiv($4,$63,32768,$64)|0);
 $66 = ($65|0)!=(0);
 $67 = HEAP32[$4>>2]|0;
 $68 = ($67|0)>=(0);
 $or$cond15 = $66 & $68;
 $69 = HEAP32[$4>>2]|0;
 $70 = ($69|0)<=(32768);
 $or$cond17 = $or$cond15 & $70;
 if (!($or$cond17)) {
  $127 = $1;
  _png_error($127,13762);
  // unreachable;
 }
 $71 = HEAP32[$2>>2]|0;
 $72 = HEAP32[$3>>2]|0;
 $73 = (($71) + ($72))|0;
 $74 = HEAP32[$4>>2]|0;
 $75 = (($73) + ($74))|0;
 $76 = ($75|0)<=(32769);
 if (!($76)) {
  $127 = $1;
  _png_error($127,13762);
  // unreachable;
 }
 $6 = 0;
 $77 = HEAP32[$2>>2]|0;
 $78 = HEAP32[$3>>2]|0;
 $79 = (($77) + ($78))|0;
 $80 = HEAP32[$4>>2]|0;
 $81 = (($79) + ($80))|0;
 $82 = ($81|0)>(32768);
 if ($82) {
  $6 = -1;
 } else {
  $83 = HEAP32[$2>>2]|0;
  $84 = HEAP32[$3>>2]|0;
  $85 = (($83) + ($84))|0;
  $86 = HEAP32[$4>>2]|0;
  $87 = (($85) + ($86))|0;
  $88 = ($87|0)<(32768);
  if ($88) {
   $6 = 1;
  }
 }
 $89 = $6;
 $90 = ($89|0)!=(0);
 do {
  if ($90) {
   $91 = HEAP32[$3>>2]|0;
   $92 = HEAP32[$2>>2]|0;
   $93 = ($91|0)>=($92|0);
   if ($93) {
    $94 = HEAP32[$3>>2]|0;
    $95 = HEAP32[$4>>2]|0;
    $96 = ($94|0)>=($95|0);
    if ($96) {
     $97 = $6;
     $98 = HEAP32[$3>>2]|0;
     $99 = (($98) + ($97))|0;
     HEAP32[$3>>2] = $99;
     break;
    }
   }
   $100 = HEAP32[$2>>2]|0;
   $101 = HEAP32[$3>>2]|0;
   $102 = ($100|0)>=($101|0);
   if ($102) {
    $103 = HEAP32[$2>>2]|0;
    $104 = HEAP32[$4>>2]|0;
    $105 = ($103|0)>=($104|0);
    if ($105) {
     $106 = $6;
     $107 = HEAP32[$2>>2]|0;
     $108 = (($107) + ($106))|0;
     HEAP32[$2>>2] = $108;
     break;
    }
   }
   $109 = $6;
   $110 = HEAP32[$4>>2]|0;
   $111 = (($110) + ($109))|0;
   HEAP32[$4>>2] = $111;
  }
 } while(0);
 $112 = HEAP32[$2>>2]|0;
 $113 = HEAP32[$3>>2]|0;
 $114 = (($112) + ($113))|0;
 $115 = HEAP32[$4>>2]|0;
 $116 = (($114) + ($115))|0;
 $117 = ($116|0)!=(32768);
 if ($117) {
  $118 = $1;
  _png_error($118,13720);
  // unreachable;
 }
 $119 = HEAP32[$2>>2]|0;
 $120 = $119&65535;
 $121 = $1;
 $122 = ((($121)) + 670|0);
 HEAP16[$122>>1] = $120;
 $123 = HEAP32[$3>>2]|0;
 $124 = $123&65535;
 $125 = $1;
 $126 = ((($125)) + 672|0);
 HEAP16[$126>>1] = $124;
 STACKTOP = sp;return;
}
function _png_check_IHDR($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = 0;
 $17 = $9;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = $8;
  _png_warning($19,13796);
  $16 = 1;
 }
 $20 = $9;
 $21 = ($20>>>0)>(2147483647);
 if ($21) {
  $22 = $8;
  _png_warning($22,13824);
  $16 = 1;
 }
 $23 = $9;
 $24 = (($23) + 7)|0;
 $25 = $24 & -8;
 $26 = (_png_gt($25,536870904)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $8;
  _png_warning($28,13852);
  $16 = 1;
 }
 $29 = $9;
 $30 = $8;
 $31 = ((($30)) + 716|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($29>>>0)>($32>>>0);
 if ($33) {
  $34 = $8;
  _png_warning($34,13899);
  $16 = 1;
 }
 $35 = $10;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $8;
  _png_warning($37,13938);
  $16 = 1;
 }
 $38 = $10;
 $39 = ($38>>>0)>(2147483647);
 if ($39) {
  $40 = $8;
  _png_warning($40,13967);
  $16 = 1;
 }
 $41 = $10;
 $42 = $8;
 $43 = ((($42)) + 720|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41>>>0)>($44>>>0);
 if ($45) {
  $46 = $8;
  _png_warning($46,13996);
  $16 = 1;
 }
 $47 = $11;
 $48 = ($47|0)!=(1);
 $49 = $11;
 $50 = ($49|0)!=(2);
 $or$cond = $48 & $50;
 $51 = $11;
 $52 = ($51|0)!=(4);
 $or$cond3 = $or$cond & $52;
 $53 = $11;
 $54 = ($53|0)!=(8);
 $or$cond5 = $or$cond3 & $54;
 $55 = $11;
 $56 = ($55|0)!=(16);
 $or$cond7 = $or$cond5 & $56;
 if ($or$cond7) {
  $57 = $8;
  _png_warning($57,14036);
  $16 = 1;
 }
 $58 = $12;
 $59 = ($58|0)<(0);
 $60 = $12;
 $61 = ($60|0)==(1);
 $or$cond9 = $59 | $61;
 $62 = $12;
 $63 = ($62|0)==(5);
 $or$cond11 = $or$cond9 | $63;
 $64 = $12;
 $65 = ($64|0)>(6);
 $or$cond13 = $or$cond11 | $65;
 if ($or$cond13) {
  $66 = $8;
  _png_warning($66,14062);
  $16 = 1;
 }
 $67 = $12;
 $68 = ($67|0)==(3);
 $69 = $11;
 $70 = ($69|0)>(8);
 $or$cond15 = $68 & $70;
 if ($or$cond15) {
  label = 21;
 } else {
  $71 = $12;
  $72 = ($71|0)==(2);
  $73 = $12;
  $74 = ($73|0)==(4);
  $or$cond17 = $72 | $74;
  $75 = $12;
  $76 = ($75|0)==(6);
  $or$cond19 = $or$cond17 | $76;
  $77 = $11;
  $78 = ($77|0)<(8);
  $or$cond21 = $or$cond19 & $78;
  if ($or$cond21) {
   label = 21;
  }
 }
 if ((label|0) == 21) {
  $79 = $8;
  _png_warning($79,14089);
  $16 = 1;
 }
 $80 = $13;
 $81 = ($80|0)>=(2);
 if ($81) {
  $82 = $8;
  _png_warning($82,14138);
  $16 = 1;
 }
 $83 = $14;
 $84 = ($83|0)!=(0);
 if ($84) {
  $85 = $8;
  _png_warning($85,14171);
  $16 = 1;
 }
 $86 = $8;
 $87 = ((($86)) + 208|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 & 4096;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $8;
  $92 = ((($91)) + 676|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)!=(0);
  if ($94) {
   $95 = $8;
   _png_warning($95,14206);
  }
 }
 $96 = $15;
 $97 = ($96|0)!=(0);
 if ($97) {
  $98 = $8;
  $99 = ((($98)) + 676|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $100 & 4;
  $102 = ($101|0)!=(0);
  $103 = $15;
  $104 = ($103|0)==(64);
  $or$cond23 = $102 & $104;
  if ($or$cond23) {
   $105 = $8;
   $106 = ((($105)) + 208|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $107 & 4096;
   $109 = ($108|0)==(0);
   if ($109) {
    $110 = $12;
    $111 = ($110|0)==(2);
    $112 = $12;
    $113 = ($112|0)==(6);
    $or$cond25 = $111 | $113;
    if (!($or$cond25)) {
     label = 33;
    }
   } else {
    label = 33;
   }
  } else {
   label = 33;
  }
  if ((label|0) == 33) {
   $114 = $8;
   _png_warning($114,14255);
   $16 = 1;
  }
  $115 = $8;
  $116 = ((($115)) + 208|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $117 & 4096;
  $119 = ($118|0)!=(0);
  if ($119) {
   $120 = $8;
   _png_warning($120,14285);
   $16 = 1;
  }
 }
 $121 = $16;
 $122 = ($121|0)==(1);
 if ($122) {
  $123 = $8;
  _png_error($123,14315);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _png_gt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4>>>0)>($5>>>0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _png_check_fp_number($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $6;
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $13 = $7;
 $14 = HEAP32[$13>>2]|0;
 $9 = $14;
 L1: while(1) {
  $15 = $9;
  $16 = $5;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $4;
  $19 = $9;
  $20 = (($18) + ($19)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  switch ($22|0) {
  case 43:  {
   $10 = 4;
   break;
  }
  case 45:  {
   $10 = 132;
   break;
  }
  case 46:  {
   $10 = 16;
   break;
  }
  case 48:  {
   $10 = 8;
   break;
  }
  case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
   $10 = 264;
   break;
  }
  case 101: case 69:  {
   $10 = 32;
   break;
  }
  default: {
   break L1;
  }
  }
  $23 = $8;
  $24 = $23 & 3;
  $25 = $10;
  $26 = $25 & 60;
  $27 = (($24) + ($26))|0;
  L12: do {
   switch ($27|0) {
   case 4:  {
    $28 = $8;
    $29 = $28 & 60;
    $30 = ($29|0)!=(0);
    if ($30) {
     break L1;
    }
    $31 = $10;
    $32 = $8;
    $33 = $32 | $31;
    $8 = $33;
    break;
   }
   case 16:  {
    $34 = $8;
    $35 = $34 & 16;
    $36 = ($35|0)!=(0);
    if ($36) {
     break L1;
    }
    $37 = $8;
    $38 = $37 & 8;
    $39 = ($38|0)!=(0);
    $40 = $10;
    if ($39) {
     $41 = $8;
     $42 = $41 | $40;
     $8 = $42;
     break L12;
    } else {
     $43 = 1 | $40;
     $44 = $8;
     $45 = $44 & 448;
     $46 = $43 | $45;
     $8 = $46;
     break L12;
    }
    break;
   }
   case 8:  {
    $47 = $8;
    $48 = $47 & 16;
    $49 = ($48|0)!=(0);
    if ($49) {
     $50 = $8;
     $51 = $50 & 448;
     $52 = 17 | $51;
     $8 = $52;
    }
    $53 = $10;
    $54 = $53 | 64;
    $55 = $8;
    $56 = $55 | $54;
    $8 = $56;
    break;
   }
   case 32:  {
    $57 = $8;
    $58 = $57 & 8;
    $59 = ($58|0)==(0);
    if ($59) {
     break L1;
    }
    $60 = $8;
    $61 = $60 & 448;
    $62 = 2 | $61;
    $8 = $62;
    break;
   }
   case 9:  {
    $63 = $10;
    $64 = $63 | 64;
    $65 = $8;
    $66 = $65 | $64;
    $8 = $66;
    break;
   }
   case 33:  {
    $67 = $8;
    $68 = $67 & 8;
    $69 = ($68|0)==(0);
    if ($69) {
     break L1;
    }
    $70 = $8;
    $71 = $70 & 448;
    $72 = 2 | $71;
    $8 = $72;
    break;
   }
   case 6:  {
    $73 = $8;
    $74 = $73 & 60;
    $75 = ($74|0)!=(0);
    if ($75) {
     break L1;
    }
    $76 = $8;
    $77 = $76 | 4;
    $8 = $77;
    break;
   }
   case 10:  {
    $78 = $8;
    $79 = $78 | 72;
    $8 = $79;
    break;
   }
   default: {
    break L1;
   }
   }
  } while(0);
  $80 = $9;
  $81 = (($80) + 1)|0;
  $9 = $81;
 }
 $82 = $8;
 $83 = $6;
 HEAP32[$83>>2] = $82;
 $84 = $9;
 $85 = $7;
 HEAP32[$85>>2] = $84;
 $86 = $8;
 $87 = $86 & 8;
 $88 = ($87|0)!=(0);
 $89 = $88&1;
 STACKTOP = sp;return ($89|0);
}
function _png_check_fp_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 HEAP32[$5>>2] = 0;
 HEAP32[$6>>2] = 0;
 $7 = $3;
 $8 = $4;
 $9 = (_png_check_fp_number($7,$8,$5,$6)|0);
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = HEAP32[$6>>2]|0;
   $12 = $4;
   $13 = ($11|0)==($12|0);
   if (!($13)) {
    $14 = $3;
    $15 = HEAP32[$6>>2]|0;
    $16 = (($14) + ($15)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)==(0);
    if (!($19)) {
     break;
    }
   }
   $20 = HEAP32[$5>>2]|0;
   $2 = $20;
   $21 = $2;
   STACKTOP = sp;return ($21|0);
  }
 } while(0);
 $2 = 0;
 $21 = $2;
 STACKTOP = sp;return ($21|0);
}
function _png_reciprocal2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0);
 $8 = $4;
 $9 = ($8|0)!=(0);
 $or$cond = $7 & $9;
 if ($or$cond) {
  $10 = $3;
  $11 = (+($10|0));
  $12 = 1.0E+15 / $11;
  $5 = $12;
  $13 = $4;
  $14 = (+($13|0));
  $15 = $5;
  $16 = $15 / $14;
  $5 = $16;
  $17 = $5;
  $18 = $17 + 0.5;
  $19 = (+Math_floor((+$18)));
  $5 = $19;
  $20 = $5;
  $21 = $20 <= 2147483647.0;
  $22 = $5;
  $23 = $22 >= -2147483648.0;
  $or$cond3 = $21 & $23;
  if ($or$cond3) {
   $24 = $5;
   $25 = (~~(($24)));
   $2 = $25;
   $26 = $2;
   STACKTOP = sp;return ($26|0);
  }
 }
 $2 = 0;
 $26 = $2;
 STACKTOP = sp;return ($26|0);
}
function _png_gamma_8bit_correct($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6>>>0)>(0);
 $8 = $3;
 $9 = ($8>>>0)<(255);
 $or$cond = $7 & $9;
 $10 = $3;
 if ($or$cond) {
  $11 = (+($10|0));
  $12 = $11 / 255.0;
  $13 = $4;
  $14 = (+($13|0));
  $15 = $14 * 1.0000000000000001E-5;
  $16 = (+Math_pow((+$12),(+$15)));
  $17 = 255.0 * $16;
  $18 = $17 + 0.5;
  $19 = (+Math_floor((+$18)));
  $5 = $19;
  $20 = $5;
  $21 = (~~(($20))&255);
  $2 = $21;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 } else {
  $22 = $10 & 255;
  $23 = $22&255;
  $2 = $23;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _png_gamma_16bit_correct($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6>>>0)>(0);
 $8 = $3;
 $9 = ($8>>>0)<(65535);
 $or$cond = $7 & $9;
 $10 = $3;
 if ($or$cond) {
  $11 = (+($10|0));
  $12 = $11 / 65535.0;
  $13 = $4;
  $14 = (+($13|0));
  $15 = $14 * 1.0000000000000001E-5;
  $16 = (+Math_pow((+$12),(+$15)));
  $17 = 65535.0 * $16;
  $18 = $17 + 0.5;
  $19 = (+Math_floor((+$18)));
  $5 = $19;
  $20 = $5;
  $21 = (~~(($20))&65535);
  $2 = $21;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 } else {
  $22 = $10&65535;
  $2 = $22;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _png_gamma_correct($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ((($7)) + 428|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(8);
 $12 = $5;
 $13 = $6;
 if ($11) {
  $14 = (_png_gamma_8bit_correct($12,$13)|0);
  $15 = $14&255;
  $3 = $15;
  $17 = $3;
  STACKTOP = sp;return ($17|0);
 } else {
  $16 = (_png_gamma_16bit_correct($12,$13)|0);
  $3 = $16;
  $17 = $3;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _png_destroy_gamma_table($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $8 = $1;
 $9 = $1;
 $10 = ((($9)) + 484|0);
 $11 = HEAP32[$10>>2]|0;
 _png_free($8,$11);
 $12 = $1;
 $13 = ((($12)) + 484|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 488|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 476|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (8 - ($20))|0;
  $22 = 1 << $21;
  $3 = $22;
  $2 = 0;
  while(1) {
   $23 = $2;
   $24 = $3;
   $25 = ($23|0)<($24|0);
   $26 = $1;
   $27 = $1;
   $28 = ((($27)) + 488|0);
   $29 = HEAP32[$28>>2]|0;
   if (!($25)) {
    break;
   }
   $30 = $2;
   $31 = (($29) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   _png_free($26,$32);
   $33 = $2;
   $34 = (($33) + 1)|0;
   $2 = $34;
  }
  _png_free($26,$29);
  $35 = $1;
  $36 = ((($35)) + 488|0);
  HEAP32[$36>>2] = 0;
 }
 $37 = $1;
 $38 = $1;
 $39 = ((($38)) + 492|0);
 $40 = HEAP32[$39>>2]|0;
 _png_free($37,$40);
 $41 = $1;
 $42 = ((($41)) + 492|0);
 HEAP32[$42>>2] = 0;
 $43 = $1;
 $44 = $1;
 $45 = ((($44)) + 496|0);
 $46 = HEAP32[$45>>2]|0;
 _png_free($43,$46);
 $47 = $1;
 $48 = ((($47)) + 496|0);
 HEAP32[$48>>2] = 0;
 $49 = $1;
 $50 = ((($49)) + 500|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(0|0);
 if ($52) {
  $53 = $1;
  $54 = ((($53)) + 476|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (8 - ($55))|0;
  $57 = 1 << $56;
  $5 = $57;
  $4 = 0;
  while(1) {
   $58 = $4;
   $59 = $5;
   $60 = ($58|0)<($59|0);
   $61 = $1;
   $62 = $1;
   $63 = ((($62)) + 500|0);
   $64 = HEAP32[$63>>2]|0;
   if (!($60)) {
    break;
   }
   $65 = $4;
   $66 = (($64) + ($65<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   _png_free($61,$67);
   $68 = $4;
   $69 = (($68) + 1)|0;
   $4 = $69;
  }
  _png_free($61,$64);
  $70 = $1;
  $71 = ((($70)) + 500|0);
  HEAP32[$71>>2] = 0;
 }
 $72 = $1;
 $73 = ((($72)) + 504|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0|0);
 if (!($75)) {
  STACKTOP = sp;return;
 }
 $76 = $1;
 $77 = ((($76)) + 476|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (8 - ($78))|0;
 $80 = 1 << $79;
 $7 = $80;
 $6 = 0;
 while(1) {
  $81 = $6;
  $82 = $7;
  $83 = ($81|0)<($82|0);
  $84 = $1;
  $85 = $1;
  $86 = ((($85)) + 504|0);
  $87 = HEAP32[$86>>2]|0;
  if (!($83)) {
   break;
  }
  $88 = $6;
  $89 = (($87) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  _png_free($84,$90);
  $91 = $6;
  $92 = (($91) + 1)|0;
  $6 = $92;
 }
 _png_free($84,$87);
 $93 = $1;
 $94 = ((($93)) + 504|0);
 HEAP32[$94>>2] = 0;
 STACKTOP = sp;return;
}
function _png_build_gamma_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 484|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  label = 3;
 } else {
  $10 = $2;
  $11 = ((($10)) + 488|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $14 = $2;
  _png_warning($14,14333);
  $15 = $2;
  _png_destroy_gamma_table($15);
 }
 $16 = $3;
 $17 = ($16|0)<=(8);
 $18 = $2;
 if ($17) {
  $19 = $2;
  $20 = ((($19)) + 484|0);
  $21 = $2;
  $22 = ((($21)) + 480|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)>(0);
  if ($24) {
   $25 = $2;
   $26 = ((($25)) + 792|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $2;
   $29 = ((($28)) + 480|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_png_reciprocal2($27,$30)|0);
   $32 = $31;
  } else {
   $32 = 100000;
  }
  _png_build_8bit_table($18,$20,$32);
  $33 = $2;
  $34 = ((($33)) + 216|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 6291584;
  $37 = ($36|0)!=(0);
  if (!($37)) {
   STACKTOP = sp;return;
  }
  $38 = $2;
  $39 = $2;
  $40 = ((($39)) + 496|0);
  $41 = $2;
  $42 = ((($41)) + 792|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (_png_reciprocal($43)|0);
  _png_build_8bit_table($38,$40,$44);
  $45 = $2;
  $46 = $2;
  $47 = ((($46)) + 492|0);
  $48 = $2;
  $49 = ((($48)) + 480|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)>(0);
  $52 = $2;
  if ($51) {
   $53 = ((($52)) + 480|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (_png_reciprocal($54)|0);
   $58 = $55;
  } else {
   $56 = ((($52)) + 792|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57;
  }
  _png_build_8bit_table($45,$47,$58);
  STACKTOP = sp;return;
 }
 $59 = ((($18)) + 427|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $61 & 2;
 $63 = ($62|0)!=(0);
 $64 = $2;
 $65 = ((($64)) + 508|0);
 if ($63) {
  $66 = HEAP8[$65>>0]|0;
  $5 = $66;
  $67 = $2;
  $68 = ((($67)) + 508|0);
  $69 = ((($68)) + 1|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $5;
  $73 = $72&255;
  $74 = ($71|0)>($73|0);
  if ($74) {
   $75 = $2;
   $76 = ((($75)) + 508|0);
   $77 = ((($76)) + 1|0);
   $78 = HEAP8[$77>>0]|0;
   $5 = $78;
  }
  $79 = $2;
  $80 = ((($79)) + 508|0);
  $81 = ((($80)) + 2|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $5;
  $85 = $84&255;
  $86 = ($83|0)>($85|0);
  if ($86) {
   $87 = $2;
   $88 = ((($87)) + 508|0);
   $89 = ((($88)) + 2|0);
   $90 = HEAP8[$89>>0]|0;
   $5 = $90;
  }
 } else {
  $91 = ((($65)) + 3|0);
  $92 = HEAP8[$91>>0]|0;
  $5 = $92;
 }
 $93 = $5;
 $94 = $93&255;
 $95 = ($94|0)>(0);
 if ($95) {
  $96 = $5;
  $97 = $96&255;
  $98 = ($97>>>0)<(16);
  if ($98) {
   $99 = $5;
   $100 = $99&255;
   $101 = (16 - ($100))|0;
   $102 = $101 & 255;
   $103 = $102&255;
   $4 = $103;
  } else {
   label = 21;
  }
 } else {
  label = 21;
 }
 if ((label|0) == 21) {
  $4 = 0;
 }
 $104 = $2;
 $105 = ((($104)) + 216|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $106 & 67109888;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = $4;
  $110 = $109&255;
  $111 = ($110>>>0)<(5);
  if ($111) {
   $4 = 5;
  }
 }
 $112 = $4;
 $113 = $112&255;
 $114 = ($113>>>0)>(8);
 if ($114) {
  $4 = 8;
 }
 $115 = $4;
 $116 = $115&255;
 $117 = $2;
 $118 = ((($117)) + 476|0);
 HEAP32[$118>>2] = $116;
 $119 = $2;
 $120 = ((($119)) + 216|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $121 & 67109888;
 $123 = ($122|0)!=(0);
 $124 = $2;
 $125 = $2;
 $126 = ((($125)) + 488|0);
 $127 = $4;
 $128 = $127&255;
 $129 = $2;
 $130 = ((($129)) + 480|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)>(0);
 if ($123) {
  if ($132) {
   $133 = $2;
   $134 = ((($133)) + 792|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $2;
   $137 = ((($136)) + 480|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (_png_product2($135,$138)|0);
   $140 = $139;
  } else {
   $140 = 100000;
  }
  _png_build_16to8_table($124,$126,$128,$140);
 } else {
  if ($132) {
   $141 = $2;
   $142 = ((($141)) + 792|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $2;
   $145 = ((($144)) + 480|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (_png_reciprocal2($143,$146)|0);
   $148 = $147;
  } else {
   $148 = 100000;
  }
  _png_build_16bit_table($124,$126,$128,$148);
 }
 $149 = $2;
 $150 = ((($149)) + 216|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 & 6291584;
 $153 = ($152|0)!=(0);
 if (!($153)) {
  STACKTOP = sp;return;
 }
 $154 = $2;
 $155 = $2;
 $156 = ((($155)) + 504|0);
 $157 = $4;
 $158 = $157&255;
 $159 = $2;
 $160 = ((($159)) + 792|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (_png_reciprocal($161)|0);
 _png_build_16bit_table($154,$156,$158,$162);
 $163 = $2;
 $164 = $2;
 $165 = ((($164)) + 500|0);
 $166 = $4;
 $167 = $166&255;
 $168 = $2;
 $169 = ((($168)) + 480|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170|0)>(0);
 $172 = $2;
 if ($171) {
  $173 = ((($172)) + 480|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (_png_reciprocal($174)|0);
  $178 = $175;
 } else {
  $176 = ((($172)) + 792|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $177;
 }
 _png_build_16bit_table($163,$165,$167,$178);
 STACKTOP = sp;return;
}
function _png_build_8bit_table($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = (_png_malloc($8,256)|0);
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $7 = $9;
 $11 = $5;
 $12 = (_png_gamma_significant($11)|0);
 $13 = ($12|0)!=(0);
 $6 = 0;
 if ($13) {
  while(1) {
   $14 = $6;
   $15 = ($14>>>0)<(256);
   if (!($15)) {
    break;
   }
   $16 = $6;
   $17 = $5;
   $18 = (_png_gamma_8bit_correct($16,$17)|0);
   $19 = $7;
   $20 = $6;
   $21 = (($19) + ($20)|0);
   HEAP8[$21>>0] = $18;
   $22 = $6;
   $23 = (($22) + 1)|0;
   $6 = $23;
  }
  STACKTOP = sp;return;
 } else {
  while(1) {
   $24 = $6;
   $25 = ($24>>>0)<(256);
   if (!($25)) {
    break;
   }
   $26 = $6;
   $27 = $26 & 255;
   $28 = $27&255;
   $29 = $7;
   $30 = $6;
   $31 = (($29) + ($30)|0);
   HEAP8[$31>>0] = $28;
   $32 = $6;
   $33 = (($32) + 1)|0;
   $6 = $33;
  }
  STACKTOP = sp;return;
 }
}
function _png_product2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (+($6|0));
 $8 = $7 * 1.0000000000000001E-5;
 $5 = $8;
 $9 = $4;
 $10 = (+($9|0));
 $11 = $5;
 $12 = $11 * $10;
 $5 = $12;
 $13 = $5;
 $14 = $13 + 0.5;
 $15 = (+Math_floor((+$14)));
 $5 = $15;
 $16 = $5;
 $17 = $16 <= 2147483647.0;
 $18 = $5;
 $19 = $18 >= -2147483648.0;
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = $5;
  $21 = (~~(($20)));
  $2 = $21;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 } else {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _png_build_16to8_table($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $15 = $6;
 $16 = (8 - ($15))|0;
 $17 = 1 << $16;
 $8 = $17;
 $18 = $6;
 $19 = (16 - ($18))|0;
 $20 = 1 << $19;
 $21 = (($20) - 1)|0;
 $9 = $21;
 $22 = $4;
 $23 = $8;
 $24 = $23<<2;
 $25 = (_png_calloc($22,$24)|0);
 $26 = $5;
 HEAP32[$26>>2] = $25;
 $12 = $25;
 $10 = 0;
 while(1) {
  $27 = $10;
  $28 = $8;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $30 = $4;
  $31 = (_png_malloc($30,512)|0);
  $32 = $12;
  $33 = $10;
  $34 = (($32) + ($33<<2)|0);
  HEAP32[$34>>2] = $31;
  $35 = $10;
  $36 = (($35) + 1)|0;
  $10 = $36;
 }
 $11 = 0;
 $10 = 0;
 while(1) {
  $37 = $10;
  $38 = ($37>>>0)<(255);
  if (!($38)) {
   break;
  }
  $39 = $10;
  $40 = ($39*257)|0;
  $41 = $40&65535;
  $13 = $41;
  $42 = $13;
  $43 = $42&65535;
  $44 = (($43) + 128)|0;
  $45 = $7;
  $46 = (_png_gamma_16bit_correct($44,$45)|0);
  $47 = $46&65535;
  $14 = $47;
  $48 = $14;
  $49 = $9;
  $50 = Math_imul($48, $49)|0;
  $51 = (($50) + 32768)|0;
  $52 = (($51>>>0) / 65535)&-1;
  $53 = (($52) + 1)|0;
  $14 = $53;
  while(1) {
   $54 = $11;
   $55 = $14;
   $56 = ($54>>>0)<($55>>>0);
   if (!($56)) {
    break;
   }
   $57 = $13;
   $58 = $12;
   $59 = $11;
   $60 = $6;
   $61 = 255 >>> $60;
   $62 = $59 & $61;
   $63 = (($58) + ($62<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $11;
   $66 = $6;
   $67 = (8 - ($66))|0;
   $68 = $65 >>> $67;
   $69 = (($64) + ($68<<1)|0);
   HEAP16[$69>>1] = $57;
   $70 = $11;
   $71 = (($70) + 1)|0;
   $11 = $71;
  }
  $72 = $10;
  $73 = (($72) + 1)|0;
  $10 = $73;
 }
 while(1) {
  $74 = $11;
  $75 = $8;
  $76 = $75 << 8;
  $77 = ($74>>>0)<($76>>>0);
  if (!($77)) {
   break;
  }
  $78 = $12;
  $79 = $11;
  $80 = $6;
  $81 = 255 >> $80;
  $82 = $79 & $81;
  $83 = (($78) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $11;
  $86 = $6;
  $87 = (8 - ($86))|0;
  $88 = $85 >>> $87;
  $89 = (($84) + ($88<<1)|0);
  HEAP16[$89>>1] = -1;
  $90 = $11;
  $91 = (($90) + 1)|0;
  $11 = $91;
 }
 STACKTOP = sp;return;
}
function _png_build_16bit_table($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $20 = $6;
 $21 = (8 - ($20))|0;
 $22 = 1 << $21;
 $8 = $22;
 $23 = $6;
 $24 = (16 - ($23))|0;
 $25 = 1 << $24;
 $26 = (($25) - 1)|0;
 $27 = (+($26|0));
 $28 = 1.0 / $27;
 $9 = $28;
 $29 = $6;
 $30 = (16 - ($29))|0;
 $31 = 1 << $30;
 $32 = (($31) - 1)|0;
 $10 = $32;
 $33 = $6;
 $34 = (15 - ($33))|0;
 $35 = 1 << $34;
 $11 = $35;
 $36 = $4;
 $37 = $8;
 $38 = $37<<2;
 $39 = (_png_calloc($36,$38)|0);
 $40 = $5;
 HEAP32[$40>>2] = $39;
 $13 = $39;
 $12 = 0;
 while(1) {
  $41 = $12;
  $42 = $8;
  $43 = ($41>>>0)<($42>>>0);
  if (!($43)) {
   break;
  }
  $44 = $4;
  $45 = (_png_malloc($44,512)|0);
  $46 = $13;
  $47 = $12;
  $48 = (($46) + ($47<<2)|0);
  HEAP32[$48>>2] = $45;
  $14 = $45;
  $49 = $7;
  $50 = (_png_gamma_significant($49)|0);
  $51 = ($50|0)!=(0);
  L4: do {
   if ($51) {
    $15 = 0;
    while(1) {
     $52 = $15;
     $53 = ($52>>>0)<(256);
     if (!($53)) {
      break L4;
     }
     $54 = $15;
     $55 = $6;
     $56 = (8 - ($55))|0;
     $57 = $54 << $56;
     $58 = $12;
     $59 = (($57) + ($58))|0;
     $16 = $59;
     $60 = $16;
     $61 = (+($60>>>0));
     $62 = $9;
     $63 = $61 * $62;
     $64 = $7;
     $65 = (+($64|0));
     $66 = $65 * 1.0000000000000001E-5;
     $67 = (+Math_pow((+$63),(+$66)));
     $68 = 65535.0 * $67;
     $69 = $68 + 0.5;
     $70 = (+Math_floor((+$69)));
     $17 = $70;
     $71 = $17;
     $72 = (~~(($71))&65535);
     $73 = $14;
     $74 = $15;
     $75 = (($73) + ($74<<1)|0);
     HEAP16[$75>>1] = $72;
     $76 = $15;
     $77 = (($76) + 1)|0;
     $15 = $77;
    }
   } else {
    $18 = 0;
    while(1) {
     $78 = $18;
     $79 = ($78>>>0)<(256);
     if (!($79)) {
      break L4;
     }
     $80 = $18;
     $81 = $6;
     $82 = (8 - ($81))|0;
     $83 = $80 << $82;
     $84 = $12;
     $85 = (($83) + ($84))|0;
     $19 = $85;
     $86 = $6;
     $87 = ($86|0)!=(0);
     if ($87) {
      $88 = $19;
      $89 = ($88*65535)|0;
      $90 = $11;
      $91 = (($89) + ($90))|0;
      $92 = $10;
      $93 = (($91>>>0) / ($92>>>0))&-1;
      $19 = $93;
     }
     $94 = $19;
     $95 = $94&65535;
     $96 = $14;
     $97 = $18;
     $98 = (($96) + ($97<<1)|0);
     HEAP16[$98>>1] = $95;
     $99 = $18;
     $100 = (($99) + 1)|0;
     $18 = $100;
    }
   }
  } while(0);
  $101 = $12;
  $102 = (($101) + 1)|0;
  $12 = $102;
 }
 STACKTOP = sp;return;
}
function _png_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $2;
  $7 = ((($6)) + 168|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $2;
   $11 = ((($10)) + 168|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $2;
   $14 = $3;
   FUNCTION_TABLE_vii[$12 & 127]($13,$14);
  }
 }
 $15 = $2;
 $16 = $3;
 _png_default_error($15,$16);
 // unreachable;
}
function _png_default_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[2294]|0;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 $7 = $3;
 $8 = $6 ? $7 : 14359;
 HEAP32[$vararg_buffer>>2] = $8;
 (_fprintf($4,14369,$vararg_buffer)|0);
 $9 = HEAP32[2294]|0;
 (_fprintf($9,14386,$vararg_buffer1)|0);
 $10 = $2;
 _png_longjmp($10,1);
 // unreachable;
}
function _png_longjmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  _abort();
  // unreachable;
 }
 $6 = $2;
 $7 = ((($6)) + 156|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  _abort();
  // unreachable;
 }
 $10 = $2;
 $11 = ((($10)) + 160|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  _abort();
  // unreachable;
 }
 $14 = $2;
 $15 = ((($14)) + 156|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 160|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 FUNCTION_TABLE_vii[$16 & 127]($19,$20);
 _abort();
 // unreachable;
}
function _png_safecat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $33 = $6;
  STACKTOP = sp;return ($33|0);
 }
 $10 = $6;
 $11 = $5;
 $12 = ($10>>>0)<($11>>>0);
 if (!($12)) {
  $33 = $6;
  STACKTOP = sp;return ($33|0);
 }
 $13 = $7;
 $14 = ($13|0)!=(0|0);
 L7: do {
  if ($14) {
   while(1) {
    $15 = $7;
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ($17|0)!=(0);
    if (!($18)) {
     break L7;
    }
    $19 = $6;
    $20 = $5;
    $21 = (($20) - 1)|0;
    $22 = ($19>>>0)<($21>>>0);
    if (!($22)) {
     break L7;
    }
    $23 = $7;
    $24 = ((($23)) + 1|0);
    $7 = $24;
    $25 = HEAP8[$23>>0]|0;
    $26 = $4;
    $27 = $6;
    $28 = (($27) + 1)|0;
    $6 = $28;
    $29 = (($26) + ($27)|0);
    HEAP8[$29>>0] = $25;
   }
  }
 } while(0);
 $30 = $4;
 $31 = $6;
 $32 = (($30) + ($31)|0);
 HEAP8[$32>>0] = 0;
 $33 = $6;
 STACKTOP = sp;return ($33|0);
}
function _png_format_number($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $9 = 1;
 $10 = 0;
 $11 = $5;
 $12 = ((($11)) + -1|0);
 $5 = $12;
 HEAP8[$12>>0] = 0;
 while(1) {
  $13 = $5;
  $14 = $4;
  $15 = ($13>>>0)>($14>>>0);
  if (!($15)) {
   label = 21;
   break;
  }
  $16 = $7;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   $18 = $8;
   $19 = $9;
   $20 = ($18|0)<($19|0);
   if (!($20)) {
    label = 21;
    break;
   }
  }
  $21 = $6;
  switch ($21|0) {
  case 5:  {
   $9 = 5;
   $22 = $10;
   $23 = ($22|0)!=(0);
   if ($23) {
    label = 8;
   } else {
    $24 = $7;
    $25 = (($24>>>0) % 10)&-1;
    $26 = ($25|0)!=(0);
    if ($26) {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    label = 0;
    $27 = $7;
    $28 = (($27>>>0) % 10)&-1;
    $29 = (14388 + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $5;
    $32 = ((($31)) + -1|0);
    $5 = $32;
    HEAP8[$32>>0] = $30;
    $10 = 1;
   }
   $33 = $7;
   $34 = (($33>>>0) / 10)&-1;
   $7 = $34;
   break;
  }
  case 2:  {
   $9 = 2;
   label = 11;
   break;
  }
  case 1:  {
   label = 11;
   break;
  }
  case 4:  {
   $9 = 2;
   label = 13;
   break;
  }
  case 3:  {
   label = 13;
   break;
  }
  default: {
   $7 = 0;
  }
  }
  if ((label|0) == 11) {
   label = 0;
   $35 = $7;
   $36 = (($35>>>0) % 10)&-1;
   $37 = (14388 + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $5;
   $40 = ((($39)) + -1|0);
   $5 = $40;
   HEAP8[$40>>0] = $38;
   $41 = $7;
   $42 = (($41>>>0) / 10)&-1;
   $7 = $42;
  }
  else if ((label|0) == 13) {
   label = 0;
   $43 = $7;
   $44 = $43 & 15;
   $45 = (14388 + ($44)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $5;
   $48 = ((($47)) + -1|0);
   $5 = $48;
   HEAP8[$48>>0] = $46;
   $49 = $7;
   $50 = $49 >>> 4;
   $7 = $50;
  }
  $51 = $8;
  $52 = (($51) + 1)|0;
  $8 = $52;
  $53 = $6;
  $54 = ($53|0)==(5);
  $55 = $8;
  $56 = ($55|0)==(5);
  $or$cond = $54 & $56;
  if (!($or$cond)) {
   continue;
  }
  $57 = $5;
  $58 = $4;
  $59 = ($57>>>0)>($58>>>0);
  if (!($59)) {
   continue;
  }
  $60 = $10;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $5;
   $63 = ((($62)) + -1|0);
   $5 = $63;
   HEAP8[$63>>0] = 46;
   continue;
  }
  $64 = $7;
  $65 = ($64|0)==(0);
  if (!($65)) {
   continue;
  }
  $66 = $5;
  $67 = ((($66)) + -1|0);
  $5 = $67;
  HEAP8[$67>>0] = 48;
 }
 if ((label|0) == 21) {
  $68 = $5;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function _png_warning($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 L1: do {
  if ($6) {
   $7 = $3;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(35);
   if ($10) {
    $4 = 1;
    while(1) {
     $11 = $4;
     $12 = ($11|0)<(15);
     if (!($12)) {
      break L1;
     }
     $13 = $3;
     $14 = $4;
     $15 = (($13) + ($14)|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = $16 << 24 >> 24;
     $18 = ($17|0)==(32);
     if ($18) {
      break L1;
     }
     $19 = $4;
     $20 = (($19) + 1)|0;
     $4 = $20;
    }
   }
  }
 } while(0);
 $21 = $2;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $2;
  $24 = ((($23)) + 172|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $2;
   $28 = ((($27)) + 172|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $2;
   $31 = $3;
   $32 = $4;
   $33 = (($31) + ($32)|0);
   FUNCTION_TABLE_vii[$29 & 127]($30,$33);
   STACKTOP = sp;return;
  }
 }
 $34 = $2;
 $35 = $3;
 $36 = $4;
 $37 = (($35) + ($36)|0);
 _png_default_warning($34,$37);
 STACKTOP = sp;return;
}
function _png_default_warning($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[2294]|0;
 $5 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 (_fprintf($4,14405,$vararg_buffer)|0);
 $6 = HEAP32[2294]|0;
 (_fprintf($6,14386,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _png_benign_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1048576;
 $8 = ($7|0)!=(0);
 $9 = $2;
 $10 = ((($9)) + 208|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 32768;
 $13 = ($12|0)!=(0);
 if (!($8)) {
  if (!($13)) {
   $28 = $2;
   $29 = $3;
   _png_error($28,$29);
   // unreachable;
  }
  $22 = $2;
  $23 = ((($22)) + 376|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $2;
   $27 = $3;
   _png_chunk_error($26,$27);
   // unreachable;
  } else {
   $28 = $2;
   $29 = $3;
   _png_error($28,$29);
   // unreachable;
  }
 }
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 376|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $2;
   $19 = $3;
   _png_chunk_warning($18,$19);
   STACKTOP = sp;return;
  }
 }
 $20 = $2;
 $21 = $3;
 _png_warning($20,$21);
 STACKTOP = sp;return;
}
function _png_chunk_warning($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $7 = $2;
 if ($6) {
  $8 = $3;
  _png_warning($7,$8);
  STACKTOP = sp;return;
 } else {
  $9 = $3;
  _png_format_buffer($7,$4,$9);
  $10 = $2;
  _png_warning($10,$4);
  STACKTOP = sp;return;
 }
}
function _png_chunk_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $7 = $2;
 if ($6) {
  $8 = $3;
  _png_error($7,$8);
  // unreachable;
 } else {
  $9 = $3;
  _png_format_buffer($7,$4,$9);
  $10 = $2;
  _png_error($10,$4);
  // unreachable;
 }
}
function _png_format_buffer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $$sink5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = ((($11)) + 376|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 $7 = 0;
 $8 = 24;
 while(1) {
  $14 = $8;
  $15 = ($14|0)>=(0);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = $8;
  $18 = $16 >>> $17;
  $19 = $18 & 255;
  $9 = $19;
  $20 = $8;
  $21 = (($20) - 8)|0;
  $8 = $21;
  $22 = $9;
  $23 = ($22|0)<(65);
  $24 = $9;
  $25 = ($24|0)>(122);
  $or$cond = $23 | $25;
  if ($or$cond) {
   $32 = 1;
  } else {
   $26 = $9;
   $27 = ($26|0)>(90);
   $28 = $9;
   $29 = ($28|0)<(97);
   $30 = $27 ? $29 : 0;
   $32 = $30;
  }
  $31 = $32&1;
  $33 = ($31|0)!=(0);
  if ($33) {
   $34 = $4;
   $35 = $7;
   $36 = (($35) + 1)|0;
   $7 = $36;
   $37 = (($34) + ($35)|0);
   HEAP8[$37>>0] = 91;
   $38 = $9;
   $39 = $38 & 240;
   $40 = $39 >> 4;
   $41 = (20792 + ($40)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $4;
   $44 = $7;
   $45 = (($44) + 1)|0;
   $7 = $45;
   $46 = (($43) + ($44)|0);
   HEAP8[$46>>0] = $42;
   $47 = $9;
   $48 = $47 & 15;
   $49 = (20792 + ($48)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $4;
   $52 = $7;
   $53 = (($52) + 1)|0;
   $7 = $53;
   $54 = (($51) + ($52)|0);
   HEAP8[$54>>0] = $50;
   $55 = $4;
   $56 = $7;
   $57 = (($56) + 1)|0;
   $7 = $57;
   $58 = (($55) + ($56)|0);
   $$sink = 93;$$sink2 = $58;
  } else {
   $59 = $9;
   $60 = $59&255;
   $61 = $4;
   $62 = $7;
   $63 = (($62) + 1)|0;
   $7 = $63;
   $64 = (($61) + ($62)|0);
   $$sink = $60;$$sink2 = $64;
  }
  HEAP8[$$sink2>>0] = $$sink;
 }
 $65 = $5;
 $66 = ($65|0)==(0|0);
 if ($66) {
  $67 = $4;
  $68 = $7;
  $69 = (($67) + ($68)|0);
  $$sink3 = $69;
  HEAP8[$$sink3>>0] = 0;
  STACKTOP = sp;return;
 }
 $10 = 0;
 $70 = $4;
 $71 = $7;
 $72 = (($71) + 1)|0;
 $7 = $72;
 $73 = (($70) + ($71)|0);
 HEAP8[$73>>0] = 58;
 $74 = $4;
 $75 = $7;
 $76 = (($75) + 1)|0;
 $7 = $76;
 $77 = (($74) + ($75)|0);
 $$sink4 = 32;$$sink5 = $77;
 while(1) {
  HEAP8[$$sink5>>0] = $$sink4;
  $78 = $10;
  $79 = ($78|0)<(195);
  if (!($79)) {
   break;
  }
  $80 = $5;
  $81 = $10;
  $82 = (($80) + ($81)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83 << 24 >> 24;
  $85 = ($84|0)!=(0);
  if (!($85)) {
   break;
  }
  $86 = $5;
  $87 = $10;
  $88 = (($87) + 1)|0;
  $10 = $88;
  $89 = (($86) + ($87)|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $4;
  $92 = $7;
  $93 = (($92) + 1)|0;
  $7 = $93;
  $94 = (($91) + ($92)|0);
  $$sink4 = $90;$$sink5 = $94;
 }
 $95 = $4;
 $96 = $7;
 $97 = (($95) + ($96)|0);
 $$sink3 = $97;
 HEAP8[$$sink3>>0] = 0;
 STACKTOP = sp;return;
}
function _png_app_warning($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2097152;
 $8 = ($7|0)!=(0);
 $9 = $2;
 $10 = $3;
 if ($8) {
  _png_warning($9,$10);
  STACKTOP = sp;return;
 } else {
  _png_error($9,$10);
  // unreachable;
 }
}
function _png_app_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4194304;
 $8 = ($7|0)!=(0);
 $9 = $2;
 $10 = $3;
 if ($8) {
  _png_warning($9,$10);
  STACKTOP = sp;return;
 } else {
  _png_error($9,$10);
  // unreachable;
 }
}
function _png_chunk_benign_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1048576;
 $8 = ($7|0)!=(0);
 $9 = $2;
 $10 = $3;
 if ($8) {
  _png_chunk_warning($9,$10);
  STACKTOP = sp;return;
 } else {
  _png_chunk_error($9,$10);
  // unreachable;
 }
}
function _png_chunk_report($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 208|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 32768;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $5;
  $12 = ($11|0)<(2);
  $13 = $3;
  $14 = $4;
  if ($12) {
   _png_chunk_warning($13,$14);
   STACKTOP = sp;return;
  } else {
   _png_chunk_benign_error($13,$14);
   STACKTOP = sp;return;
  }
 }
 $15 = $3;
 $16 = ((($15)) + 208|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 32768;
 $19 = ($18|0)==(0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $5;
 $21 = ($20|0)<(1);
 $22 = $3;
 $23 = $4;
 if ($21) {
  _png_app_warning($22,$23);
  STACKTOP = sp;return;
 } else {
  _png_app_error($22,$23);
  STACKTOP = sp;return;
 }
}
function _png_set_longjmp_fn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $3 = 0;
  $51 = $3;
  STACKTOP = sp;return ($51|0);
 }
 $10 = $4;
 $11 = ((($10)) + 160|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 $14 = $4;
 $15 = ((($14)) + 164|0);
 do {
  if ($13) {
   HEAP32[$15>>2] = 0;
   $16 = $6;
   $17 = ($16>>>0)<=(156);
   $18 = $4;
   if ($17) {
    $19 = $4;
    $20 = ((($19)) + 160|0);
    HEAP32[$20>>2] = $18;
    break;
   }
   $21 = $6;
   $22 = (_png_malloc_warn($18,$21)|0);
   $23 = $4;
   $24 = ((($23)) + 160|0);
   HEAP32[$24>>2] = $22;
   $25 = $4;
   $26 = ((($25)) + 160|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if (!($28)) {
    $29 = $6;
    $30 = $4;
    $31 = ((($30)) + 164|0);
    HEAP32[$31>>2] = $29;
    break;
   }
   $3 = 0;
   $51 = $3;
   STACKTOP = sp;return ($51|0);
  } else {
   $32 = HEAP32[$15>>2]|0;
   $7 = $32;
   $33 = $7;
   $34 = ($33|0)==(0);
   if ($34) {
    $7 = 156;
    $35 = $4;
    $36 = ((($35)) + 160|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $4;
    $39 = ($37|0)!=($38|0);
    if ($39) {
     $40 = $4;
     _png_error($40,14424);
     // unreachable;
    }
   }
   $41 = $7;
   $42 = $6;
   $43 = ($41|0)!=($42|0);
   if ($43) {
    $44 = $4;
    _png_warning($44,14455);
    $3 = 0;
    $51 = $3;
    STACKTOP = sp;return ($51|0);
   }
  }
 } while(0);
 $45 = $5;
 $46 = $4;
 $47 = ((($46)) + 156|0);
 HEAP32[$47>>2] = $45;
 $48 = $4;
 $49 = ((($48)) + 160|0);
 $50 = HEAP32[$49>>2]|0;
 $3 = $50;
 $51 = $3;
 STACKTOP = sp;return ($51|0);
}
function _png_set_error_fn($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $5;
 $11 = $4;
 $12 = ((($11)) + 176|0);
 HEAP32[$12>>2] = $10;
 $13 = $6;
 $14 = $4;
 $15 = ((($14)) + 168|0);
 HEAP32[$15>>2] = $13;
 $16 = $7;
 $17 = $4;
 $18 = ((($17)) + 172|0);
 HEAP32[$18>>2] = $16;
 STACKTOP = sp;return;
}
function _png_get_valid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 $or$cond = $8 & $10;
 if ($or$cond) {
  $11 = $5;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $6;
  $15 = $13 & $14;
  $3 = $15;
  $16 = $3;
  STACKTOP = sp;return ($16|0);
 } else {
  $3 = 0;
  $16 = $3;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _png_get_rowbytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 0;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _png_get_image_width($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
 } else {
  $2 = 0;
 }
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _png_get_image_height($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 0;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _png_get_bit_depth($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = ((($9)) + 24|0);
  $11 = HEAP8[$10>>0]|0;
  $2 = $11;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 0;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _png_get_color_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = ((($9)) + 25|0);
  $11 = HEAP8[$10>>0]|0;
  $2 = $11;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 0;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _png_get_channels($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = ((($9)) + 29|0);
  $11 = HEAP8[$10>>0]|0;
  $2 = $11;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 } else {
  $2 = 0;
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _png_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ((($8)) + 692|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $2;
 if ($11) {
  $13 = ((($12)) + 692|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = $3;
  FUNCTION_TABLE_vii[$14 & 127]($15,$16);
  STACKTOP = sp;return;
 } else {
  $17 = $3;
  _png_free_default($12,$17);
  STACKTOP = sp;return;
 }
}
function _png_free_default($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 _free($8);
 STACKTOP = sp;return;
}
function _png_calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_png_malloc($5,$6)|0);
 $4 = $7;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $4;
  $11 = $3;
  _memset(($10|0),0,($11|0))|0;
 }
 $12 = $4;
 STACKTOP = sp;return ($12|0);
}
function _png_malloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 }
 $8 = $3;
 $9 = $4;
 $10 = (_png_malloc_base($8,$9)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $3;
  _png_error($13,14488);
  // unreachable;
 }
 $14 = $5;
 $2 = $14;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _png_malloc_base($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5>>>0)>(0);
 $7 = $4;
 $8 = ($7>>>0)<=(4294967295);
 $or$cond = $6 & $8;
 if (!($or$cond)) {
  $2 = 0;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 688|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $3;
   $16 = ((($15)) + 688|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $3;
   $19 = $4;
   $20 = (FUNCTION_TABLE_iii[$17 & 63]($18,$19)|0);
   $2 = $20;
   $23 = $2;
   STACKTOP = sp;return ($23|0);
  }
 }
 $21 = $4;
 $22 = (_malloc($21)|0);
 $2 = $22;
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _png_malloc_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ($6|0)<=(0);
 $8 = $5;
 $9 = ($8|0)==(0);
 $or$cond = $7 | $9;
 $10 = $3;
 if ($or$cond) {
  _png_error($10,14502);
  // unreachable;
 } else {
  $11 = $4;
  $12 = $5;
  $13 = (_png_malloc_array_checked($10,$11,$12)|0);
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _png_malloc_array_checked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $7 = $8;
 $9 = $7;
 $10 = $6;
 $11 = (4294967295 / ($10>>>0))&-1;
 $12 = ($9>>>0)<=($11>>>0);
 if ($12) {
  $13 = $4;
  $14 = $7;
  $15 = $6;
  $16 = Math_imul($14, $15)|0;
  $17 = (_png_malloc_base($13,$16)|0);
  $3 = $17;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = 0;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _png_realloc_array($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $9;
 $13 = ($12|0)<=(0);
 $14 = $10;
 $15 = ($14|0)==(0);
 $or$cond = $13 | $15;
 $16 = $8;
 $17 = ($16|0)<(0);
 $or$cond3 = $or$cond | $17;
 if ($or$cond3) {
  $22 = $6;
  _png_error($22,14530);
  // unreachable;
 }
 $18 = $7;
 $19 = ($18|0)==(0|0);
 $20 = $8;
 $21 = ($20|0)>(0);
 $or$cond5 = $19 & $21;
 if ($or$cond5) {
  $22 = $6;
  _png_error($22,14530);
  // unreachable;
 }
 $23 = $9;
 $24 = $8;
 $25 = (2147483647 - ($24))|0;
 $26 = ($23|0)<=($25|0);
 if ($26) {
  $27 = $6;
  $28 = $8;
  $29 = $9;
  $30 = (($28) + ($29))|0;
  $31 = $10;
  $32 = (_png_malloc_array_checked($27,$30,$31)|0);
  $11 = $32;
  $33 = $11;
  $34 = ($33|0)!=(0|0);
  if ($34) {
   $35 = $8;
   $36 = ($35|0)>(0);
   if ($36) {
    $37 = $11;
    $38 = $7;
    $39 = $10;
    $40 = $8;
    $41 = Math_imul($39, $40)|0;
    _memcpy(($37|0),($38|0),($41|0))|0;
   }
   $42 = $11;
   $43 = $10;
   $44 = $8;
   $45 = Math_imul($43, $44)|0;
   $46 = (($42) + ($45)|0);
   $47 = $10;
   $48 = $9;
   $49 = Math_imul($47, $48)|0;
   _memset(($46|0),0,($49|0))|0;
   $50 = $11;
   $5 = $50;
   $51 = $5;
   STACKTOP = sp;return ($51|0);
  }
 }
 $5 = 0;
 $51 = $5;
 STACKTOP = sp;return ($51|0);
}
function _png_malloc_warn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $3;
   $9 = $4;
   $10 = (_png_malloc_base($8,$9)|0);
   $5 = $10;
   $11 = $5;
   $12 = ($11|0)!=(0|0);
   if (!($12)) {
    $14 = $3;
    _png_warning($14,14488);
    break;
   }
   $13 = $5;
   $2 = $13;
   $15 = $2;
   STACKTOP = sp;return ($15|0);
  }
 } while(0);
 $2 = 0;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _png_set_mem_fn($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $5;
 $11 = $4;
 $12 = ((($11)) + 684|0);
 HEAP32[$12>>2] = $10;
 $13 = $6;
 $14 = $4;
 $15 = ((($14)) + 688|0);
 HEAP32[$15>>2] = $13;
 $16 = $7;
 $17 = $4;
 $18 = ((($17)) + 692|0);
 HEAP32[$18>>2] = $16;
 STACKTOP = sp;return;
}
function _png_create_read_struct($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (_png_create_read_struct_2($8,$9,$10,$11,0,0,0)|0);
 STACKTOP = sp;return ($12|0);
}
function _png_create_read_struct_2($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = (_png_create_png_struct($15,$16,$17,$18,$19,$20,$21)|0);
 $14 = $22;
 $23 = $14;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $38 = $14;
  STACKTOP = sp;return ($38|0);
 }
 $25 = $14;
 $26 = ((($25)) + 208|0);
 HEAP32[$26>>2] = 32768;
 $27 = $14;
 $28 = ((($27)) + 764|0);
 HEAP32[$28>>2] = 8192;
 $29 = $14;
 $30 = ((($29)) + 212|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 | 1048576;
 HEAP32[$30>>2] = $32;
 $33 = $14;
 $34 = ((($33)) + 212|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 | 2097152;
 HEAP32[$34>>2] = $36;
 $37 = $14;
 _png_set_read_fn($37,0,0);
 $38 = $14;
 STACKTOP = sp;return ($38|0);
}
function _png_read_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink10 = 0, $$sink3 = 0, $$sink8 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $9 = $3;
 $10 = ($9|0)==(0|0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = $3;
 _png_read_sig($11,$12);
 while(1) {
  $13 = $2;
  $14 = (_png_read_chunk_header($13)|0);
  $5 = $14;
  $15 = $2;
  $16 = ((($15)) + 376|0);
  $17 = HEAP32[$16>>2]|0;
  $6 = $17;
  $18 = $6;
  $19 = ($18|0)==(1229209940);
  $20 = $2;
  $21 = ((($20)) + 208|0);
  $22 = HEAP32[$21>>2]|0;
  if ($19) {
   $23 = $22 & 1;
   $24 = ($23|0)==(0);
   $25 = $2;
   if ($24) {
    label = 5;
    break;
   }
   $26 = ((($25)) + 427|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($28|0)==(3);
   if ($29) {
    $30 = $2;
    $31 = ((($30)) + 208|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 & 2;
    $34 = ($33|0)==(0);
    if ($34) {
     label = 8;
     break;
    }
   }
   $36 = $2;
   $37 = ((($36)) + 208|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 & 8;
   $40 = ($39|0)!=(0);
   if ($40) {
    $41 = $2;
    _png_chunk_benign_error($41,14610);
   }
   $42 = $2;
   $$sink10 = $42;$$sink8 = 4;
   label = 14;
  } else {
   $43 = $22 & 4;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $2;
    $46 = ((($45)) + 208|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $47 | 8192;
    HEAP32[$46>>2] = $48;
    $49 = $2;
    $$sink10 = $49;$$sink8 = 8;
    label = 14;
   }
  }
  if ((label|0) == 14) {
   label = 0;
   $50 = ((($$sink10)) + 208|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $51 | $$sink8;
   HEAP32[$50>>2] = $52;
  }
  $53 = $6;
  $54 = ($53|0)==(1229472850);
  if ($54) {
   $55 = $2;
   $56 = $3;
   $57 = $5;
   _png_handle_IHDR($55,$56,$57);
   continue;
  }
  $58 = $6;
  $59 = ($58|0)==(1229278788);
  $60 = $2;
  if ($59) {
   $61 = $3;
   $62 = $5;
   _png_handle_IEND($60,$61,$62);
   continue;
  }
  $63 = $6;
  $64 = (_png_chunk_unknown_handling($60,$63)|0);
  $4 = $64;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $2;
   $67 = $3;
   $68 = $5;
   $69 = $4;
   _png_handle_unknown($66,$67,$68,$69);
   $70 = $6;
   $71 = ($70|0)==(1347179589);
   if ($71) {
    $72 = $2;
    $73 = ((($72)) + 208|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $74 | 2;
    HEAP32[$73>>2] = $75;
    continue;
   } else {
    $76 = $6;
    $77 = ($76|0)==(1229209940);
    if ($77) {
     label = 23;
     break;
    } else {
     continue;
    }
   }
  }
  $79 = $6;
  $80 = ($79|0)==(1347179589);
  if ($80) {
   $81 = $2;
   $82 = $3;
   $83 = $5;
   _png_handle_PLTE($81,$82,$83);
   continue;
  }
  $84 = $6;
  $85 = ($84|0)==(1229209940);
  if ($85) {
   label = 27;
   break;
  }
  $88 = $6;
  $89 = ($88|0)==(1649100612);
  if ($89) {
   $90 = $2;
   $91 = $3;
   $92 = $5;
   _png_handle_bKGD($90,$91,$92);
   continue;
  }
  $93 = $6;
  $94 = ($93|0)==(1665684045);
  if ($94) {
   $95 = $2;
   $96 = $3;
   $97 = $5;
   _png_handle_cHRM($95,$96,$97);
   continue;
  }
  $98 = $6;
  $99 = ($98|0)==(1732332865);
  if ($99) {
   $100 = $2;
   $101 = $3;
   $102 = $5;
   _png_handle_gAMA($100,$101,$102);
   continue;
  }
  $103 = $6;
  $104 = ($103|0)==(1749635924);
  if ($104) {
   $105 = $2;
   $106 = $3;
   $107 = $5;
   _png_handle_hIST($105,$106,$107);
   continue;
  }
  $108 = $6;
  $109 = ($108|0)==(1866876531);
  if ($109) {
   $110 = $2;
   $111 = $3;
   $112 = $5;
   _png_handle_oFFs($110,$111,$112);
   continue;
  }
  $113 = $6;
  $114 = ($113|0)==(1883455820);
  if ($114) {
   $115 = $2;
   $116 = $3;
   $117 = $5;
   _png_handle_pCAL($115,$116,$117);
   continue;
  }
  $118 = $6;
  $119 = ($118|0)==(1933787468);
  if ($119) {
   $120 = $2;
   $121 = $3;
   $122 = $5;
   _png_handle_sCAL($120,$121,$122);
   continue;
  }
  $123 = $6;
  $124 = ($123|0)==(1883789683);
  if ($124) {
   $125 = $2;
   $126 = $3;
   $127 = $5;
   _png_handle_pHYs($125,$126,$127);
   continue;
  }
  $128 = $6;
  $129 = ($128|0)==(1933723988);
  if ($129) {
   $130 = $2;
   $131 = $3;
   $132 = $5;
   _png_handle_sBIT($130,$131,$132);
   continue;
  }
  $133 = $6;
  $134 = ($133|0)==(1934772034);
  if ($134) {
   $135 = $2;
   $136 = $3;
   $137 = $5;
   _png_handle_sRGB($135,$136,$137);
   continue;
  }
  $138 = $6;
  $139 = ($138|0)==(1766015824);
  if ($139) {
   $140 = $2;
   $141 = $3;
   $142 = $5;
   _png_handle_iCCP($140,$141,$142);
   continue;
  }
  $143 = $6;
  $144 = ($143|0)==(1934642260);
  if ($144) {
   $145 = $2;
   $146 = $3;
   $147 = $5;
   _png_handle_sPLT($145,$146,$147);
   continue;
  }
  $148 = $6;
  $149 = ($148|0)==(1950701684);
  if ($149) {
   $150 = $2;
   $151 = $3;
   $152 = $5;
   _png_handle_tEXt($150,$151,$152);
   continue;
  }
  $153 = $6;
  $154 = ($153|0)==(1950960965);
  if ($154) {
   $155 = $2;
   $156 = $3;
   $157 = $5;
   _png_handle_tIME($155,$156,$157);
   continue;
  }
  $158 = $6;
  $159 = ($158|0)==(1951551059);
  if ($159) {
   $160 = $2;
   $161 = $3;
   $162 = $5;
   _png_handle_tRNS($160,$161,$162);
   continue;
  }
  $163 = $6;
  $164 = ($163|0)==(2052348020);
  if ($164) {
   $165 = $2;
   $166 = $3;
   $167 = $5;
   _png_handle_zTXt($165,$166,$167);
   continue;
  }
  $168 = $6;
  $169 = ($168|0)==(1767135348);
  $170 = $2;
  $171 = $3;
  $172 = $5;
  if ($169) {
   _png_handle_iTXt($170,$171,$172);
   continue;
  } else {
   _png_handle_unknown($170,$171,$172,0);
   continue;
  }
 }
 if ((label|0) == 5) {
  _png_chunk_error($25,14560);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $35 = $2;
  _png_chunk_error($35,14585);
  // unreachable;
 }
 else if ((label|0) == 23) {
  $78 = $2;
  $$sink = 0;$$sink3 = $78;
 }
 else if ((label|0) == 27) {
  $86 = $5;
  $87 = $2;
  $$sink = $86;$$sink3 = $87;
 }
 $173 = ((($$sink3)) + 400|0);
 HEAP32[$173>>2] = $$sink;
 STACKTOP = sp;return;
}
function _png_read_update_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $2;
 $7 = ((($6)) + 212|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 64;
 $10 = ($9|0)==(0);
 $11 = $2;
 if ($10) {
  _png_read_start_row($11);
  $12 = $2;
  $13 = $3;
  _png_read_transform_info($12,$13);
  STACKTOP = sp;return;
 } else {
  _png_app_error($11,14631);
  STACKTOP = sp;return;
 }
}
function _png_start_read_image($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = $1;
   $5 = ((($4)) + 212|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 & 64;
   $8 = ($7|0)==(0);
   $9 = $1;
   if ($8) {
    _png_read_start_row($9);
    break;
   } else {
    _png_app_error($9,14689);
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _png_read_row($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $3;
 $10 = ((($9)) + 212|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 64;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $3;
  _png_read_start_row($14);
 }
 $15 = $3;
 $16 = ((($15)) + 368|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$6>>2] = $17;
 $18 = $3;
 $19 = ((($18)) + 427|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ((($6)) + 8|0);
 HEAP8[$21>>0] = $20;
 $22 = $3;
 $23 = ((($22)) + 428|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ((($6)) + 9|0);
 HEAP8[$25>>0] = $24;
 $26 = $3;
 $27 = ((($26)) + 431|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ((($6)) + 10|0);
 HEAP8[$29>>0] = $28;
 $30 = $3;
 $31 = ((($30)) + 430|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ((($6)) + 11|0);
 HEAP8[$33>>0] = $32;
 $34 = ((($6)) + 11|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)>=(8);
 $38 = HEAP32[$6>>2]|0;
 $39 = ((($6)) + 11|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 if ($37) {
  $42 = $41 >>> 3;
  $43 = Math_imul($38, $42)|0;
  $48 = $43;
 } else {
  $44 = Math_imul($38, $41)|0;
  $45 = (($44) + 7)|0;
  $46 = $45 >>> 3;
  $48 = $46;
 }
 $47 = ((($6)) + 4|0);
 HEAP32[$47>>2] = $48;
 $49 = $3;
 $50 = ((($49)) + 424|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = ($52|0)!=(0);
 L11: do {
  if ($53) {
   $54 = $3;
   $55 = ((($54)) + 216|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 & 2;
   $58 = ($57|0)!=(0);
   if ($58) {
    $59 = $3;
    $60 = ((($59)) + 425|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    switch ($62|0) {
    case 0:  {
     $63 = $3;
     $64 = ((($63)) + 372|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $65 & 7;
     $67 = ($66|0)!=(0);
     if (!($67)) {
      break L11;
     }
     $68 = $5;
     $69 = ($68|0)!=(0|0);
     if ($69) {
      $70 = $3;
      $71 = $5;
      _png_combine_row($70,$71,1);
     }
     $72 = $3;
     _png_read_finish_row($72);
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $73 = $3;
     $74 = ((($73)) + 372|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $75 & 7;
     $77 = ($76|0)!=(0);
     if (!($77)) {
      $78 = $3;
      $79 = ((($78)) + 348|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80>>>0)<(5);
      if (!($81)) {
       break L11;
      }
     }
     $82 = $5;
     $83 = ($82|0)!=(0|0);
     if ($83) {
      $84 = $3;
      $85 = $5;
      _png_combine_row($84,$85,1);
     }
     $86 = $3;
     _png_read_finish_row($86);
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $87 = $3;
     $88 = ((($87)) + 372|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $89 & 7;
     $91 = ($90|0)!=(4);
     if (!($91)) {
      break L11;
     }
     $92 = $5;
     $93 = ($92|0)!=(0|0);
     if ($93) {
      $94 = $3;
      $95 = ((($94)) + 372|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = $96 & 4;
      $98 = ($97|0)!=(0);
      if ($98) {
       $99 = $3;
       $100 = $5;
       _png_combine_row($99,$100,1);
      }
     }
     $101 = $3;
     _png_read_finish_row($101);
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     $102 = $3;
     $103 = ((($102)) + 372|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = $104 & 3;
     $106 = ($105|0)!=(0);
     if (!($106)) {
      $107 = $3;
      $108 = ((($107)) + 348|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = ($109>>>0)<(3);
      if (!($110)) {
       break L11;
      }
     }
     $111 = $5;
     $112 = ($111|0)!=(0|0);
     if ($112) {
      $113 = $3;
      $114 = $5;
      _png_combine_row($113,$114,1);
     }
     $115 = $3;
     _png_read_finish_row($115);
     STACKTOP = sp;return;
     break;
    }
    case 4:  {
     $116 = $3;
     $117 = ((($116)) + 372|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $118 & 3;
     $120 = ($119|0)!=(2);
     if (!($120)) {
      break L11;
     }
     $121 = $5;
     $122 = ($121|0)!=(0|0);
     if ($122) {
      $123 = $3;
      $124 = ((($123)) + 372|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = $125 & 2;
      $127 = ($126|0)!=(0);
      if ($127) {
       $128 = $3;
       $129 = $5;
       _png_combine_row($128,$129,1);
      }
     }
     $130 = $3;
     _png_read_finish_row($130);
     STACKTOP = sp;return;
     break;
    }
    case 5:  {
     $131 = $3;
     $132 = ((($131)) + 372|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $133 & 1;
     $135 = ($134|0)!=(0);
     if (!($135)) {
      $136 = $3;
      $137 = ((($136)) + 348|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138>>>0)<(2);
      if (!($139)) {
       break L11;
      }
     }
     $140 = $5;
     $141 = ($140|0)!=(0|0);
     if ($141) {
      $142 = $3;
      $143 = $5;
      _png_combine_row($142,$143,1);
     }
     $144 = $3;
     _png_read_finish_row($144);
     STACKTOP = sp;return;
     break;
    }
    default: {
     $145 = $3;
     $146 = ((($145)) + 372|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $147 & 1;
     $149 = ($148|0)==(0);
     if (!($149)) {
      break L11;
     }
     $150 = $3;
     _png_read_finish_row($150);
     STACKTOP = sp;return;
    }
    }
   }
  }
 } while(0);
 $151 = $3;
 $152 = ((($151)) + 208|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $153 & 4;
 $155 = ($154|0)==(0);
 $156 = $3;
 if ($155) {
  _png_error($156,14747);
  // unreachable;
 }
 $157 = $3;
 $158 = ((($157)) + 384|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ((($6)) + 4|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($161) + 1)|0;
 _png_read_IDAT_data($156,$159,$162);
 $163 = $3;
 $164 = ((($163)) + 384|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = HEAP8[$165>>0]|0;
 $167 = $166&255;
 $168 = ($167|0)>(0);
 do {
  if ($168) {
   $169 = $3;
   $170 = ((($169)) + 384|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   $174 = ($173|0)<(5);
   $175 = $3;
   if ($174) {
    $176 = $3;
    $177 = ((($176)) + 384|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ((($178)) + 1|0);
    $180 = $3;
    $181 = ((($180)) + 380|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = ((($182)) + 1|0);
    $184 = $3;
    $185 = ((($184)) + 384|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    _png_read_filter_row($175,$6,$179,$183,$188);
    break;
   } else {
    _png_error($175,14780);
    // unreachable;
   }
  }
 } while(0);
 $189 = $3;
 $190 = ((($189)) + 380|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $3;
 $193 = ((($192)) + 384|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = ((($6)) + 4|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = (($196) + 1)|0;
 _memcpy(($191|0),($194|0),($197|0))|0;
 $198 = $3;
 $199 = ((($198)) + 676|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = $200 & 4;
 $202 = ($201|0)!=(0);
 if ($202) {
  $203 = $3;
  $204 = ((($203)) + 680|0);
  $205 = HEAP8[$204>>0]|0;
  $206 = $205&255;
  $207 = ($206|0)==(64);
  if ($207) {
   $208 = $3;
   $209 = ((($208)) + 384|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ((($210)) + 1|0);
   _png_do_read_intrapixel($6,$211);
  }
 }
 $212 = $3;
 $213 = ((($212)) + 216|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ($214|0)!=(0);
 if ($215) {
  $216 = $3;
  _png_do_read_transformations($216,$6);
 }
 $217 = $3;
 $218 = ((($217)) + 435|0);
 $219 = HEAP8[$218>>0]|0;
 $220 = $219&255;
 $221 = ($220|0)==(0);
 if ($221) {
  $222 = ((($6)) + 11|0);
  $223 = HEAP8[$222>>0]|0;
  $224 = $3;
  $225 = ((($224)) + 435|0);
  HEAP8[$225>>0] = $223;
  $226 = ((($6)) + 11|0);
  $227 = HEAP8[$226>>0]|0;
  $228 = $227&255;
  $229 = $3;
  $230 = ((($229)) + 434|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = $231&255;
  $233 = ($228|0)>($232|0);
  if ($233) {
   $234 = $3;
   _png_error($234,14806);
   // unreachable;
  }
 } else {
  $235 = $3;
  $236 = ((($235)) + 435|0);
  $237 = HEAP8[$236>>0]|0;
  $238 = $237&255;
  $239 = ((($6)) + 11|0);
  $240 = HEAP8[$239>>0]|0;
  $241 = $240&255;
  $242 = ($238|0)!=($241|0);
  if ($242) {
   $243 = $3;
   _png_error($243,14830);
   // unreachable;
  }
 }
 $244 = $3;
 $245 = ((($244)) + 424|0);
 $246 = HEAP8[$245>>0]|0;
 $247 = $246&255;
 $248 = ($247|0)!=(0);
 if ($248) {
  $249 = $3;
  $250 = ((($249)) + 216|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $251 & 2;
  $253 = ($252|0)!=(0);
  if ($253) {
   $254 = $3;
   $255 = ((($254)) + 425|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $256&255;
   $258 = ($257|0)<(6);
   if ($258) {
    $259 = $3;
    $260 = ((($259)) + 384|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = ((($261)) + 1|0);
    $263 = $3;
    $264 = ((($263)) + 425|0);
    $265 = HEAP8[$264>>0]|0;
    $266 = $265&255;
    $267 = $3;
    $268 = ((($267)) + 216|0);
    $269 = HEAP32[$268>>2]|0;
    _png_do_read_interlace($6,$262,$266,$269);
   }
   $270 = $5;
   $271 = ($270|0)!=(0|0);
   if ($271) {
    $272 = $3;
    $273 = $5;
    _png_combine_row($272,$273,1);
   }
   $274 = $4;
   $275 = ($274|0)!=(0|0);
   if ($275) {
    $276 = $3;
    $277 = $4;
    _png_combine_row($276,$277,0);
   }
  } else {
   label = 65;
  }
 } else {
  label = 65;
 }
 if ((label|0) == 65) {
  $278 = $4;
  $279 = ($278|0)!=(0|0);
  if ($279) {
   $280 = $3;
   $281 = $4;
   _png_combine_row($280,$281,-1);
  }
  $282 = $5;
  $283 = ($282|0)!=(0|0);
  if ($283) {
   $284 = $3;
   $285 = $5;
   _png_combine_row($284,$285,-1);
  }
 }
 $286 = $3;
 _png_read_finish_row($286);
 $287 = $3;
 $288 = ((($287)) + 536|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = ($289|0)!=(0|0);
 if (!($290)) {
  STACKTOP = sp;return;
 }
 $291 = $3;
 $292 = ((($291)) + 536|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = $3;
 $295 = $3;
 $296 = ((($295)) + 372|0);
 $297 = HEAP32[$296>>2]|0;
 $298 = $3;
 $299 = ((($298)) + 425|0);
 $300 = HEAP8[$299>>0]|0;
 $301 = $300&255;
 FUNCTION_TABLE_viii[$293 & 127]($294,$297,$301);
 STACKTOP = sp;return;
}
function _png_do_read_intrapixel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = $0;
 $3 = $1;
 $15 = $2;
 $16 = ((($15)) + 8|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 & 2;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $5 = $22;
 $23 = $2;
 $24 = ((($23)) + 9|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)==(8);
 $28 = $2;
 if ($27) {
  $29 = ((($28)) + 8|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)==(2);
  do {
   if ($32) {
    $4 = 3;
   } else {
    $33 = $2;
    $34 = ((($33)) + 8|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = ($36|0)==(6);
    if ($37) {
     $4 = 4;
     break;
    } else {
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $7 = 0;
  $38 = $3;
  $6 = $38;
  while(1) {
   $39 = $7;
   $40 = $5;
   $41 = ($39>>>0)<($40>>>0);
   if (!($41)) {
    break;
   }
   $42 = $6;
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = (256 + ($44))|0;
   $46 = $6;
   $47 = ((($46)) + 1|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = (($45) + ($49))|0;
   $51 = $50 & 255;
   $52 = $51&255;
   $53 = $6;
   HEAP8[$53>>0] = $52;
   $54 = $6;
   $55 = ((($54)) + 2|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = (256 + ($57))|0;
   $59 = $6;
   $60 = ((($59)) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = (($58) + ($62))|0;
   $64 = $63 & 255;
   $65 = $64&255;
   $66 = $6;
   $67 = ((($66)) + 2|0);
   HEAP8[$67>>0] = $65;
   $68 = $7;
   $69 = (($68) + 1)|0;
   $7 = $69;
   $70 = $4;
   $71 = $6;
   $72 = (($71) + ($70)|0);
   $6 = $72;
  }
  STACKTOP = sp;return;
 }
 $73 = ((($28)) + 9|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = ($75|0)==(16);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = $2;
 $78 = ((($77)) + 8|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = ($80|0)==(2);
 do {
  if ($81) {
   $4 = 6;
  } else {
   $82 = $2;
   $83 = ((($82)) + 8|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = ($85|0)==(6);
   if ($86) {
    $4 = 8;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $9 = 0;
 $87 = $3;
 $8 = $87;
 while(1) {
  $88 = $9;
  $89 = $5;
  $90 = ($88>>>0)<($89>>>0);
  if (!($90)) {
   break;
  }
  $91 = $8;
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $93 << 8;
  $95 = $8;
  $96 = ((($95)) + 1|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $94 | $98;
  $10 = $99;
  $100 = $8;
  $101 = ((($100)) + 2|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $103 << 8;
  $105 = $8;
  $106 = ((($105)) + 3|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = $104 | $108;
  $11 = $109;
  $110 = $8;
  $111 = ((($110)) + 4|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $114 = $113 << 8;
  $115 = $8;
  $116 = ((($115)) + 5|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = $114 | $118;
  $12 = $119;
  $120 = $10;
  $121 = $11;
  $122 = (($120) + ($121))|0;
  $123 = (($122) + 65536)|0;
  $124 = $123 & 65535;
  $13 = $124;
  $125 = $12;
  $126 = $11;
  $127 = (($125) + ($126))|0;
  $128 = (($127) + 65536)|0;
  $129 = $128 & 65535;
  $14 = $129;
  $130 = $13;
  $131 = $130 >>> 8;
  $132 = $131 & 255;
  $133 = $132&255;
  $134 = $8;
  HEAP8[$134>>0] = $133;
  $135 = $13;
  $136 = $135 & 255;
  $137 = $136&255;
  $138 = $8;
  $139 = ((($138)) + 1|0);
  HEAP8[$139>>0] = $137;
  $140 = $14;
  $141 = $140 >>> 8;
  $142 = $141 & 255;
  $143 = $142&255;
  $144 = $8;
  $145 = ((($144)) + 4|0);
  HEAP8[$145>>0] = $143;
  $146 = $14;
  $147 = $146 & 255;
  $148 = $147&255;
  $149 = $8;
  $150 = ((($149)) + 5|0);
  HEAP8[$150>>0] = $148;
  $151 = $9;
  $152 = (($151) + 1)|0;
  $9 = $152;
  $153 = $4;
  $154 = $8;
  $155 = (($154) + ($153)|0);
  $8 = $155;
 }
 STACKTOP = sp;return;
}
function _png_read_image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = ((($11)) + 212|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 64;
 $15 = ($14|0)==(0);
 $16 = $2;
 if ($15) {
  $17 = (_png_set_interlace_handling($16)|0);
  $6 = $17;
  $18 = $2;
  _png_start_read_image($18);
 } else {
  $19 = ((($16)) + 424|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $2;
   $24 = ((($23)) + 216|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 & 2;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $2;
    _png_warning($28,14877);
    $29 = $2;
    $30 = ((($29)) + 352|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $2;
    $33 = ((($32)) + 356|0);
    HEAP32[$33>>2] = $31;
   }
  }
  $34 = $2;
  $35 = (_png_set_interlace_handling($34)|0);
  $6 = $35;
 }
 $36 = $2;
 $37 = ((($36)) + 352|0);
 $38 = HEAP32[$37>>2]|0;
 $5 = $38;
 $7 = 0;
 while(1) {
  $39 = $7;
  $40 = $6;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $3;
  $8 = $42;
  $4 = 0;
  while(1) {
   $43 = $4;
   $44 = $5;
   $45 = ($43>>>0)<($44>>>0);
   if (!($45)) {
    break;
   }
   $46 = $2;
   $47 = $8;
   $48 = HEAP32[$47>>2]|0;
   _png_read_row($46,$48,0);
   $49 = $8;
   $50 = ((($49)) + 4|0);
   $8 = $50;
   $51 = $4;
   $52 = (($51) + 1)|0;
   $4 = $52;
  }
  $53 = $7;
  $54 = (($53) + 1)|0;
  $7 = $54;
 }
 STACKTOP = sp;return;
}
function _png_read_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 184|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 $10 = $3;
 if ($9) {
  $11 = ((($10)) + 184|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = $4;
  $15 = $5;
  FUNCTION_TABLE_viii[$12 & 127]($13,$14,$15);
  STACKTOP = sp;return;
 } else {
  _png_error($10,14942);
  // unreachable;
 }
}
function _png_default_read_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $4;
 $10 = $5;
 $11 = $3;
 $12 = ((($11)) + 188|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_fread($9,1,$10,$13)|0);
 $6 = $14;
 $15 = $6;
 $16 = $5;
 $17 = ($15|0)!=($16|0);
 if ($17) {
  $18 = $3;
  _png_error($18,14969);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _png_set_read_fn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $png_default_read_data$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 188|0);
 HEAP32[$10>>2] = $8;
 $11 = $5;
 $12 = ($11|0)!=(0|0);
 $13 = $3;
 $14 = $5;
 $15 = $3;
 $$sink = $12 ? $15 : $13;
 $png_default_read_data$sink = $12 ? $14 : 63;
 $16 = ((($$sink)) + 184|0);
 HEAP32[$16>>2] = $png_default_read_data$sink;
 $17 = $3;
 $18 = ((($17)) + 180|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $3;
  $22 = ((($21)) + 180|0);
  HEAP32[$22>>2] = 0;
  $23 = $3;
  _png_warning($23,14980);
 }
 $24 = $3;
 $25 = ((($24)) + 464|0);
 HEAP32[$25>>2] = 0;
 STACKTOP = sp;return;
}
function _png_rtran_ok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $3;
   $8 = ((($7)) + 212|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 64;
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = $3;
    _png_app_error($12,15048);
    break;
   }
   $13 = $4;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $3;
    $16 = ((($15)) + 208|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 1;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $3;
     _png_app_error($20,15107);
     break;
    }
   }
   $21 = $3;
   $22 = ((($21)) + 212|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 | 16384;
   HEAP32[$22>>2] = $24;
   $2 = 1;
   $25 = $2;
   STACKTOP = sp;return ($25|0);
  }
 } while(0);
 $2 = 0;
 $25 = $2;
 STACKTOP = sp;return ($25|0);
}
function _png_set_palette_to_rgb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_png_rtran_ok($2,0)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = ((($5)) + 216|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 33558528;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _png_set_expand_gray_1_2_4_to_8($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_png_rtran_ok($2,0)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = ((($5)) + 216|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 4096;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _png_set_tRNS_to_alpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_png_rtran_ok($2,0)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = ((($5)) + 216|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 33558528;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _png_init_read_transformations($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink1 = 0, $$sink3$sink = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0;
 var $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0;
 var $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0;
 var $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0;
 var $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0;
 var $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0;
 var $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0;
 var $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0;
 var $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0;
 var $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0;
 var $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0;
 var $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0;
 var $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0;
 var $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0;
 var $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0;
 var $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0;
 var $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0;
 var $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0;
 var $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0;
 var $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0;
 var $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0;
 var $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0;
 var $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0;
 var $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp + 112|0;
 $4 = sp + 109|0;
 $24 = sp + 104|0;
 $1 = $0;
 $2 = 0;
 $35 = $1;
 $36 = ((($35)) + 792|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0);
 $39 = $1;
 $40 = ((($39)) + 480|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0);
 $43 = $1;
 do {
  if ($38) {
   $44 = ((($43)) + 792|0);
   $45 = HEAP32[$44>>2]|0;
   if ($42) {
    $46 = $1;
    $47 = ((($46)) + 480|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (_png_gamma_threshold($45,$48)|0);
    $2 = $49;
    break;
   } else {
    $50 = (_png_reciprocal($45)|0);
    $51 = $1;
    $52 = ((($51)) + 480|0);
    HEAP32[$52>>2] = $50;
    break;
   }
  } else {
   if ($42) {
    $53 = ((($43)) + 480|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (_png_reciprocal($54)|0);
    $56 = $1;
    $57 = ((($56)) + 792|0);
    HEAP32[$57>>2] = $55;
    break;
   } else {
    $58 = ((($43)) + 792|0);
    HEAP32[$58>>2] = 100000;
    $59 = $1;
    $60 = ((($59)) + 480|0);
    HEAP32[$60>>2] = 100000;
    break;
   }
  }
 } while(0);
 $61 = $1;
 $62 = ((($61)) + 792|0);
 $63 = ((($62)) + 74|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = $64&65535;
 $66 = $65 | 1;
 $67 = $66&65535;
 HEAP16[$63>>1] = $67;
 $68 = $2;
 $69 = ($68|0)!=(0);
 $70 = $1;
 $71 = ((($70)) + 216|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 & -8193;
 $74 = $72 | 8192;
 $$sink = $69 ? $74 : $73;
 HEAP32[$71>>2] = $$sink;
 $75 = $1;
 $76 = ((($75)) + 216|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 & 262144;
 $79 = ($78|0)!=(0);
 if ($79) {
  $80 = $1;
  $81 = ((($80)) + 216|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 & 128;
  $84 = ($83|0)==(0);
  if ($84) {
   $85 = $1;
   $86 = ((($85)) + 216|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $87 & -41943297;
   HEAP32[$86>>2] = $88;
   $89 = $1;
   $90 = ((($89)) + 212|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $91 & -8193;
   HEAP32[$90>>2] = $92;
   $93 = $1;
   $94 = ((($93)) + 420|0);
   HEAP16[$94>>1] = 0;
  }
 }
 $95 = $1;
 $96 = ((($95)) + 480|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (_png_gamma_significant($97)|0);
 $99 = ($98|0)==(0);
 if ($99) {
  $100 = $1;
  $101 = ((($100)) + 216|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $102 & -8388609;
  HEAP32[$101>>2] = $103;
  $104 = $1;
  $105 = ((($104)) + 212|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $106 & -8193;
  HEAP32[$105>>2] = $107;
 }
 $108 = $1;
 $109 = ((($108)) + 216|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 6291456;
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $1;
  _png_colorspace_set_rgb_coefficients($113);
 }
 $114 = $1;
 $115 = ((($114)) + 216|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 & 256;
 $118 = ($117|0)!=(0);
 $119 = $1;
 if ($118) {
  $120 = ((($119)) + 427|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = $121&255;
  $123 = $122 & 2;
  $124 = ($123|0)==(0);
  if ($124) {
   $125 = $1;
   $126 = ((($125)) + 208|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127 | 2048;
   HEAP32[$126>>2] = $128;
  }
 } else {
  $129 = ((($119)) + 216|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $130 & 128;
  $132 = ($131|0)!=(0);
  if ($132) {
   $133 = $1;
   $134 = ((($133)) + 216|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $135 & 16384;
   $137 = ($136|0)!=(0);
   if ($137) {
    $138 = $1;
    $139 = ((($138)) + 444|0);
    $140 = ((($139)) + 2|0);
    $141 = HEAP16[$140>>1]|0;
    $142 = $141&65535;
    $143 = $1;
    $144 = ((($143)) + 444|0);
    $145 = ((($144)) + 4|0);
    $146 = HEAP16[$145>>1]|0;
    $147 = $146&65535;
    $148 = ($142|0)==($147|0);
    if ($148) {
     $149 = $1;
     $150 = ((($149)) + 444|0);
     $151 = ((($150)) + 2|0);
     $152 = HEAP16[$151>>1]|0;
     $153 = $152&65535;
     $154 = $1;
     $155 = ((($154)) + 444|0);
     $156 = ((($155)) + 6|0);
     $157 = HEAP16[$156>>1]|0;
     $158 = $157&65535;
     $159 = ($153|0)==($158|0);
     if ($159) {
      $160 = $1;
      $161 = ((($160)) + 208|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = $162 | 2048;
      HEAP32[$161>>2] = $163;
      $164 = $1;
      $165 = ((($164)) + 444|0);
      $166 = ((($165)) + 2|0);
      $167 = HEAP16[$166>>1]|0;
      $168 = $1;
      $169 = ((($168)) + 444|0);
      $170 = ((($169)) + 8|0);
      HEAP16[$170>>1] = $167;
     }
    }
   }
  }
 }
 $171 = $1;
 $172 = ((($171)) + 427|0);
 $173 = HEAP8[$172>>0]|0;
 $174 = $173&255;
 $175 = ($174|0)==(3);
 $176 = $1;
 if ($175) {
  _png_init_palette_transformations($176);
 } else {
  _png_init_rgb_transformations($176);
 }
 $177 = $1;
 $178 = ((($177)) + 216|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = $179 & 512;
 $181 = ($180|0)!=(0);
 if ($181) {
  $182 = $1;
  $183 = ((($182)) + 216|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = $184 & 128;
  $186 = ($185|0)!=(0);
  if ($186) {
   $187 = $1;
   $188 = ((($187)) + 216|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $189 & 256;
   $191 = ($190|0)==(0);
   if ($191) {
    $192 = $1;
    $193 = ((($192)) + 428|0);
    $194 = HEAP8[$193>>0]|0;
    $195 = $194&255;
    $196 = ($195|0)!=(16);
    if ($196) {
     $197 = $1;
     $198 = ((($197)) + 444|0);
     $199 = ((($198)) + 2|0);
     $200 = HEAP16[$199>>1]|0;
     $201 = $200&65535;
     $202 = ($201*255)|0;
     $203 = (($202) + 32895)|0;
     $204 = $203 >>> 16;
     $205 = $204&65535;
     $206 = $1;
     $207 = ((($206)) + 444|0);
     $208 = ((($207)) + 2|0);
     HEAP16[$208>>1] = $205;
     $209 = $1;
     $210 = ((($209)) + 444|0);
     $211 = ((($210)) + 4|0);
     $212 = HEAP16[$211>>1]|0;
     $213 = $212&65535;
     $214 = ($213*255)|0;
     $215 = (($214) + 32895)|0;
     $216 = $215 >>> 16;
     $217 = $216&65535;
     $218 = $1;
     $219 = ((($218)) + 444|0);
     $220 = ((($219)) + 4|0);
     HEAP16[$220>>1] = $217;
     $221 = $1;
     $222 = ((($221)) + 444|0);
     $223 = ((($222)) + 6|0);
     $224 = HEAP16[$223>>1]|0;
     $225 = $224&65535;
     $226 = ($225*255)|0;
     $227 = (($226) + 32895)|0;
     $228 = $227 >>> 16;
     $229 = $228&65535;
     $230 = $1;
     $231 = ((($230)) + 444|0);
     $232 = ((($231)) + 6|0);
     HEAP16[$232>>1] = $229;
     $233 = $1;
     $234 = ((($233)) + 444|0);
     $235 = ((($234)) + 8|0);
     $236 = HEAP16[$235>>1]|0;
     $237 = $236&65535;
     $238 = ($237*255)|0;
     $239 = (($238) + 32895)|0;
     $240 = $239 >>> 16;
     $241 = $240&65535;
     $242 = $1;
     $243 = ((($242)) + 444|0);
     $244 = ((($243)) + 8|0);
     HEAP16[$244>>1] = $241;
    }
   }
  }
 }
 $245 = $1;
 $246 = ((($245)) + 216|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = $247 & 67109888;
 $249 = ($248|0)!=(0);
 if ($249) {
  $250 = $1;
  $251 = ((($250)) + 216|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $252 & 128;
  $254 = ($253|0)!=(0);
  if ($254) {
   $255 = $1;
   $256 = ((($255)) + 216|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $257 & 256;
   $259 = ($258|0)==(0);
   if ($259) {
    $260 = $1;
    $261 = ((($260)) + 428|0);
    $262 = HEAP8[$261>>0]|0;
    $263 = $262&255;
    $264 = ($263|0)==(16);
    if ($264) {
     $265 = $1;
     $266 = ((($265)) + 444|0);
     $267 = ((($266)) + 2|0);
     $268 = HEAP16[$267>>1]|0;
     $269 = $268&65535;
     $270 = ($269*257)|0;
     $271 = $270&65535;
     $272 = $1;
     $273 = ((($272)) + 444|0);
     $274 = ((($273)) + 2|0);
     HEAP16[$274>>1] = $271;
     $275 = $1;
     $276 = ((($275)) + 444|0);
     $277 = ((($276)) + 4|0);
     $278 = HEAP16[$277>>1]|0;
     $279 = $278&65535;
     $280 = ($279*257)|0;
     $281 = $280&65535;
     $282 = $1;
     $283 = ((($282)) + 444|0);
     $284 = ((($283)) + 4|0);
     HEAP16[$284>>1] = $281;
     $285 = $1;
     $286 = ((($285)) + 444|0);
     $287 = ((($286)) + 6|0);
     $288 = HEAP16[$287>>1]|0;
     $289 = $288&65535;
     $290 = ($289*257)|0;
     $291 = $290&65535;
     $292 = $1;
     $293 = ((($292)) + 444|0);
     $294 = ((($293)) + 6|0);
     HEAP16[$294>>1] = $291;
     $295 = $1;
     $296 = ((($295)) + 444|0);
     $297 = ((($296)) + 8|0);
     $298 = HEAP16[$297>>1]|0;
     $299 = $298&65535;
     $300 = ($299*257)|0;
     $301 = $300&65535;
     $302 = $1;
     $303 = ((($302)) + 444|0);
     $304 = ((($303)) + 8|0);
     HEAP16[$304>>1] = $301;
    }
   }
  }
 }
 $305 = $1;
 $306 = ((($305)) + 454|0);
 $307 = $1;
 $308 = ((($307)) + 444|0);
 ;HEAP16[$306>>1]=HEAP16[$308>>1]|0;HEAP16[$306+2>>1]=HEAP16[$308+2>>1]|0;HEAP16[$306+4>>1]=HEAP16[$308+4>>1]|0;HEAP16[$306+6>>1]=HEAP16[$308+6>>1]|0;HEAP16[$306+8>>1]=HEAP16[$308+8>>1]|0;
 $309 = $1;
 $310 = ((($309)) + 216|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = $311 & 8192;
 $313 = ($312|0)!=(0);
 do {
  if ($313) {
   label = 47;
  } else {
   $314 = $1;
   $315 = ((($314)) + 216|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $316 & 6291456;
   $318 = ($317|0)!=(0);
   if ($318) {
    $319 = $1;
    $320 = ((($319)) + 792|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (_png_gamma_significant($321)|0);
    $323 = ($322|0)!=(0);
    if ($323) {
     label = 47;
     break;
    }
    $324 = $1;
    $325 = ((($324)) + 480|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = (_png_gamma_significant($326)|0);
    $328 = ($327|0)!=(0);
    if ($328) {
     label = 47;
     break;
    }
   }
   $329 = $1;
   $330 = ((($329)) + 216|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = $331 & 128;
   $333 = ($332|0)!=(0);
   if ($333) {
    $334 = $1;
    $335 = ((($334)) + 792|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = (_png_gamma_significant($336)|0);
    $338 = ($337|0)!=(0);
    if ($338) {
     label = 47;
     break;
    }
    $339 = $1;
    $340 = ((($339)) + 480|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = (_png_gamma_significant($341)|0);
    $343 = ($342|0)!=(0);
    if ($343) {
     label = 47;
     break;
    }
    $344 = $1;
    $345 = ((($344)) + 438|0);
    $346 = HEAP8[$345>>0]|0;
    $347 = $346&255;
    $348 = ($347|0)==(3);
    if ($348) {
     $349 = $1;
     $350 = ((($349)) + 440|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = (_png_gamma_significant($351)|0);
     $353 = ($352|0)!=(0);
     if ($353) {
      label = 47;
      break;
     }
    }
   }
   $354 = $1;
   $355 = ((($354)) + 216|0);
   $356 = HEAP32[$355>>2]|0;
   $357 = $356 & 8388608;
   $358 = ($357|0)!=(0);
   if ($358) {
    $359 = $1;
    $360 = ((($359)) + 480|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = (_png_gamma_significant($361)|0);
    $363 = ($362|0)!=(0);
    if ($363) {
     label = 47;
     break;
    }
   }
   $1089 = $1;
   $1090 = ((($1089)) + 216|0);
   $1091 = HEAP32[$1090>>2]|0;
   $1092 = $1091 & 128;
   $1093 = ($1092|0)!=(0);
   if ($1093) {
    $1094 = $1;
    $1095 = ((($1094)) + 427|0);
    $1096 = HEAP8[$1095>>0]|0;
    $1097 = $1096&255;
    $1098 = ($1097|0)==(3);
    if ($1098) {
     $1099 = $1;
     $1100 = ((($1099)) + 420|0);
     $1101 = HEAP16[$1100>>1]|0;
     $1102 = $1101&65535;
     $23 = $1102;
     $1103 = $1;
     $1104 = ((($1103)) + 408|0);
     $1105 = HEAP32[$1104>>2]|0;
     $25 = $1105;
     $1106 = $1;
     $1107 = ((($1106)) + 444|0);
     $1108 = ((($1107)) + 2|0);
     $1109 = HEAP16[$1108>>1]|0;
     $1110 = $1109&255;
     HEAP8[$24>>0] = $1110;
     $1111 = $1;
     $1112 = ((($1111)) + 444|0);
     $1113 = ((($1112)) + 4|0);
     $1114 = HEAP16[$1113>>1]|0;
     $1115 = $1114&255;
     $1116 = ((($24)) + 1|0);
     HEAP8[$1116>>0] = $1115;
     $1117 = $1;
     $1118 = ((($1117)) + 444|0);
     $1119 = ((($1118)) + 6|0);
     $1120 = HEAP16[$1119>>1]|0;
     $1121 = $1120&255;
     $1122 = ((($24)) + 2|0);
     HEAP8[$1122>>0] = $1121;
     $22 = 0;
     while(1) {
      $1123 = $22;
      $1124 = $23;
      $1125 = ($1123|0)<($1124|0);
      $1126 = $1;
      if (!($1125)) {
       break;
      }
      $1127 = ((($1126)) + 520|0);
      $1128 = HEAP32[$1127>>2]|0;
      $1129 = $22;
      $1130 = (($1128) + ($1129)|0);
      $1131 = HEAP8[$1130>>0]|0;
      $1132 = $1131&255;
      $1133 = ($1132|0)==(0);
      if ($1133) {
       $1134 = $25;
       $1135 = $22;
       $1136 = (($1134) + (($1135*3)|0)|0);
       ;HEAP8[$1136>>0]=HEAP8[$24>>0]|0;HEAP8[$1136+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$1136+2>>0]=HEAP8[$24+2>>0]|0;
      } else {
       $1137 = $1;
       $1138 = ((($1137)) + 520|0);
       $1139 = HEAP32[$1138>>2]|0;
       $1140 = $22;
       $1141 = (($1139) + ($1140)|0);
       $1142 = HEAP8[$1141>>0]|0;
       $1143 = $1142&255;
       $1144 = ($1143|0)!=(255);
       if ($1144) {
        $1145 = $25;
        $1146 = $22;
        $1147 = (($1145) + (($1146*3)|0)|0);
        $1148 = HEAP8[$1147>>0]|0;
        $1149 = $1148&255;
        $1150 = $1149&65535;
        $1151 = $1;
        $1152 = ((($1151)) + 520|0);
        $1153 = HEAP32[$1152>>2]|0;
        $1154 = $22;
        $1155 = (($1153) + ($1154)|0);
        $1156 = HEAP8[$1155>>0]|0;
        $1157 = $1156&255;
        $1158 = $1157&65535;
        $1159 = Math_imul($1150, $1158)|0;
        $1160 = HEAP8[$24>>0]|0;
        $1161 = $1160&255;
        $1162 = $1161&65535;
        $1163 = $1;
        $1164 = ((($1163)) + 520|0);
        $1165 = HEAP32[$1164>>2]|0;
        $1166 = $22;
        $1167 = (($1165) + ($1166)|0);
        $1168 = HEAP8[$1167>>0]|0;
        $1169 = $1168&255;
        $1170 = $1169&65535;
        $1171 = (255 - ($1170))|0;
        $1172 = $1171&65535;
        $1173 = $1172&65535;
        $1174 = Math_imul($1162, $1173)|0;
        $1175 = (($1159) + ($1174))|0;
        $1176 = (($1175) + 128)|0;
        $1177 = $1176&65535;
        $26 = $1177;
        $1178 = $26;
        $1179 = $1178&65535;
        $1180 = $26;
        $1181 = $1180&65535;
        $1182 = $1181 >> 8;
        $1183 = (($1179) + ($1182))|0;
        $1184 = $1183 >> 8;
        $1185 = $1184 & 255;
        $1186 = $1185&255;
        $1187 = $25;
        $1188 = $22;
        $1189 = (($1187) + (($1188*3)|0)|0);
        HEAP8[$1189>>0] = $1186;
        $1190 = $25;
        $1191 = $22;
        $1192 = (($1190) + (($1191*3)|0)|0);
        $1193 = ((($1192)) + 1|0);
        $1194 = HEAP8[$1193>>0]|0;
        $1195 = $1194&255;
        $1196 = $1195&65535;
        $1197 = $1;
        $1198 = ((($1197)) + 520|0);
        $1199 = HEAP32[$1198>>2]|0;
        $1200 = $22;
        $1201 = (($1199) + ($1200)|0);
        $1202 = HEAP8[$1201>>0]|0;
        $1203 = $1202&255;
        $1204 = $1203&65535;
        $1205 = Math_imul($1196, $1204)|0;
        $1206 = ((($24)) + 1|0);
        $1207 = HEAP8[$1206>>0]|0;
        $1208 = $1207&255;
        $1209 = $1208&65535;
        $1210 = $1;
        $1211 = ((($1210)) + 520|0);
        $1212 = HEAP32[$1211>>2]|0;
        $1213 = $22;
        $1214 = (($1212) + ($1213)|0);
        $1215 = HEAP8[$1214>>0]|0;
        $1216 = $1215&255;
        $1217 = $1216&65535;
        $1218 = (255 - ($1217))|0;
        $1219 = $1218&65535;
        $1220 = $1219&65535;
        $1221 = Math_imul($1209, $1220)|0;
        $1222 = (($1205) + ($1221))|0;
        $1223 = (($1222) + 128)|0;
        $1224 = $1223&65535;
        $27 = $1224;
        $1225 = $27;
        $1226 = $1225&65535;
        $1227 = $27;
        $1228 = $1227&65535;
        $1229 = $1228 >> 8;
        $1230 = (($1226) + ($1229))|0;
        $1231 = $1230 >> 8;
        $1232 = $1231 & 255;
        $1233 = $1232&255;
        $1234 = $25;
        $1235 = $22;
        $1236 = (($1234) + (($1235*3)|0)|0);
        $1237 = ((($1236)) + 1|0);
        HEAP8[$1237>>0] = $1233;
        $1238 = $25;
        $1239 = $22;
        $1240 = (($1238) + (($1239*3)|0)|0);
        $1241 = ((($1240)) + 2|0);
        $1242 = HEAP8[$1241>>0]|0;
        $1243 = $1242&255;
        $1244 = $1243&65535;
        $1245 = $1;
        $1246 = ((($1245)) + 520|0);
        $1247 = HEAP32[$1246>>2]|0;
        $1248 = $22;
        $1249 = (($1247) + ($1248)|0);
        $1250 = HEAP8[$1249>>0]|0;
        $1251 = $1250&255;
        $1252 = $1251&65535;
        $1253 = Math_imul($1244, $1252)|0;
        $1254 = ((($24)) + 2|0);
        $1255 = HEAP8[$1254>>0]|0;
        $1256 = $1255&255;
        $1257 = $1256&65535;
        $1258 = $1;
        $1259 = ((($1258)) + 520|0);
        $1260 = HEAP32[$1259>>2]|0;
        $1261 = $22;
        $1262 = (($1260) + ($1261)|0);
        $1263 = HEAP8[$1262>>0]|0;
        $1264 = $1263&255;
        $1265 = $1264&65535;
        $1266 = (255 - ($1265))|0;
        $1267 = $1266&65535;
        $1268 = $1267&65535;
        $1269 = Math_imul($1257, $1268)|0;
        $1270 = (($1253) + ($1269))|0;
        $1271 = (($1270) + 128)|0;
        $1272 = $1271&65535;
        $28 = $1272;
        $1273 = $28;
        $1274 = $1273&65535;
        $1275 = $28;
        $1276 = $1275&65535;
        $1277 = $1276 >> 8;
        $1278 = (($1274) + ($1277))|0;
        $1279 = $1278 >> 8;
        $1280 = $1279 & 255;
        $1281 = $1280&255;
        $1282 = $25;
        $1283 = $22;
        $1284 = (($1282) + (($1283*3)|0)|0);
        $1285 = ((($1284)) + 2|0);
        HEAP8[$1285>>0] = $1281;
       }
      }
      $1286 = $22;
      $1287 = (($1286) + 1)|0;
      $22 = $1287;
     }
     $1288 = ((($1126)) + 216|0);
     $1289 = HEAP32[$1288>>2]|0;
     $1290 = $1289 & -129;
     HEAP32[$1288>>2] = $1290;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 47) {
   $364 = $1;
   $365 = $1;
   $366 = ((($365)) + 428|0);
   $367 = HEAP8[$366>>0]|0;
   $368 = $367&255;
   _png_build_gamma_table($364,$368);
   $369 = $1;
   $370 = ((($369)) + 216|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = $371 & 128;
   $373 = ($372|0)!=(0);
   $374 = $1;
   if (!($373)) {
    $1017 = ((($374)) + 427|0);
    $1018 = HEAP8[$1017>>0]|0;
    $1019 = $1018&255;
    $1020 = ($1019|0)==(3);
    if (!($1020)) {
     break;
    }
    $1021 = $1;
    $1022 = ((($1021)) + 216|0);
    $1023 = HEAP32[$1022>>2]|0;
    $1024 = $1023 & 4096;
    $1025 = ($1024|0)==(0);
    if (!($1025)) {
     $1026 = $1;
     $1027 = ((($1026)) + 216|0);
     $1028 = HEAP32[$1027>>2]|0;
     $1029 = $1028 & 6291456;
     $1030 = ($1029|0)==(0);
     if (!($1030)) {
      break;
     }
    }
    $1031 = $1;
    $1032 = ((($1031)) + 408|0);
    $1033 = HEAP32[$1032>>2]|0;
    $19 = $1033;
    $1034 = $1;
    $1035 = ((($1034)) + 412|0);
    $1036 = HEAP16[$1035>>1]|0;
    $1037 = $1036&65535;
    $20 = $1037;
    $21 = 0;
    while(1) {
     $1038 = $21;
     $1039 = $20;
     $1040 = ($1038|0)<($1039|0);
     $1041 = $1;
     if (!($1040)) {
      break;
     }
     $1042 = ((($1041)) + 484|0);
     $1043 = HEAP32[$1042>>2]|0;
     $1044 = $19;
     $1045 = $21;
     $1046 = (($1044) + (($1045*3)|0)|0);
     $1047 = HEAP8[$1046>>0]|0;
     $1048 = $1047&255;
     $1049 = (($1043) + ($1048)|0);
     $1050 = HEAP8[$1049>>0]|0;
     $1051 = $19;
     $1052 = $21;
     $1053 = (($1051) + (($1052*3)|0)|0);
     HEAP8[$1053>>0] = $1050;
     $1054 = $1;
     $1055 = ((($1054)) + 484|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = $19;
     $1058 = $21;
     $1059 = (($1057) + (($1058*3)|0)|0);
     $1060 = ((($1059)) + 1|0);
     $1061 = HEAP8[$1060>>0]|0;
     $1062 = $1061&255;
     $1063 = (($1056) + ($1062)|0);
     $1064 = HEAP8[$1063>>0]|0;
     $1065 = $19;
     $1066 = $21;
     $1067 = (($1065) + (($1066*3)|0)|0);
     $1068 = ((($1067)) + 1|0);
     HEAP8[$1068>>0] = $1064;
     $1069 = $1;
     $1070 = ((($1069)) + 484|0);
     $1071 = HEAP32[$1070>>2]|0;
     $1072 = $19;
     $1073 = $21;
     $1074 = (($1072) + (($1073*3)|0)|0);
     $1075 = ((($1074)) + 2|0);
     $1076 = HEAP8[$1075>>0]|0;
     $1077 = $1076&255;
     $1078 = (($1071) + ($1077)|0);
     $1079 = HEAP8[$1078>>0]|0;
     $1080 = $19;
     $1081 = $21;
     $1082 = (($1080) + (($1081*3)|0)|0);
     $1083 = ((($1082)) + 2|0);
     HEAP8[$1083>>0] = $1079;
     $1084 = $21;
     $1085 = (($1084) + 1)|0;
     $21 = $1085;
    }
    $1086 = ((($1041)) + 216|0);
    $1087 = HEAP32[$1086>>2]|0;
    $1088 = $1087 & -8193;
    HEAP32[$1086>>2] = $1088;
    break;
   }
   $375 = ((($374)) + 216|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = $376 & 6291456;
   $378 = ($377|0)!=(0);
   if ($378) {
    $379 = $1;
    _png_warning($379,15151);
   }
   $380 = $1;
   $381 = ((($380)) + 427|0);
   $382 = HEAP8[$381>>0]|0;
   $383 = $382&255;
   $384 = ($383|0)==(3);
   $385 = $384&1;
   $386 = ($385|0)!=(0);
   if (!($386)) {
    $17 = 100000;
    $18 = 100000;
    $826 = $1;
    $827 = ((($826)) + 438|0);
    $828 = HEAP8[$827>>0]|0;
    $829 = $828&255;
    switch ($829|0) {
    case 1:  {
     $830 = $1;
     $831 = ((($830)) + 480|0);
     $832 = HEAP32[$831>>2]|0;
     $17 = $832;
     break;
    }
    case 2:  {
     $833 = $1;
     $834 = ((($833)) + 792|0);
     $835 = HEAP32[$834>>2]|0;
     $836 = (_png_reciprocal($835)|0);
     $17 = $836;
     $837 = $1;
     $838 = ((($837)) + 792|0);
     $839 = HEAP32[$838>>2]|0;
     $840 = $1;
     $841 = ((($840)) + 480|0);
     $842 = HEAP32[$841>>2]|0;
     $843 = (_png_reciprocal2($839,$842)|0);
     $18 = $843;
     break;
    }
    case 3:  {
     $844 = $1;
     $845 = ((($844)) + 440|0);
     $846 = HEAP32[$845>>2]|0;
     $847 = (_png_reciprocal($846)|0);
     $17 = $847;
     $848 = $1;
     $849 = ((($848)) + 440|0);
     $850 = HEAP32[$849>>2]|0;
     $851 = $1;
     $852 = ((($851)) + 480|0);
     $853 = HEAP32[$852>>2]|0;
     $854 = (_png_reciprocal2($850,$853)|0);
     $18 = $854;
     break;
    }
    default: {
     $855 = $1;
     _png_error($855,15204);
     // unreachable;
    }
    }
    $856 = $17;
    $857 = (_png_gamma_significant($856)|0);
    $16 = $857;
    $858 = $18;
    $859 = (_png_gamma_significant($858)|0);
    $15 = $859;
    $860 = $16;
    $861 = ($860|0)!=(0);
    if ($861) {
     $862 = $1;
     $863 = $1;
     $864 = ((($863)) + 444|0);
     $865 = ((($864)) + 8|0);
     $866 = HEAP16[$865>>1]|0;
     $867 = $866&65535;
     $868 = $17;
     $869 = (_png_gamma_correct($862,$867,$868)|0);
     $870 = $1;
     $871 = ((($870)) + 454|0);
     $872 = ((($871)) + 8|0);
     HEAP16[$872>>1] = $869;
    }
    $873 = $15;
    $874 = ($873|0)!=(0);
    if ($874) {
     $875 = $1;
     $876 = $1;
     $877 = ((($876)) + 444|0);
     $878 = ((($877)) + 8|0);
     $879 = HEAP16[$878>>1]|0;
     $880 = $879&65535;
     $881 = $18;
     $882 = (_png_gamma_correct($875,$880,$881)|0);
     $883 = $1;
     $884 = ((($883)) + 444|0);
     $885 = ((($884)) + 8|0);
     HEAP16[$885>>1] = $882;
    }
    $886 = $1;
    $887 = ((($886)) + 444|0);
    $888 = ((($887)) + 2|0);
    $889 = HEAP16[$888>>1]|0;
    $890 = $889&65535;
    $891 = $1;
    $892 = ((($891)) + 444|0);
    $893 = ((($892)) + 4|0);
    $894 = HEAP16[$893>>1]|0;
    $895 = $894&65535;
    $896 = ($890|0)!=($895|0);
    if ($896) {
     label = 86;
    } else {
     $897 = $1;
     $898 = ((($897)) + 444|0);
     $899 = ((($898)) + 2|0);
     $900 = HEAP16[$899>>1]|0;
     $901 = $900&65535;
     $902 = $1;
     $903 = ((($902)) + 444|0);
     $904 = ((($903)) + 6|0);
     $905 = HEAP16[$904>>1]|0;
     $906 = $905&65535;
     $907 = ($901|0)!=($906|0);
     if ($907) {
      label = 86;
     } else {
      $908 = $1;
      $909 = ((($908)) + 444|0);
      $910 = ((($909)) + 2|0);
      $911 = HEAP16[$910>>1]|0;
      $912 = $911&65535;
      $913 = $1;
      $914 = ((($913)) + 444|0);
      $915 = ((($914)) + 8|0);
      $916 = HEAP16[$915>>1]|0;
      $917 = $916&65535;
      $918 = ($912|0)!=($917|0);
      if ($918) {
       label = 86;
      } else {
       $989 = $1;
       $990 = ((($989)) + 454|0);
       $991 = ((($990)) + 8|0);
       $992 = HEAP16[$991>>1]|0;
       $993 = $1;
       $994 = ((($993)) + 454|0);
       $995 = ((($994)) + 6|0);
       HEAP16[$995>>1] = $992;
       $996 = $1;
       $997 = ((($996)) + 454|0);
       $998 = ((($997)) + 4|0);
       HEAP16[$998>>1] = $992;
       $999 = $1;
       $1000 = ((($999)) + 454|0);
       $1001 = ((($1000)) + 2|0);
       HEAP16[$1001>>1] = $992;
       $1002 = $1;
       $1003 = ((($1002)) + 444|0);
       $1004 = ((($1003)) + 8|0);
       $1005 = HEAP16[$1004>>1]|0;
       $1006 = $1;
       $1007 = ((($1006)) + 444|0);
       $1008 = ((($1007)) + 6|0);
       HEAP16[$1008>>1] = $1005;
       $1009 = $1;
       $1010 = ((($1009)) + 444|0);
       $1011 = ((($1010)) + 4|0);
       HEAP16[$1011>>1] = $1005;
       $1012 = $1;
       $1013 = ((($1012)) + 444|0);
       $1014 = ((($1013)) + 2|0);
       HEAP16[$1014>>1] = $1005;
      }
     }
    }
    if ((label|0) == 86) {
     $919 = $16;
     $920 = ($919|0)!=(0);
     if ($920) {
      $921 = $1;
      $922 = $1;
      $923 = ((($922)) + 444|0);
      $924 = ((($923)) + 2|0);
      $925 = HEAP16[$924>>1]|0;
      $926 = $925&65535;
      $927 = $17;
      $928 = (_png_gamma_correct($921,$926,$927)|0);
      $929 = $1;
      $930 = ((($929)) + 454|0);
      $931 = ((($930)) + 2|0);
      HEAP16[$931>>1] = $928;
      $932 = $1;
      $933 = $1;
      $934 = ((($933)) + 444|0);
      $935 = ((($934)) + 4|0);
      $936 = HEAP16[$935>>1]|0;
      $937 = $936&65535;
      $938 = $17;
      $939 = (_png_gamma_correct($932,$937,$938)|0);
      $940 = $1;
      $941 = ((($940)) + 454|0);
      $942 = ((($941)) + 4|0);
      HEAP16[$942>>1] = $939;
      $943 = $1;
      $944 = $1;
      $945 = ((($944)) + 444|0);
      $946 = ((($945)) + 6|0);
      $947 = HEAP16[$946>>1]|0;
      $948 = $947&65535;
      $949 = $17;
      $950 = (_png_gamma_correct($943,$948,$949)|0);
      $951 = $1;
      $952 = ((($951)) + 454|0);
      $953 = ((($952)) + 6|0);
      HEAP16[$953>>1] = $950;
     }
     $954 = $15;
     $955 = ($954|0)!=(0);
     if ($955) {
      $956 = $1;
      $957 = $1;
      $958 = ((($957)) + 444|0);
      $959 = ((($958)) + 2|0);
      $960 = HEAP16[$959>>1]|0;
      $961 = $960&65535;
      $962 = $18;
      $963 = (_png_gamma_correct($956,$961,$962)|0);
      $964 = $1;
      $965 = ((($964)) + 444|0);
      $966 = ((($965)) + 2|0);
      HEAP16[$966>>1] = $963;
      $967 = $1;
      $968 = $1;
      $969 = ((($968)) + 444|0);
      $970 = ((($969)) + 4|0);
      $971 = HEAP16[$970>>1]|0;
      $972 = $971&65535;
      $973 = $18;
      $974 = (_png_gamma_correct($967,$972,$973)|0);
      $975 = $1;
      $976 = ((($975)) + 444|0);
      $977 = ((($976)) + 4|0);
      HEAP16[$977>>1] = $974;
      $978 = $1;
      $979 = $1;
      $980 = ((($979)) + 444|0);
      $981 = ((($980)) + 6|0);
      $982 = HEAP16[$981>>1]|0;
      $983 = $982&65535;
      $984 = $18;
      $985 = (_png_gamma_correct($978,$983,$984)|0);
      $986 = $1;
      $987 = ((($986)) + 444|0);
      $988 = ((($987)) + 6|0);
      HEAP16[$988>>1] = $985;
     }
    }
    $1015 = $1;
    $1016 = ((($1015)) + 438|0);
    HEAP8[$1016>>0] = 1;
    break;
   }
   $387 = $1;
   $388 = ((($387)) + 408|0);
   $389 = HEAP32[$388>>2]|0;
   $5 = $389;
   $390 = $1;
   $391 = ((($390)) + 412|0);
   $392 = HEAP16[$391>>1]|0;
   $393 = $392&65535;
   $6 = $393;
   $394 = $1;
   $395 = ((($394)) + 438|0);
   $396 = HEAP8[$395>>0]|0;
   $397 = $396&255;
   $398 = ($397|0)==(2);
   $399 = $1;
   do {
    if ($398) {
     $400 = ((($399)) + 484|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = $1;
     $403 = ((($402)) + 444|0);
     $404 = ((($403)) + 2|0);
     $405 = HEAP16[$404>>1]|0;
     $406 = $405&65535;
     $407 = (($401) + ($406)|0);
     $408 = HEAP8[$407>>0]|0;
     HEAP8[$3>>0] = $408;
     $409 = $1;
     $410 = ((($409)) + 484|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = $1;
     $413 = ((($412)) + 444|0);
     $414 = ((($413)) + 4|0);
     $415 = HEAP16[$414>>1]|0;
     $416 = $415&65535;
     $417 = (($411) + ($416)|0);
     $418 = HEAP8[$417>>0]|0;
     $419 = ((($3)) + 1|0);
     HEAP8[$419>>0] = $418;
     $420 = $1;
     $421 = ((($420)) + 484|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = $1;
     $424 = ((($423)) + 444|0);
     $425 = ((($424)) + 6|0);
     $426 = HEAP16[$425>>1]|0;
     $427 = $426&65535;
     $428 = (($422) + ($427)|0);
     $429 = HEAP8[$428>>0]|0;
     $430 = ((($3)) + 2|0);
     HEAP8[$430>>0] = $429;
     $431 = $1;
     $432 = ((($431)) + 496|0);
     $433 = HEAP32[$432>>2]|0;
     $434 = $1;
     $435 = ((($434)) + 444|0);
     $436 = ((($435)) + 2|0);
     $437 = HEAP16[$436>>1]|0;
     $438 = $437&65535;
     $439 = (($433) + ($438)|0);
     $440 = HEAP8[$439>>0]|0;
     HEAP8[$4>>0] = $440;
     $441 = $1;
     $442 = ((($441)) + 496|0);
     $443 = HEAP32[$442>>2]|0;
     $444 = $1;
     $445 = ((($444)) + 444|0);
     $446 = ((($445)) + 4|0);
     $447 = HEAP16[$446>>1]|0;
     $448 = $447&65535;
     $449 = (($443) + ($448)|0);
     $450 = HEAP8[$449>>0]|0;
     $451 = ((($4)) + 1|0);
     HEAP8[$451>>0] = $450;
     $452 = $1;
     $453 = ((($452)) + 496|0);
     $454 = HEAP32[$453>>2]|0;
     $455 = $1;
     $456 = ((($455)) + 444|0);
     $457 = ((($456)) + 6|0);
     $458 = HEAP16[$457>>1]|0;
     $459 = $458&65535;
     $460 = (($454) + ($459)|0);
     $461 = HEAP8[$460>>0]|0;
     $$sink3$sink = $461;
    } else {
     $462 = ((($399)) + 438|0);
     $463 = HEAP8[$462>>0]|0;
     $464 = $463&255;
     switch ($464|0) {
     case 1:  {
      $465 = $1;
      $466 = ((($465)) + 480|0);
      $467 = HEAP32[$466>>2]|0;
      $8 = $467;
      $9 = 100000;
      break;
     }
     case 2:  {
      $468 = $1;
      $469 = ((($468)) + 792|0);
      $470 = HEAP32[$469>>2]|0;
      $471 = (_png_reciprocal($470)|0);
      $8 = $471;
      $472 = $1;
      $473 = ((($472)) + 792|0);
      $474 = HEAP32[$473>>2]|0;
      $475 = $1;
      $476 = ((($475)) + 480|0);
      $477 = HEAP32[$476>>2]|0;
      $478 = (_png_reciprocal2($474,$477)|0);
      $9 = $478;
      break;
     }
     case 3:  {
      $479 = $1;
      $480 = ((($479)) + 440|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = (_png_reciprocal($481)|0);
      $8 = $482;
      $483 = $1;
      $484 = ((($483)) + 440|0);
      $485 = HEAP32[$484>>2]|0;
      $486 = $1;
      $487 = ((($486)) + 480|0);
      $488 = HEAP32[$487>>2]|0;
      $489 = (_png_reciprocal2($485,$488)|0);
      $9 = $489;
      break;
     }
     default: {
      $8 = 100000;
      $9 = 100000;
     }
     }
     $490 = $9;
     $491 = (_png_gamma_significant($490)|0);
     $492 = ($491|0)!=(0);
     $493 = $1;
     $494 = ((($493)) + 444|0);
     $495 = ((($494)) + 2|0);
     $496 = HEAP16[$495>>1]|0;
     if ($492) {
      $497 = $496&65535;
      $498 = $9;
      $499 = (_png_gamma_8bit_correct($497,$498)|0);
      HEAP8[$3>>0] = $499;
      $500 = $1;
      $501 = ((($500)) + 444|0);
      $502 = ((($501)) + 4|0);
      $503 = HEAP16[$502>>1]|0;
      $504 = $503&65535;
      $505 = $9;
      $506 = (_png_gamma_8bit_correct($504,$505)|0);
      $507 = ((($3)) + 1|0);
      HEAP8[$507>>0] = $506;
      $508 = $1;
      $509 = ((($508)) + 444|0);
      $510 = ((($509)) + 6|0);
      $511 = HEAP16[$510>>1]|0;
      $512 = $511&65535;
      $513 = $9;
      $514 = (_png_gamma_8bit_correct($512,$513)|0);
      $$sink1 = $514;
     } else {
      $515 = $496&255;
      HEAP8[$3>>0] = $515;
      $516 = $1;
      $517 = ((($516)) + 444|0);
      $518 = ((($517)) + 4|0);
      $519 = HEAP16[$518>>1]|0;
      $520 = $519&255;
      $521 = ((($3)) + 1|0);
      HEAP8[$521>>0] = $520;
      $522 = $1;
      $523 = ((($522)) + 444|0);
      $524 = ((($523)) + 6|0);
      $525 = HEAP16[$524>>1]|0;
      $526 = $525&255;
      $$sink1 = $526;
     }
     $527 = ((($3)) + 2|0);
     HEAP8[$527>>0] = $$sink1;
     $528 = $8;
     $529 = (_png_gamma_significant($528)|0);
     $530 = ($529|0)!=(0);
     $531 = $1;
     $532 = ((($531)) + 444|0);
     $533 = ((($532)) + 2|0);
     $534 = HEAP16[$533>>1]|0;
     if ($530) {
      $535 = $534&65535;
      $536 = $8;
      $537 = (_png_gamma_8bit_correct($535,$536)|0);
      HEAP8[$4>>0] = $537;
      $538 = $1;
      $539 = ((($538)) + 444|0);
      $540 = ((($539)) + 4|0);
      $541 = HEAP16[$540>>1]|0;
      $542 = $541&65535;
      $543 = $8;
      $544 = (_png_gamma_8bit_correct($542,$543)|0);
      $545 = ((($4)) + 1|0);
      HEAP8[$545>>0] = $544;
      $546 = $1;
      $547 = ((($546)) + 444|0);
      $548 = ((($547)) + 6|0);
      $549 = HEAP16[$548>>1]|0;
      $550 = $549&65535;
      $551 = $8;
      $552 = (_png_gamma_8bit_correct($550,$551)|0);
      $$sink3$sink = $552;
      break;
     } else {
      $553 = $534&255;
      HEAP8[$4>>0] = $553;
      $554 = $1;
      $555 = ((($554)) + 444|0);
      $556 = ((($555)) + 4|0);
      $557 = HEAP16[$556>>1]|0;
      $558 = $557&255;
      $559 = ((($4)) + 1|0);
      HEAP8[$559>>0] = $558;
      $560 = $1;
      $561 = ((($560)) + 444|0);
      $562 = ((($561)) + 6|0);
      $563 = HEAP16[$562>>1]|0;
      $564 = $563&255;
      $$sink3$sink = $564;
      break;
     }
    }
   } while(0);
   $565 = ((($4)) + 2|0);
   HEAP8[$565>>0] = $$sink3$sink;
   $7 = 0;
   while(1) {
    $566 = $7;
    $567 = $6;
    $568 = ($566|0)<($567|0);
    if (!($568)) {
     break;
    }
    $569 = $7;
    $570 = $1;
    $571 = ((($570)) + 420|0);
    $572 = HEAP16[$571>>1]|0;
    $573 = $572&65535;
    $574 = ($569|0)<($573|0);
    do {
     if ($574) {
      $575 = $1;
      $576 = ((($575)) + 520|0);
      $577 = HEAP32[$576>>2]|0;
      $578 = $7;
      $579 = (($577) + ($578)|0);
      $580 = HEAP8[$579>>0]|0;
      $581 = $580&255;
      $582 = ($581|0)!=(255);
      if ($582) {
       $583 = $1;
       $584 = ((($583)) + 520|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = $7;
       $587 = (($585) + ($586)|0);
       $588 = HEAP8[$587>>0]|0;
       $589 = $588&255;
       $590 = ($589|0)==(0);
       if ($590) {
        $591 = $5;
        $592 = $7;
        $593 = (($591) + (($592*3)|0)|0);
        ;HEAP8[$593>>0]=HEAP8[$3>>0]|0;HEAP8[$593+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$593+2>>0]=HEAP8[$3+2>>0]|0;
        break;
       } else {
        $594 = $1;
        $595 = ((($594)) + 496|0);
        $596 = HEAP32[$595>>2]|0;
        $597 = $5;
        $598 = $7;
        $599 = (($597) + (($598*3)|0)|0);
        $600 = HEAP8[$599>>0]|0;
        $601 = $600&255;
        $602 = (($596) + ($601)|0);
        $603 = HEAP8[$602>>0]|0;
        $10 = $603;
        $604 = $10;
        $605 = $604&255;
        $606 = $605&65535;
        $607 = $1;
        $608 = ((($607)) + 520|0);
        $609 = HEAP32[$608>>2]|0;
        $610 = $7;
        $611 = (($609) + ($610)|0);
        $612 = HEAP8[$611>>0]|0;
        $613 = $612&255;
        $614 = $613&65535;
        $615 = Math_imul($606, $614)|0;
        $616 = HEAP8[$4>>0]|0;
        $617 = $616&255;
        $618 = $617&65535;
        $619 = $1;
        $620 = ((($619)) + 520|0);
        $621 = HEAP32[$620>>2]|0;
        $622 = $7;
        $623 = (($621) + ($622)|0);
        $624 = HEAP8[$623>>0]|0;
        $625 = $624&255;
        $626 = $625&65535;
        $627 = (255 - ($626))|0;
        $628 = $627&65535;
        $629 = $628&65535;
        $630 = Math_imul($618, $629)|0;
        $631 = (($615) + ($630))|0;
        $632 = (($631) + 128)|0;
        $633 = $632&65535;
        $12 = $633;
        $634 = $12;
        $635 = $634&65535;
        $636 = $12;
        $637 = $636&65535;
        $638 = $637 >> 8;
        $639 = (($635) + ($638))|0;
        $640 = $639 >> 8;
        $641 = $640 & 255;
        $642 = $641&255;
        $11 = $642;
        $643 = $1;
        $644 = ((($643)) + 492|0);
        $645 = HEAP32[$644>>2]|0;
        $646 = $11;
        $647 = $646&255;
        $648 = (($645) + ($647)|0);
        $649 = HEAP8[$648>>0]|0;
        $650 = $5;
        $651 = $7;
        $652 = (($650) + (($651*3)|0)|0);
        HEAP8[$652>>0] = $649;
        $653 = $1;
        $654 = ((($653)) + 496|0);
        $655 = HEAP32[$654>>2]|0;
        $656 = $5;
        $657 = $7;
        $658 = (($656) + (($657*3)|0)|0);
        $659 = ((($658)) + 1|0);
        $660 = HEAP8[$659>>0]|0;
        $661 = $660&255;
        $662 = (($655) + ($661)|0);
        $663 = HEAP8[$662>>0]|0;
        $10 = $663;
        $664 = $10;
        $665 = $664&255;
        $666 = $665&65535;
        $667 = $1;
        $668 = ((($667)) + 520|0);
        $669 = HEAP32[$668>>2]|0;
        $670 = $7;
        $671 = (($669) + ($670)|0);
        $672 = HEAP8[$671>>0]|0;
        $673 = $672&255;
        $674 = $673&65535;
        $675 = Math_imul($666, $674)|0;
        $676 = ((($4)) + 1|0);
        $677 = HEAP8[$676>>0]|0;
        $678 = $677&255;
        $679 = $678&65535;
        $680 = $1;
        $681 = ((($680)) + 520|0);
        $682 = HEAP32[$681>>2]|0;
        $683 = $7;
        $684 = (($682) + ($683)|0);
        $685 = HEAP8[$684>>0]|0;
        $686 = $685&255;
        $687 = $686&65535;
        $688 = (255 - ($687))|0;
        $689 = $688&65535;
        $690 = $689&65535;
        $691 = Math_imul($679, $690)|0;
        $692 = (($675) + ($691))|0;
        $693 = (($692) + 128)|0;
        $694 = $693&65535;
        $13 = $694;
        $695 = $13;
        $696 = $695&65535;
        $697 = $13;
        $698 = $697&65535;
        $699 = $698 >> 8;
        $700 = (($696) + ($699))|0;
        $701 = $700 >> 8;
        $702 = $701 & 255;
        $703 = $702&255;
        $11 = $703;
        $704 = $1;
        $705 = ((($704)) + 492|0);
        $706 = HEAP32[$705>>2]|0;
        $707 = $11;
        $708 = $707&255;
        $709 = (($706) + ($708)|0);
        $710 = HEAP8[$709>>0]|0;
        $711 = $5;
        $712 = $7;
        $713 = (($711) + (($712*3)|0)|0);
        $714 = ((($713)) + 1|0);
        HEAP8[$714>>0] = $710;
        $715 = $1;
        $716 = ((($715)) + 496|0);
        $717 = HEAP32[$716>>2]|0;
        $718 = $5;
        $719 = $7;
        $720 = (($718) + (($719*3)|0)|0);
        $721 = ((($720)) + 2|0);
        $722 = HEAP8[$721>>0]|0;
        $723 = $722&255;
        $724 = (($717) + ($723)|0);
        $725 = HEAP8[$724>>0]|0;
        $10 = $725;
        $726 = $10;
        $727 = $726&255;
        $728 = $727&65535;
        $729 = $1;
        $730 = ((($729)) + 520|0);
        $731 = HEAP32[$730>>2]|0;
        $732 = $7;
        $733 = (($731) + ($732)|0);
        $734 = HEAP8[$733>>0]|0;
        $735 = $734&255;
        $736 = $735&65535;
        $737 = Math_imul($728, $736)|0;
        $738 = ((($4)) + 2|0);
        $739 = HEAP8[$738>>0]|0;
        $740 = $739&255;
        $741 = $740&65535;
        $742 = $1;
        $743 = ((($742)) + 520|0);
        $744 = HEAP32[$743>>2]|0;
        $745 = $7;
        $746 = (($744) + ($745)|0);
        $747 = HEAP8[$746>>0]|0;
        $748 = $747&255;
        $749 = $748&65535;
        $750 = (255 - ($749))|0;
        $751 = $750&65535;
        $752 = $751&65535;
        $753 = Math_imul($741, $752)|0;
        $754 = (($737) + ($753))|0;
        $755 = (($754) + 128)|0;
        $756 = $755&65535;
        $14 = $756;
        $757 = $14;
        $758 = $757&65535;
        $759 = $14;
        $760 = $759&65535;
        $761 = $760 >> 8;
        $762 = (($758) + ($761))|0;
        $763 = $762 >> 8;
        $764 = $763 & 255;
        $765 = $764&255;
        $11 = $765;
        $766 = $1;
        $767 = ((($766)) + 492|0);
        $768 = HEAP32[$767>>2]|0;
        $769 = $11;
        $770 = $769&255;
        $771 = (($768) + ($770)|0);
        $772 = HEAP8[$771>>0]|0;
        $773 = $5;
        $774 = $7;
        $775 = (($773) + (($774*3)|0)|0);
        $776 = ((($775)) + 2|0);
        HEAP8[$776>>0] = $772;
        break;
       }
      } else {
       label = 71;
      }
     } else {
      label = 71;
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     $777 = $1;
     $778 = ((($777)) + 484|0);
     $779 = HEAP32[$778>>2]|0;
     $780 = $5;
     $781 = $7;
     $782 = (($780) + (($781*3)|0)|0);
     $783 = HEAP8[$782>>0]|0;
     $784 = $783&255;
     $785 = (($779) + ($784)|0);
     $786 = HEAP8[$785>>0]|0;
     $787 = $5;
     $788 = $7;
     $789 = (($787) + (($788*3)|0)|0);
     HEAP8[$789>>0] = $786;
     $790 = $1;
     $791 = ((($790)) + 484|0);
     $792 = HEAP32[$791>>2]|0;
     $793 = $5;
     $794 = $7;
     $795 = (($793) + (($794*3)|0)|0);
     $796 = ((($795)) + 1|0);
     $797 = HEAP8[$796>>0]|0;
     $798 = $797&255;
     $799 = (($792) + ($798)|0);
     $800 = HEAP8[$799>>0]|0;
     $801 = $5;
     $802 = $7;
     $803 = (($801) + (($802*3)|0)|0);
     $804 = ((($803)) + 1|0);
     HEAP8[$804>>0] = $800;
     $805 = $1;
     $806 = ((($805)) + 484|0);
     $807 = HEAP32[$806>>2]|0;
     $808 = $5;
     $809 = $7;
     $810 = (($808) + (($809*3)|0)|0);
     $811 = ((($810)) + 2|0);
     $812 = HEAP8[$811>>0]|0;
     $813 = $812&255;
     $814 = (($807) + ($813)|0);
     $815 = HEAP8[$814>>0]|0;
     $816 = $5;
     $817 = $7;
     $818 = (($816) + (($817*3)|0)|0);
     $819 = ((($818)) + 2|0);
     HEAP8[$819>>0] = $815;
    }
    $820 = $7;
    $821 = (($820) + 1)|0;
    $7 = $821;
   }
   $822 = $1;
   $823 = ((($822)) + 216|0);
   $824 = HEAP32[$823>>2]|0;
   $825 = $824 & -8321;
   HEAP32[$823>>2] = $825;
  }
 } while(0);
 $1291 = $1;
 $1292 = ((($1291)) + 216|0);
 $1293 = HEAP32[$1292>>2]|0;
 $1294 = $1293 & 8;
 $1295 = ($1294|0)!=(0);
 if (!($1295)) {
  STACKTOP = sp;return;
 }
 $1296 = $1;
 $1297 = ((($1296)) + 216|0);
 $1298 = HEAP32[$1297>>2]|0;
 $1299 = $1298 & 4096;
 $1300 = ($1299|0)==(0);
 if (!($1300)) {
  STACKTOP = sp;return;
 }
 $1301 = $1;
 $1302 = ((($1301)) + 427|0);
 $1303 = HEAP8[$1302>>0]|0;
 $1304 = $1303&255;
 $1305 = ($1304|0)==(3);
 if (!($1305)) {
  STACKTOP = sp;return;
 }
 $1306 = $1;
 $1307 = ((($1306)) + 412|0);
 $1308 = HEAP16[$1307>>1]|0;
 $1309 = $1308&65535;
 $30 = $1309;
 $1310 = $1;
 $1311 = ((($1310)) + 508|0);
 $1312 = HEAP8[$1311>>0]|0;
 $1313 = $1312&255;
 $1314 = (8 - ($1313))|0;
 $31 = $1314;
 $1315 = $1;
 $1316 = ((($1315)) + 216|0);
 $1317 = HEAP32[$1316>>2]|0;
 $1318 = $1317 & -9;
 HEAP32[$1316>>2] = $1318;
 $1319 = $31;
 $1320 = ($1319|0)>(0);
 $1321 = $31;
 $1322 = ($1321|0)<(8);
 $or$cond = $1320 & $1322;
 L154: do {
  if ($or$cond) {
   $29 = 0;
   while(1) {
    $1323 = $29;
    $1324 = $30;
    $1325 = ($1323|0)<($1324|0);
    if (!($1325)) {
     break L154;
    }
    $1326 = $1;
    $1327 = ((($1326)) + 408|0);
    $1328 = HEAP32[$1327>>2]|0;
    $1329 = $29;
    $1330 = (($1328) + (($1329*3)|0)|0);
    $1331 = HEAP8[$1330>>0]|0;
    $1332 = $1331&255;
    $32 = $1332;
    $1333 = $31;
    $1334 = $32;
    $1335 = $1334 >> $1333;
    $32 = $1335;
    $1336 = $32;
    $1337 = $1336&255;
    $1338 = $1;
    $1339 = ((($1338)) + 408|0);
    $1340 = HEAP32[$1339>>2]|0;
    $1341 = $29;
    $1342 = (($1340) + (($1341*3)|0)|0);
    HEAP8[$1342>>0] = $1337;
    $1343 = $29;
    $1344 = (($1343) + 1)|0;
    $29 = $1344;
   }
  }
 } while(0);
 $1345 = $1;
 $1346 = ((($1345)) + 508|0);
 $1347 = ((($1346)) + 1|0);
 $1348 = HEAP8[$1347>>0]|0;
 $1349 = $1348&255;
 $1350 = (8 - ($1349))|0;
 $31 = $1350;
 $1351 = $31;
 $1352 = ($1351|0)>(0);
 $1353 = $31;
 $1354 = ($1353|0)<(8);
 $or$cond8 = $1352 & $1354;
 L160: do {
  if ($or$cond8) {
   $29 = 0;
   while(1) {
    $1355 = $29;
    $1356 = $30;
    $1357 = ($1355|0)<($1356|0);
    if (!($1357)) {
     break L160;
    }
    $1358 = $1;
    $1359 = ((($1358)) + 408|0);
    $1360 = HEAP32[$1359>>2]|0;
    $1361 = $29;
    $1362 = (($1360) + (($1361*3)|0)|0);
    $1363 = ((($1362)) + 1|0);
    $1364 = HEAP8[$1363>>0]|0;
    $1365 = $1364&255;
    $33 = $1365;
    $1366 = $31;
    $1367 = $33;
    $1368 = $1367 >> $1366;
    $33 = $1368;
    $1369 = $33;
    $1370 = $1369&255;
    $1371 = $1;
    $1372 = ((($1371)) + 408|0);
    $1373 = HEAP32[$1372>>2]|0;
    $1374 = $29;
    $1375 = (($1373) + (($1374*3)|0)|0);
    $1376 = ((($1375)) + 1|0);
    HEAP8[$1376>>0] = $1370;
    $1377 = $29;
    $1378 = (($1377) + 1)|0;
    $29 = $1378;
   }
  }
 } while(0);
 $1379 = $1;
 $1380 = ((($1379)) + 508|0);
 $1381 = ((($1380)) + 2|0);
 $1382 = HEAP8[$1381>>0]|0;
 $1383 = $1382&255;
 $1384 = (8 - ($1383))|0;
 $31 = $1384;
 $1385 = $31;
 $1386 = ($1385|0)>(0);
 $1387 = $31;
 $1388 = ($1387|0)<(8);
 $or$cond10 = $1386 & $1388;
 if (!($or$cond10)) {
  STACKTOP = sp;return;
 }
 $29 = 0;
 while(1) {
  $1389 = $29;
  $1390 = $30;
  $1391 = ($1389|0)<($1390|0);
  if (!($1391)) {
   break;
  }
  $1392 = $1;
  $1393 = ((($1392)) + 408|0);
  $1394 = HEAP32[$1393>>2]|0;
  $1395 = $29;
  $1396 = (($1394) + (($1395*3)|0)|0);
  $1397 = ((($1396)) + 2|0);
  $1398 = HEAP8[$1397>>0]|0;
  $1399 = $1398&255;
  $34 = $1399;
  $1400 = $31;
  $1401 = $34;
  $1402 = $1401 >> $1400;
  $34 = $1402;
  $1403 = $34;
  $1404 = $1403&255;
  $1405 = $1;
  $1406 = ((($1405)) + 408|0);
  $1407 = HEAP32[$1406>>2]|0;
  $1408 = $29;
  $1409 = (($1407) + (($1408*3)|0)|0);
  $1410 = ((($1409)) + 2|0);
  HEAP8[$1410>>0] = $1404;
  $1411 = $29;
  $1412 = (($1411) + 1)|0;
  $29 = $1412;
 }
 STACKTOP = sp;return;
}
function _png_gamma_threshold($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_png_muldiv($4,$5,$6,100000)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $13 = 1;
  $12 = $13&1;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = (_png_gamma_significant($9)|0);
 $11 = ($10|0)!=(0);
 $13 = $11;
 $12 = $13&1;
 STACKTOP = sp;return ($12|0);
}
function _png_init_palette_transformations($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $7 = $1;
 $8 = ((($7)) + 420|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10|0)>(0);
 L1: do {
  if ($11) {
   $4 = 0;
   while(1) {
    $12 = $4;
    $13 = $1;
    $14 = ((($13)) + 420|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = $15&65535;
    $17 = ($12|0)<($16|0);
    if (!($17)) {
     break L1;
    }
    $18 = $1;
    $19 = ((($18)) + 520|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $4;
    $22 = (($20) + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($24|0)==(255);
    if (!($25)) {
     $26 = $1;
     $27 = ((($26)) + 520|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $4;
     $30 = (($28) + ($29)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = ($32|0)==(0);
     $3 = 1;
     if (!($33)) {
      break;
     }
    }
    $34 = $4;
    $35 = (($34) + 1)|0;
    $4 = $35;
   }
   $2 = 1;
  }
 } while(0);
 $36 = $2;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = $1;
  $39 = ((($38)) + 216|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 & -8388609;
  HEAP32[$39>>2] = $41;
  $42 = $1;
  $43 = ((($42)) + 212|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 & -8193;
  HEAP32[$43>>2] = $45;
  $46 = $3;
  $47 = ($46|0)==(0);
  if ($47) {
   $48 = $1;
   $49 = ((($48)) + 216|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 & -385;
   HEAP32[$49>>2] = $51;
  }
 }
 $52 = $1;
 $53 = ((($52)) + 216|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 & 256;
 $56 = ($55|0)!=(0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $57 = $1;
 $58 = ((($57)) + 216|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 & 4096;
 $61 = ($60|0)!=(0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $1;
 $63 = ((($62)) + 408|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $1;
 $66 = ((($65)) + 444|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = (($64) + (($68*3)|0)|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $1;
 $73 = ((($72)) + 444|0);
 $74 = ((($73)) + 2|0);
 HEAP16[$74>>1] = $71;
 $75 = $1;
 $76 = ((($75)) + 408|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $1;
 $79 = ((($78)) + 444|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = (($77) + (($81*3)|0)|0);
 $83 = ((($82)) + 1|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = $1;
 $87 = ((($86)) + 444|0);
 $88 = ((($87)) + 4|0);
 HEAP16[$88>>1] = $85;
 $89 = $1;
 $90 = ((($89)) + 408|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $1;
 $93 = ((($92)) + 444|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = (($91) + (($95*3)|0)|0);
 $97 = ((($96)) + 2|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = $1;
 $101 = ((($100)) + 444|0);
 $102 = ((($101)) + 6|0);
 HEAP16[$102>>1] = $99;
 $103 = $1;
 $104 = ((($103)) + 216|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $105 & 524288;
 $107 = ($106|0)!=(0);
 if (!($107)) {
  STACKTOP = sp;return;
 }
 $108 = $1;
 $109 = ((($108)) + 216|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 33554432;
 $112 = ($111|0)==(0);
 if (!($112)) {
  STACKTOP = sp;return;
 }
 $113 = $1;
 $114 = ((($113)) + 420|0);
 $115 = HEAP16[$114>>1]|0;
 $116 = $115&65535;
 $6 = $116;
 $5 = 0;
 while(1) {
  $117 = $5;
  $118 = $6;
  $119 = ($117|0)<($118|0);
  if (!($119)) {
   break;
  }
  $120 = $1;
  $121 = ((($120)) + 520|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $5;
  $124 = (($122) + ($123)|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = (255 - ($126))|0;
  $128 = $127&255;
  $129 = $1;
  $130 = ((($129)) + 520|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $5;
  $133 = (($131) + ($132)|0);
  HEAP8[$133>>0] = $128;
  $134 = $5;
  $135 = (($134) + 1)|0;
  $5 = $135;
 }
 STACKTOP = sp;return;
}
function _png_init_rgb_transformations($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 427|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 4;
 $11 = ($10|0)!=(0);
 $12 = $11&1;
 $2 = $12;
 $13 = $1;
 $14 = ((($13)) + 420|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($16|0)>(0);
 $18 = $17&1;
 $3 = $18;
 $19 = $2;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = $1;
  $22 = ((($21)) + 216|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & -8388609;
  HEAP32[$22>>2] = $24;
  $25 = $1;
  $26 = ((($25)) + 212|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & -8193;
  HEAP32[$26>>2] = $28;
  $29 = $3;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = $1;
   $32 = ((($31)) + 216|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 & -385;
   HEAP32[$32>>2] = $34;
  }
 }
 $35 = $1;
 $36 = ((($35)) + 216|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 256;
 $39 = ($38|0)!=(0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = $1;
 $41 = ((($40)) + 216|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 4096;
 $44 = ($43|0)!=(0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = $1;
 $46 = ((($45)) + 427|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $48 & 2;
 $50 = ($49|0)==(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $1;
 $52 = ((($51)) + 444|0);
 $53 = ((($52)) + 8|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54&65535;
 $4 = $55;
 $56 = $1;
 $57 = ((($56)) + 524|0);
 $58 = ((($57)) + 8|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59&65535;
 $5 = $60;
 $61 = $1;
 $62 = ((($61)) + 428|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 switch ($64|0) {
 case 1:  {
  $65 = $4;
  $66 = ($65*255)|0;
  $4 = $66;
  $67 = $5;
  $68 = ($67*255)|0;
  $5 = $68;
  break;
 }
 case 2:  {
  $69 = $4;
  $70 = ($69*85)|0;
  $4 = $70;
  $71 = $5;
  $72 = ($71*85)|0;
  $5 = $72;
  break;
 }
 case 4:  {
  $73 = $4;
  $74 = ($73*17)|0;
  $4 = $74;
  $75 = $5;
  $76 = ($75*17)|0;
  $5 = $76;
  break;
 }
 default: {
 }
 }
 $77 = $4;
 $78 = $77&65535;
 $79 = $1;
 $80 = ((($79)) + 444|0);
 $81 = ((($80)) + 6|0);
 HEAP16[$81>>1] = $78;
 $82 = $1;
 $83 = ((($82)) + 444|0);
 $84 = ((($83)) + 4|0);
 HEAP16[$84>>1] = $78;
 $85 = $1;
 $86 = ((($85)) + 444|0);
 $87 = ((($86)) + 2|0);
 HEAP16[$87>>1] = $78;
 $88 = $1;
 $89 = ((($88)) + 216|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 33554432;
 $92 = ($91|0)==(0);
 if (!($92)) {
  STACKTOP = sp;return;
 }
 $93 = $5;
 $94 = $93&65535;
 $95 = $1;
 $96 = ((($95)) + 524|0);
 $97 = ((($96)) + 6|0);
 HEAP16[$97>>1] = $94;
 $98 = $1;
 $99 = ((($98)) + 524|0);
 $100 = ((($99)) + 4|0);
 HEAP16[$100>>1] = $94;
 $101 = $1;
 $102 = ((($101)) + 524|0);
 $103 = ((($102)) + 2|0);
 HEAP16[$103>>1] = $94;
 STACKTOP = sp;return;
}
function _png_read_transform_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4096;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = $3;
   $10 = ((($9)) + 25|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = ($12|0)==(3);
   $14 = $2;
   $15 = ((($14)) + 420|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   if ($13) {
    $18 = ($17|0)>(0);
    $19 = $3;
    $20 = ((($19)) + 25|0);
    $$sink = $18 ? 6 : 2;
    HEAP8[$20>>0] = $$sink;
    $21 = $3;
    $22 = ((($21)) + 24|0);
    HEAP8[$22>>0] = 8;
    $23 = $3;
    $24 = ((($23)) + 22|0);
    HEAP16[$24>>1] = 0;
    $25 = $2;
    $26 = ((($25)) + 408|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if (!($28)) {
     break;
    }
    $29 = $2;
    _png_error($29,15234);
    // unreachable;
   }
   $30 = ($17|0)!=(0);
   if ($30) {
    $31 = $2;
    $32 = ((($31)) + 216|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 & 33554432;
    $35 = ($34|0)!=(0);
    if ($35) {
     $36 = $3;
     $37 = ((($36)) + 25|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $39 | 4;
     $41 = $40&255;
     HEAP8[$37>>0] = $41;
    }
   }
   $42 = $3;
   $43 = ((($42)) + 24|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = ($45|0)<(8);
   if ($46) {
    $47 = $3;
    $48 = ((($47)) + 24|0);
    HEAP8[$48>>0] = 8;
   }
   $49 = $3;
   $50 = ((($49)) + 22|0);
   HEAP16[$50>>1] = 0;
  }
 } while(0);
 $51 = $2;
 $52 = ((($51)) + 216|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 & 128;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $3;
  $57 = ((($56)) + 170|0);
  $58 = $2;
  $59 = ((($58)) + 444|0);
  ;HEAP16[$57>>1]=HEAP16[$59>>1]|0;HEAP16[$57+2>>1]=HEAP16[$59+2>>1]|0;HEAP16[$57+4>>1]=HEAP16[$59+4>>1]|0;HEAP16[$57+6>>1]=HEAP16[$59+6>>1]|0;HEAP16[$57+8>>1]=HEAP16[$59+8>>1]|0;
 }
 $60 = $2;
 $61 = ((($60)) + 792|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $3;
 $64 = ((($63)) + 40|0);
 HEAP32[$64>>2] = $62;
 $65 = $3;
 $66 = ((($65)) + 24|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = ($68|0)==(16);
 if ($69) {
  $70 = $2;
  $71 = ((($70)) + 216|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 & 67108864;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $3;
   $76 = ((($75)) + 24|0);
   HEAP8[$76>>0] = 8;
  }
  $77 = $2;
  $78 = ((($77)) + 216|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79 & 1024;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $3;
   $83 = ((($82)) + 24|0);
   HEAP8[$83>>0] = 8;
  }
 }
 $84 = $2;
 $85 = ((($84)) + 216|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 & 16384;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $3;
  $90 = ((($89)) + 25|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 | 2;
  $94 = $93&255;
  $95 = $3;
  $96 = ((($95)) + 25|0);
  HEAP8[$96>>0] = $94;
 }
 $97 = $2;
 $98 = ((($97)) + 216|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 & 6291456;
 $101 = ($100|0)!=(0);
 if ($101) {
  $102 = $3;
  $103 = ((($102)) + 25|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $105 & -3;
  $107 = $106&255;
  $108 = $3;
  $109 = ((($108)) + 25|0);
  HEAP8[$109>>0] = $107;
 }
 $110 = $2;
 $111 = ((($110)) + 216|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 64;
 $114 = ($113|0)!=(0);
 do {
  if ($114) {
   $115 = $3;
   $116 = ((($115)) + 25|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = ($118|0)==(2);
   if (!($119)) {
    $120 = $3;
    $121 = ((($120)) + 25|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122&255;
    $124 = ($123|0)==(6);
    if (!($124)) {
     break;
    }
   }
   $125 = $2;
   $126 = ((($125)) + 604|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($127|0)!=(0|0);
   if ($128) {
    $129 = $3;
    $130 = ((($129)) + 24|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131&255;
    $133 = ($132|0)==(8);
    if ($133) {
     $134 = $3;
     $135 = ((($134)) + 25|0);
     HEAP8[$135>>0] = 3;
    }
   }
  }
 } while(0);
 $136 = $2;
 $137 = ((($136)) + 216|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $138 & 512;
 $140 = ($139|0)!=(0);
 if ($140) {
  $141 = $3;
  $142 = ((($141)) + 24|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $143&255;
  $145 = ($144|0)==(8);
  if ($145) {
   $146 = $3;
   $147 = ((($146)) + 25|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = ($149|0)!=(3);
   if ($150) {
    $151 = $3;
    $152 = ((($151)) + 24|0);
    HEAP8[$152>>0] = 16;
   }
  }
 }
 $153 = $2;
 $154 = ((($153)) + 216|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $155 & 4;
 $157 = ($156|0)!=(0);
 if ($157) {
  $158 = $3;
  $159 = ((($158)) + 24|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = ($161|0)<(8);
  if ($162) {
   $163 = $3;
   $164 = ((($163)) + 24|0);
   HEAP8[$164>>0] = 8;
  }
 }
 $165 = $3;
 $166 = ((($165)) + 25|0);
 $167 = HEAP8[$166>>0]|0;
 $168 = $167&255;
 $169 = ($168|0)==(3);
 $170 = $3;
 if ($169) {
  $171 = ((($170)) + 29|0);
  HEAP8[$171>>0] = 1;
 } else {
  $172 = ((($170)) + 25|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = $174 & 2;
  $176 = ($175|0)!=(0);
  $177 = $3;
  $178 = ((($177)) + 29|0);
  $$sink1 = $176 ? 3 : 1;
  HEAP8[$178>>0] = $$sink1;
 }
 $179 = $2;
 $180 = ((($179)) + 216|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = $181 & 262144;
 $183 = ($182|0)!=(0);
 if ($183) {
  $184 = $3;
  $185 = ((($184)) + 25|0);
  $186 = HEAP8[$185>>0]|0;
  $187 = $186&255;
  $188 = $187 & -5;
  $189 = $188&255;
  $190 = $3;
  $191 = ((($190)) + 25|0);
  HEAP8[$191>>0] = $189;
  $192 = $3;
  $193 = ((($192)) + 22|0);
  HEAP16[$193>>1] = 0;
 }
 $194 = $3;
 $195 = ((($194)) + 25|0);
 $196 = HEAP8[$195>>0]|0;
 $197 = $196&255;
 $198 = $197 & 4;
 $199 = ($198|0)!=(0);
 if ($199) {
  $200 = $3;
  $201 = ((($200)) + 29|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = (($202) + 1)<<24>>24;
  HEAP8[$201>>0] = $203;
 }
 $204 = $2;
 $205 = ((($204)) + 216|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $206 & 32768;
 $208 = ($207|0)!=(0);
 do {
  if ($208) {
   $209 = $3;
   $210 = ((($209)) + 25|0);
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   $213 = ($212|0)==(2);
   if (!($213)) {
    $214 = $3;
    $215 = ((($214)) + 25|0);
    $216 = HEAP8[$215>>0]|0;
    $217 = $216&255;
    $218 = ($217|0)==(0);
    if (!($218)) {
     break;
    }
   }
   $219 = $3;
   $220 = ((($219)) + 29|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = (($221) + 1)<<24>>24;
   HEAP8[$220>>0] = $222;
   $223 = $2;
   $224 = ((($223)) + 216|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = $225 & 16777216;
   $227 = ($226|0)!=(0);
   if ($227) {
    $228 = $3;
    $229 = ((($228)) + 25|0);
    $230 = HEAP8[$229>>0]|0;
    $231 = $230&255;
    $232 = $231 | 4;
    $233 = $232&255;
    HEAP8[$229>>0] = $233;
   }
  }
 } while(0);
 $234 = $2;
 $235 = ((($234)) + 216|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = $236 & 1048576;
 $238 = ($237|0)!=(0);
 if ($238) {
  $239 = $2;
  $240 = ((($239)) + 204|0);
  $241 = HEAP8[$240>>0]|0;
  $242 = $241&255;
  $243 = ($242|0)!=(0);
  if ($243) {
   $244 = $2;
   $245 = ((($244)) + 204|0);
   $246 = HEAP8[$245>>0]|0;
   $247 = $3;
   $248 = ((($247)) + 24|0);
   HEAP8[$248>>0] = $246;
  }
  $249 = $2;
  $250 = ((($249)) + 205|0);
  $251 = HEAP8[$250>>0]|0;
  $252 = $251&255;
  $253 = ($252|0)!=(0);
  if ($253) {
   $254 = $2;
   $255 = ((($254)) + 205|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $3;
   $258 = ((($257)) + 29|0);
   HEAP8[$258>>0] = $256;
  }
 }
 $259 = $3;
 $260 = ((($259)) + 29|0);
 $261 = HEAP8[$260>>0]|0;
 $262 = $261&255;
 $263 = $3;
 $264 = ((($263)) + 24|0);
 $265 = HEAP8[$264>>0]|0;
 $266 = $265&255;
 $267 = Math_imul($262, $266)|0;
 $268 = $267&255;
 $269 = $3;
 $270 = ((($269)) + 30|0);
 HEAP8[$270>>0] = $268;
 $271 = $3;
 $272 = ((($271)) + 30|0);
 $273 = HEAP8[$272>>0]|0;
 $274 = $273&255;
 $275 = ($274|0)>=(8);
 $276 = $3;
 $277 = HEAP32[$276>>2]|0;
 $278 = $3;
 $279 = ((($278)) + 30|0);
 $280 = HEAP8[$279>>0]|0;
 $281 = $280&255;
 if ($275) {
  $282 = $281 >>> 3;
  $283 = Math_imul($277, $282)|0;
  $289 = $283;
  $287 = $3;
  $288 = ((($287)) + 12|0);
  HEAP32[$288>>2] = $289;
  $290 = $3;
  $291 = ((($290)) + 12|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = $2;
  $294 = ((($293)) + 396|0);
  HEAP32[$294>>2] = $292;
  STACKTOP = sp;return;
 } else {
  $284 = Math_imul($277, $281)|0;
  $285 = (($284) + 7)|0;
  $286 = $285 >>> 3;
  $289 = $286;
  $287 = $3;
  $288 = ((($287)) + 12|0);
  HEAP32[$288>>2] = $289;
  $290 = $3;
  $291 = ((($290)) + 12|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = $2;
  $294 = ((($293)) + 396|0);
  HEAP32[$294>>2] = $292;
  STACKTOP = sp;return;
 }
}
function _png_do_read_transformations($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 384|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 $9 = $2;
 if ($8) {
  _png_error($9,15267);
  // unreachable;
 }
 $10 = ((($9)) + 212|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 16384;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 212|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 64;
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = $2;
   _png_error($19,15283);
   // unreachable;
  }
 }
 $20 = $2;
 $21 = ((($20)) + 216|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 4096;
 $24 = ($23|0)!=(0);
 do {
  if ($24) {
   $25 = $3;
   $26 = ((($25)) + 8|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($28|0)==(3);
   if ($29) {
    $30 = $3;
    $31 = $2;
    $32 = ((($31)) + 384|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($33)) + 1|0);
    $35 = $2;
    $36 = ((($35)) + 408|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $2;
    $39 = ((($38)) + 520|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $2;
    $42 = ((($41)) + 420|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $43&65535;
    _png_do_expand_palette($30,$34,$37,$40,$44);
    break;
   }
   $45 = $2;
   $46 = ((($45)) + 420|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47&65535;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = $2;
    $51 = ((($50)) + 216|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 & 33554432;
    $54 = ($53|0)!=(0);
    if ($54) {
     $55 = $3;
     $56 = $2;
     $57 = ((($56)) + 384|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ((($58)) + 1|0);
     $60 = $2;
     $61 = ((($60)) + 524|0);
     _png_do_expand($55,$59,$61);
     break;
    }
   }
   $62 = $3;
   $63 = $2;
   $64 = ((($63)) + 384|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 1|0);
   _png_do_expand($62,$66,0);
  }
 } while(0);
 $67 = $2;
 $68 = ((($67)) + 216|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 & 262144;
 $71 = ($70|0)!=(0);
 do {
  if ($71) {
   $72 = $2;
   $73 = ((($72)) + 216|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 & 128;
   $76 = ($75|0)==(0);
   if ($76) {
    $77 = $3;
    $78 = ((($77)) + 8|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = ($80|0)==(6);
    if (!($81)) {
     $82 = $3;
     $83 = ((($82)) + 8|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = ($85|0)==(4);
     if (!($86)) {
      break;
     }
    }
    $87 = $3;
    $88 = $2;
    $89 = ((($88)) + 384|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 1|0);
    _png_do_strip_channel($87,$91,0);
   }
  }
 } while(0);
 $92 = $2;
 $93 = ((($92)) + 216|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 6291456;
 $96 = ($95|0)!=(0);
 if ($96) {
  $97 = $2;
  $98 = $3;
  $99 = $2;
  $100 = ((($99)) + 384|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ((($101)) + 1|0);
  $103 = (_png_do_rgb_to_gray($97,$98,$102)|0);
  $4 = $103;
  $104 = $4;
  $105 = ($104|0)!=(0);
  if ($105) {
   $106 = $2;
   $107 = ((($106)) + 668|0);
   HEAP8[$107>>0] = 1;
   $108 = $2;
   $109 = ((($108)) + 216|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110 & 6291456;
   $112 = ($111|0)==(4194304);
   if ($112) {
    $113 = $2;
    _png_warning($113,15301);
   }
   $114 = $2;
   $115 = ((($114)) + 216|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 & 6291456;
   $118 = ($117|0)==(2097152);
   if ($118) {
    $119 = $2;
    _png_error($119,15301);
    // unreachable;
   }
  }
 }
 $120 = $2;
 $121 = ((($120)) + 216|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $122 & 16384;
 $124 = ($123|0)!=(0);
 if ($124) {
  $125 = $2;
  $126 = ((($125)) + 208|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $127 & 2048;
  $129 = ($128|0)==(0);
  if ($129) {
   $130 = $3;
   $131 = $2;
   $132 = ((($131)) + 384|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((($133)) + 1|0);
   _png_do_gray_to_rgb($130,$134);
  }
 }
 $135 = $2;
 $136 = ((($135)) + 216|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $137 & 128;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = $3;
  $141 = $2;
  $142 = ((($141)) + 384|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ((($143)) + 1|0);
  $145 = $2;
  _png_do_compose($140,$144,$145);
 }
 $146 = $2;
 $147 = ((($146)) + 216|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $148 & 8192;
 $150 = ($149|0)!=(0);
 do {
  if ($150) {
   $151 = $2;
   $152 = ((($151)) + 216|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $153 & 6291456;
   $155 = ($154|0)==(0);
   if ($155) {
    $156 = $2;
    $157 = ((($156)) + 216|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $158 & 128;
    $160 = ($159|0)!=(0);
    if ($160) {
     $161 = $2;
     $162 = ((($161)) + 420|0);
     $163 = HEAP16[$162>>1]|0;
     $164 = $163&65535;
     $165 = ($164|0)!=(0);
     if ($165) {
      break;
     }
     $166 = $2;
     $167 = ((($166)) + 427|0);
     $168 = HEAP8[$167>>0]|0;
     $169 = $168&255;
     $170 = $169 & 4;
     $171 = ($170|0)!=(0);
     if ($171) {
      break;
     }
    }
    $172 = $2;
    $173 = ((($172)) + 427|0);
    $174 = HEAP8[$173>>0]|0;
    $175 = $174&255;
    $176 = ($175|0)!=(3);
    if ($176) {
     $177 = $3;
     $178 = $2;
     $179 = ((($178)) + 384|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ((($180)) + 1|0);
     $182 = $2;
     _png_do_gamma($177,$181,$182);
    }
   }
  }
 } while(0);
 $183 = $2;
 $184 = ((($183)) + 216|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $185 & 262144;
 $187 = ($186|0)!=(0);
 do {
  if ($187) {
   $188 = $2;
   $189 = ((($188)) + 216|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $190 & 128;
   $192 = ($191|0)!=(0);
   if ($192) {
    $193 = $3;
    $194 = ((($193)) + 8|0);
    $195 = HEAP8[$194>>0]|0;
    $196 = $195&255;
    $197 = ($196|0)==(6);
    if (!($197)) {
     $198 = $3;
     $199 = ((($198)) + 8|0);
     $200 = HEAP8[$199>>0]|0;
     $201 = $200&255;
     $202 = ($201|0)==(4);
     if (!($202)) {
      break;
     }
    }
    $203 = $3;
    $204 = $2;
    $205 = ((($204)) + 384|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ((($206)) + 1|0);
    _png_do_strip_channel($203,$207,0);
   }
  }
 } while(0);
 $208 = $2;
 $209 = ((($208)) + 216|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = $210 & 8388608;
 $212 = ($211|0)!=(0);
 if ($212) {
  $213 = $3;
  $214 = ((($213)) + 8|0);
  $215 = HEAP8[$214>>0]|0;
  $216 = $215&255;
  $217 = $216 & 4;
  $218 = ($217|0)!=(0);
  if ($218) {
   $219 = $3;
   $220 = $2;
   $221 = ((($220)) + 384|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = ((($222)) + 1|0);
   $224 = $2;
   _png_do_encode_alpha($219,$223,$224);
  }
 }
 $225 = $2;
 $226 = ((($225)) + 216|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = $227 & 67108864;
 $229 = ($228|0)!=(0);
 if ($229) {
  $230 = $3;
  $231 = $2;
  $232 = ((($231)) + 384|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = ((($233)) + 1|0);
  _png_do_scale_16_to_8($230,$234);
 }
 $235 = $2;
 $236 = ((($235)) + 216|0);
 $237 = HEAP32[$236>>2]|0;
 $238 = $237 & 1024;
 $239 = ($238|0)!=(0);
 if ($239) {
  $240 = $3;
  $241 = $2;
  $242 = ((($241)) + 384|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = ((($243)) + 1|0);
  _png_do_chop($240,$244);
 }
 $245 = $2;
 $246 = ((($245)) + 216|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = $247 & 64;
 $249 = ($248|0)!=(0);
 if ($249) {
  $250 = $3;
  $251 = $2;
  $252 = ((($251)) + 384|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = ((($253)) + 1|0);
  $255 = $2;
  $256 = ((($255)) + 604|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = $2;
  $259 = ((($258)) + 608|0);
  $260 = HEAP32[$259>>2]|0;
  _png_do_quantize($250,$254,$257,$260);
  $261 = $3;
  $262 = ((($261)) + 4|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = ($263|0)==(0);
  if ($264) {
   $265 = $2;
   _png_error($265,15340);
   // unreachable;
  }
 }
 $266 = $2;
 $267 = ((($266)) + 216|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = $268 & 512;
 $270 = ($269|0)!=(0);
 if ($270) {
  $271 = $3;
  $272 = $2;
  $273 = ((($272)) + 384|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = ((($274)) + 1|0);
  _png_do_expand_16($271,$275);
 }
 $276 = $2;
 $277 = ((($276)) + 216|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = $278 & 16384;
 $280 = ($279|0)!=(0);
 if ($280) {
  $281 = $2;
  $282 = ((($281)) + 208|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & 2048;
  $285 = ($284|0)!=(0);
  if ($285) {
   $286 = $3;
   $287 = $2;
   $288 = ((($287)) + 384|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = ((($289)) + 1|0);
   _png_do_gray_to_rgb($286,$290);
  }
 }
 $291 = $2;
 $292 = ((($291)) + 216|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = $293 & 32;
 $295 = ($294|0)!=(0);
 if ($295) {
  $296 = $3;
  $297 = $2;
  $298 = ((($297)) + 384|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = ((($299)) + 1|0);
  _png_do_invert($296,$300);
 }
 $301 = $2;
 $302 = ((($301)) + 216|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = $303 & 524288;
 $305 = ($304|0)!=(0);
 if ($305) {
  $306 = $3;
  $307 = $2;
  $308 = ((($307)) + 384|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = ((($309)) + 1|0);
  _png_do_read_invert_alpha($306,$310);
 }
 $311 = $2;
 $312 = ((($311)) + 216|0);
 $313 = HEAP32[$312>>2]|0;
 $314 = $313 & 8;
 $315 = ($314|0)!=(0);
 if ($315) {
  $316 = $3;
  $317 = $2;
  $318 = ((($317)) + 384|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = ((($319)) + 1|0);
  $321 = $2;
  $322 = ((($321)) + 513|0);
  _png_do_unshift($316,$320,$322);
 }
 $323 = $2;
 $324 = ((($323)) + 216|0);
 $325 = HEAP32[$324>>2]|0;
 $326 = $325 & 4;
 $327 = ($326|0)!=(0);
 if ($327) {
  $328 = $3;
  $329 = $2;
  $330 = ((($329)) + 384|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = ((($331)) + 1|0);
  _png_do_unpack($328,$332);
 }
 $333 = $3;
 $334 = ((($333)) + 8|0);
 $335 = HEAP8[$334>>0]|0;
 $336 = $335&255;
 $337 = ($336|0)==(3);
 do {
  if ($337) {
   $338 = $2;
   $339 = ((($338)) + 416|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = ($340|0)>=(0);
   if (!($341)) {
    break;
   }
   $342 = $2;
   $343 = $3;
   _png_do_check_palette_indexes($342,$343);
  }
 } while(0);
 $344 = $2;
 $345 = ((($344)) + 216|0);
 $346 = HEAP32[$345>>2]|0;
 $347 = $346 & 1;
 $348 = ($347|0)!=(0);
 if ($348) {
  $349 = $3;
  $350 = $2;
  $351 = ((($350)) + 384|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = ((($352)) + 1|0);
  _png_do_bgr($349,$353);
 }
 $354 = $2;
 $355 = ((($354)) + 216|0);
 $356 = HEAP32[$355>>2]|0;
 $357 = $356 & 65536;
 $358 = ($357|0)!=(0);
 if ($358) {
  $359 = $3;
  $360 = $2;
  $361 = ((($360)) + 384|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = ((($362)) + 1|0);
  _png_do_packswap($359,$363);
 }
 $364 = $2;
 $365 = ((($364)) + 216|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = $366 & 32768;
 $368 = ($367|0)!=(0);
 if ($368) {
  $369 = $3;
  $370 = $2;
  $371 = ((($370)) + 384|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = ((($372)) + 1|0);
  $374 = $2;
  $375 = ((($374)) + 436|0);
  $376 = HEAP16[$375>>1]|0;
  $377 = $376&65535;
  $378 = $2;
  $379 = ((($378)) + 212|0);
  $380 = HEAP32[$379>>2]|0;
  _png_do_read_filler($369,$373,$377,$380);
 }
 $381 = $2;
 $382 = ((($381)) + 216|0);
 $383 = HEAP32[$382>>2]|0;
 $384 = $383 & 131072;
 $385 = ($384|0)!=(0);
 if ($385) {
  $386 = $3;
  $387 = $2;
  $388 = ((($387)) + 384|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = ((($389)) + 1|0);
  _png_do_read_swap_alpha($386,$390);
 }
 $391 = $2;
 $392 = ((($391)) + 216|0);
 $393 = HEAP32[$392>>2]|0;
 $394 = $393 & 16;
 $395 = ($394|0)!=(0);
 if ($395) {
  $396 = $3;
  $397 = $2;
  $398 = ((($397)) + 384|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = ((($399)) + 1|0);
  _png_do_swap($396,$400);
 }
 $401 = $2;
 $402 = ((($401)) + 216|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = $403 & 1048576;
 $405 = ($404|0)!=(0);
 if (!($405)) {
  STACKTOP = sp;return;
 }
 $406 = $2;
 $407 = ((($406)) + 192|0);
 $408 = HEAP32[$407>>2]|0;
 $409 = ($408|0)!=(0|0);
 if ($409) {
  $410 = $2;
  $411 = ((($410)) + 192|0);
  $412 = HEAP32[$411>>2]|0;
  $413 = $2;
  $414 = $3;
  $415 = $2;
  $416 = ((($415)) + 384|0);
  $417 = HEAP32[$416>>2]|0;
  $418 = ((($417)) + 1|0);
  FUNCTION_TABLE_viii[$412 & 127]($413,$414,$418);
 }
 $419 = $2;
 $420 = ((($419)) + 204|0);
 $421 = HEAP8[$420>>0]|0;
 $422 = $421&255;
 $423 = ($422|0)!=(0);
 if ($423) {
  $424 = $2;
  $425 = ((($424)) + 204|0);
  $426 = HEAP8[$425>>0]|0;
  $427 = $3;
  $428 = ((($427)) + 9|0);
  HEAP8[$428>>0] = $426;
 }
 $429 = $2;
 $430 = ((($429)) + 205|0);
 $431 = HEAP8[$430>>0]|0;
 $432 = $431&255;
 $433 = ($432|0)!=(0);
 if ($433) {
  $434 = $2;
  $435 = ((($434)) + 205|0);
  $436 = HEAP8[$435>>0]|0;
  $437 = $3;
  $438 = ((($437)) + 10|0);
  HEAP8[$438>>0] = $436;
 }
 $439 = $3;
 $440 = ((($439)) + 9|0);
 $441 = HEAP8[$440>>0]|0;
 $442 = $441&255;
 $443 = $3;
 $444 = ((($443)) + 10|0);
 $445 = HEAP8[$444>>0]|0;
 $446 = $445&255;
 $447 = Math_imul($442, $446)|0;
 $448 = $447&255;
 $449 = $3;
 $450 = ((($449)) + 11|0);
 HEAP8[$450>>0] = $448;
 $451 = $3;
 $452 = ((($451)) + 11|0);
 $453 = HEAP8[$452>>0]|0;
 $454 = $453&255;
 $455 = ($454|0)>=(8);
 $456 = $3;
 $457 = HEAP32[$456>>2]|0;
 $458 = $3;
 $459 = ((($458)) + 11|0);
 $460 = HEAP8[$459>>0]|0;
 $461 = $460&255;
 if ($455) {
  $462 = $461 >>> 3;
  $463 = Math_imul($457, $462)|0;
  $469 = $463;
 } else {
  $464 = Math_imul($457, $461)|0;
  $465 = (($464) + 7)|0;
  $466 = $465 >>> 3;
  $469 = $466;
 }
 $467 = $3;
 $468 = ((($467)) + 4|0);
 HEAP32[$468>>2] = $469;
 STACKTOP = sp;return;
}
function _png_do_expand_palette($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $$sink3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $5;
 $17 = HEAP32[$16>>2]|0;
 $15 = $17;
 $18 = $5;
 $19 = ((($18)) + 8|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(3);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $5;
 $24 = ((($23)) + 9|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)<(8);
 if ($27) {
  $28 = $5;
  $29 = ((($28)) + 9|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  L6: do {
   switch ($31|0) {
   case 1:  {
    $32 = $6;
    $33 = $15;
    $34 = (($33) - 1)|0;
    $35 = $34 >>> 3;
    $36 = (($32) + ($35)|0);
    $12 = $36;
    $37 = $6;
    $38 = $15;
    $39 = (($37) + ($38)|0);
    $40 = ((($39)) + -1|0);
    $13 = $40;
    $41 = $15;
    $42 = (($41) + 7)|0;
    $43 = $42 & 7;
    $44 = (7 - ($43))|0;
    $10 = $44;
    $14 = 0;
    while(1) {
     $45 = $14;
     $46 = $15;
     $47 = ($45>>>0)<($46>>>0);
     if (!($47)) {
      break L6;
     }
     $48 = $12;
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = $10;
     $52 = $50 >> $51;
     $53 = $52 & 1;
     $54 = ($53|0)!=(0);
     $55 = $13;
     $$sink = $54 ? 1 : 0;
     HEAP8[$55>>0] = $$sink;
     $56 = $10;
     $57 = ($56|0)==(7);
     if ($57) {
      $10 = 0;
      $58 = $12;
      $59 = ((($58)) + -1|0);
      $12 = $59;
     } else {
      $60 = $10;
      $61 = (($60) + 1)|0;
      $10 = $61;
     }
     $62 = $13;
     $63 = ((($62)) + -1|0);
     $13 = $63;
     $64 = $14;
     $65 = (($64) + 1)|0;
     $14 = $65;
    }
    break;
   }
   case 2:  {
    $66 = $6;
    $67 = $15;
    $68 = (($67) - 1)|0;
    $69 = $68 >>> 2;
    $70 = (($66) + ($69)|0);
    $12 = $70;
    $71 = $6;
    $72 = $15;
    $73 = (($71) + ($72)|0);
    $74 = ((($73)) + -1|0);
    $13 = $74;
    $75 = $15;
    $76 = (($75) + 3)|0;
    $77 = $76 & 3;
    $78 = (3 - ($77))|0;
    $79 = $78 << 1;
    $10 = $79;
    $14 = 0;
    while(1) {
     $80 = $14;
     $81 = $15;
     $82 = ($80>>>0)<($81>>>0);
     if (!($82)) {
      break L6;
     }
     $83 = $12;
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = $10;
     $87 = $85 >> $86;
     $88 = $87 & 3;
     $11 = $88;
     $89 = $11;
     $90 = $89&255;
     $91 = $13;
     HEAP8[$91>>0] = $90;
     $92 = $10;
     $93 = ($92|0)==(6);
     if ($93) {
      $10 = 0;
      $94 = $12;
      $95 = ((($94)) + -1|0);
      $12 = $95;
     } else {
      $96 = $10;
      $97 = (($96) + 2)|0;
      $10 = $97;
     }
     $98 = $13;
     $99 = ((($98)) + -1|0);
     $13 = $99;
     $100 = $14;
     $101 = (($100) + 1)|0;
     $14 = $101;
    }
    break;
   }
   case 4:  {
    $102 = $6;
    $103 = $15;
    $104 = (($103) - 1)|0;
    $105 = $104 >>> 1;
    $106 = (($102) + ($105)|0);
    $12 = $106;
    $107 = $6;
    $108 = $15;
    $109 = (($107) + ($108)|0);
    $110 = ((($109)) + -1|0);
    $13 = $110;
    $111 = $15;
    $112 = $111 & 1;
    $113 = $112 << 2;
    $10 = $113;
    $14 = 0;
    while(1) {
     $114 = $14;
     $115 = $15;
     $116 = ($114>>>0)<($115>>>0);
     if (!($116)) {
      break L6;
     }
     $117 = $12;
     $118 = HEAP8[$117>>0]|0;
     $119 = $118&255;
     $120 = $10;
     $121 = $119 >> $120;
     $122 = $121 & 15;
     $11 = $122;
     $123 = $11;
     $124 = $123&255;
     $125 = $13;
     HEAP8[$125>>0] = $124;
     $126 = $10;
     $127 = ($126|0)==(4);
     if ($127) {
      $10 = 0;
      $128 = $12;
      $129 = ((($128)) + -1|0);
      $12 = $129;
     } else {
      $130 = $10;
      $131 = (($130) + 4)|0;
      $10 = $131;
     }
     $132 = $13;
     $133 = ((($132)) + -1|0);
     $13 = $133;
     $134 = $14;
     $135 = (($134) + 1)|0;
     $14 = $135;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $136 = $5;
  $137 = ((($136)) + 9|0);
  HEAP8[$137>>0] = 8;
  $138 = $5;
  $139 = ((($138)) + 11|0);
  HEAP8[$139>>0] = 8;
  $140 = $15;
  $141 = $5;
  $142 = ((($141)) + 4|0);
  HEAP32[$142>>2] = $140;
 }
 $143 = $5;
 $144 = ((($143)) + 9|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145&255;
 $147 = ($146|0)==(8);
 if (!($147)) {
  STACKTOP = sp;return;
 }
 $148 = $9;
 $149 = ($148|0)>(0);
 $150 = $6;
 $151 = $15;
 $152 = (($150) + ($151)|0);
 $153 = ((($152)) + -1|0);
 $12 = $153;
 $154 = $6;
 $155 = $15;
 if ($149) {
  $156 = $155 << 2;
  $157 = (($154) + ($156)|0);
  $158 = ((($157)) + -1|0);
  $13 = $158;
  $14 = 0;
  while(1) {
   $159 = $14;
   $160 = $15;
   $161 = ($159>>>0)<($160>>>0);
   if (!($161)) {
    break;
   }
   $162 = $12;
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = $9;
   $166 = ($164|0)>=($165|0);
   if ($166) {
    $167 = $13;
    $168 = ((($167)) + -1|0);
    $13 = $168;
    HEAP8[$167>>0] = -1;
   } else {
    $169 = $8;
    $170 = $12;
    $171 = HEAP8[$170>>0]|0;
    $172 = $171&255;
    $173 = (($169) + ($172)|0);
    $174 = HEAP8[$173>>0]|0;
    $175 = $13;
    $176 = ((($175)) + -1|0);
    $13 = $176;
    HEAP8[$175>>0] = $174;
   }
   $177 = $7;
   $178 = $12;
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = (($177) + (($180*3)|0)|0);
   $182 = ((($181)) + 2|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $13;
   $185 = ((($184)) + -1|0);
   $13 = $185;
   HEAP8[$184>>0] = $183;
   $186 = $7;
   $187 = $12;
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = (($186) + (($189*3)|0)|0);
   $191 = ((($190)) + 1|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $13;
   $194 = ((($193)) + -1|0);
   $13 = $194;
   HEAP8[$193>>0] = $192;
   $195 = $7;
   $196 = $12;
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = (($195) + (($198*3)|0)|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = $13;
   $202 = ((($201)) + -1|0);
   $13 = $202;
   HEAP8[$201>>0] = $200;
   $203 = $12;
   $204 = ((($203)) + -1|0);
   $12 = $204;
   $205 = $14;
   $206 = (($205) + 1)|0;
   $14 = $206;
  }
  $207 = $5;
  $208 = ((($207)) + 9|0);
  HEAP8[$208>>0] = 8;
  $209 = $5;
  $210 = ((($209)) + 11|0);
  HEAP8[$210>>0] = 32;
  $211 = $15;
  $212 = $211<<2;
  $213 = $5;
  $214 = ((($213)) + 4|0);
  HEAP32[$214>>2] = $212;
  $215 = $5;
  $216 = ((($215)) + 8|0);
  HEAP8[$216>>0] = 6;
  $217 = $5;
  $$sink1 = 4;$$sink3 = $217;
 } else {
  $218 = ($155*3)|0;
  $219 = (($154) + ($218)|0);
  $220 = ((($219)) + -1|0);
  $13 = $220;
  $14 = 0;
  while(1) {
   $221 = $14;
   $222 = $15;
   $223 = ($221>>>0)<($222>>>0);
   if (!($223)) {
    break;
   }
   $224 = $7;
   $225 = $12;
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $228 = (($224) + (($227*3)|0)|0);
   $229 = ((($228)) + 2|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $13;
   $232 = ((($231)) + -1|0);
   $13 = $232;
   HEAP8[$231>>0] = $230;
   $233 = $7;
   $234 = $12;
   $235 = HEAP8[$234>>0]|0;
   $236 = $235&255;
   $237 = (($233) + (($236*3)|0)|0);
   $238 = ((($237)) + 1|0);
   $239 = HEAP8[$238>>0]|0;
   $240 = $13;
   $241 = ((($240)) + -1|0);
   $13 = $241;
   HEAP8[$240>>0] = $239;
   $242 = $7;
   $243 = $12;
   $244 = HEAP8[$243>>0]|0;
   $245 = $244&255;
   $246 = (($242) + (($245*3)|0)|0);
   $247 = HEAP8[$246>>0]|0;
   $248 = $13;
   $249 = ((($248)) + -1|0);
   $13 = $249;
   HEAP8[$248>>0] = $247;
   $250 = $12;
   $251 = ((($250)) + -1|0);
   $12 = $251;
   $252 = $14;
   $253 = (($252) + 1)|0;
   $14 = $253;
  }
  $254 = $5;
  $255 = ((($254)) + 9|0);
  HEAP8[$255>>0] = 8;
  $256 = $5;
  $257 = ((($256)) + 11|0);
  HEAP8[$257>>0] = 24;
  $258 = $15;
  $259 = ($258*3)|0;
  $260 = $5;
  $261 = ((($260)) + 4|0);
  HEAP32[$261>>2] = $259;
  $262 = $5;
  $263 = ((($262)) + 8|0);
  HEAP8[$263>>0] = 2;
  $264 = $5;
  $$sink1 = 3;$$sink3 = $264;
 }
 $265 = ((($$sink3)) + 10|0);
 HEAP8[$265>>0] = $$sink1;
 STACKTOP = sp;return;
}
function _png_do_expand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $24 = $3;
 $25 = HEAP32[$24>>2]|0;
 $11 = $25;
 $26 = $3;
 $27 = ((($26)) + 8|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $304 = $3;
  $305 = ((($304)) + 8|0);
  $306 = HEAP8[$305>>0]|0;
  $307 = $306&255;
  $308 = ($307|0)==(2);
  $309 = $5;
  $310 = ($309|0)!=(0|0);
  $or$cond = $308 & $310;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $311 = $3;
  $312 = ((($311)) + 9|0);
  $313 = HEAP8[$312>>0]|0;
  $314 = $313&255;
  $315 = ($314|0)==(8);
  L6: do {
   if ($315) {
    $316 = $5;
    $317 = ((($316)) + 2|0);
    $318 = HEAP16[$317>>1]|0;
    $319 = $318&65535;
    $320 = $319 & 255;
    $321 = $320&255;
    $15 = $321;
    $322 = $5;
    $323 = ((($322)) + 4|0);
    $324 = HEAP16[$323>>1]|0;
    $325 = $324&65535;
    $326 = $325 & 255;
    $327 = $326&255;
    $16 = $327;
    $328 = $5;
    $329 = ((($328)) + 6|0);
    $330 = HEAP16[$329>>1]|0;
    $331 = $330&65535;
    $332 = $331 & 255;
    $333 = $332&255;
    $17 = $333;
    $334 = $4;
    $335 = $3;
    $336 = ((($335)) + 4|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = (($334) + ($337)|0);
    $339 = ((($338)) + -1|0);
    $8 = $339;
    $340 = $4;
    $341 = $11;
    $342 = $341 << 2;
    $343 = (($340) + ($342)|0);
    $344 = ((($343)) + -1|0);
    $9 = $344;
    $10 = 0;
    while(1) {
     $345 = $10;
     $346 = $11;
     $347 = ($345>>>0)<($346>>>0);
     if (!($347)) {
      break L6;
     }
     $348 = $8;
     $349 = ((($348)) + -2|0);
     $350 = HEAP8[$349>>0]|0;
     $351 = $350&255;
     $352 = $15;
     $353 = $352&255;
     $354 = ($351|0)==($353|0);
     if ($354) {
      $355 = $8;
      $356 = ((($355)) + -1|0);
      $357 = HEAP8[$356>>0]|0;
      $358 = $357&255;
      $359 = $16;
      $360 = $359&255;
      $361 = ($358|0)==($360|0);
      if ($361) {
       $362 = $8;
       $363 = HEAP8[$362>>0]|0;
       $364 = $363&255;
       $365 = $17;
       $366 = $365&255;
       $367 = ($364|0)==($366|0);
       if ($367) {
        $368 = $9;
        $369 = ((($368)) + -1|0);
        $9 = $369;
        HEAP8[$368>>0] = 0;
       } else {
        label = 50;
       }
      } else {
       label = 50;
      }
     } else {
      label = 50;
     }
     if ((label|0) == 50) {
      label = 0;
      $370 = $9;
      $371 = ((($370)) + -1|0);
      $9 = $371;
      HEAP8[$370>>0] = -1;
     }
     $372 = $8;
     $373 = ((($372)) + -1|0);
     $8 = $373;
     $374 = HEAP8[$372>>0]|0;
     $375 = $9;
     $376 = ((($375)) + -1|0);
     $9 = $376;
     HEAP8[$375>>0] = $374;
     $377 = $8;
     $378 = ((($377)) + -1|0);
     $8 = $378;
     $379 = HEAP8[$377>>0]|0;
     $380 = $9;
     $381 = ((($380)) + -1|0);
     $9 = $381;
     HEAP8[$380>>0] = $379;
     $382 = $8;
     $383 = ((($382)) + -1|0);
     $8 = $383;
     $384 = HEAP8[$382>>0]|0;
     $385 = $9;
     $386 = ((($385)) + -1|0);
     $9 = $386;
     HEAP8[$385>>0] = $384;
     $387 = $10;
     $388 = (($387) + 1)|0;
     $10 = $388;
    }
   } else {
    $389 = $3;
    $390 = ((($389)) + 9|0);
    $391 = HEAP8[$390>>0]|0;
    $392 = $391&255;
    $393 = ($392|0)==(16);
    if ($393) {
     $394 = $5;
     $395 = ((($394)) + 2|0);
     $396 = HEAP16[$395>>1]|0;
     $397 = $396&65535;
     $398 = $397 >> 8;
     $399 = $398 & 255;
     $400 = $399&255;
     $18 = $400;
     $401 = $5;
     $402 = ((($401)) + 4|0);
     $403 = HEAP16[$402>>1]|0;
     $404 = $403&65535;
     $405 = $404 >> 8;
     $406 = $405 & 255;
     $407 = $406&255;
     $19 = $407;
     $408 = $5;
     $409 = ((($408)) + 6|0);
     $410 = HEAP16[$409>>1]|0;
     $411 = $410&65535;
     $412 = $411 >> 8;
     $413 = $412 & 255;
     $414 = $413&255;
     $20 = $414;
     $415 = $5;
     $416 = ((($415)) + 2|0);
     $417 = HEAP16[$416>>1]|0;
     $418 = $417&65535;
     $419 = $418 & 255;
     $420 = $419&255;
     $21 = $420;
     $421 = $5;
     $422 = ((($421)) + 4|0);
     $423 = HEAP16[$422>>1]|0;
     $424 = $423&65535;
     $425 = $424 & 255;
     $426 = $425&255;
     $22 = $426;
     $427 = $5;
     $428 = ((($427)) + 6|0);
     $429 = HEAP16[$428>>1]|0;
     $430 = $429&65535;
     $431 = $430 & 255;
     $432 = $431&255;
     $23 = $432;
     $433 = $4;
     $434 = $3;
     $435 = ((($434)) + 4|0);
     $436 = HEAP32[$435>>2]|0;
     $437 = (($433) + ($436)|0);
     $438 = ((($437)) + -1|0);
     $8 = $438;
     $439 = $4;
     $440 = $11;
     $441 = $440 << 3;
     $442 = (($439) + ($441)|0);
     $443 = ((($442)) + -1|0);
     $9 = $443;
     $10 = 0;
     while(1) {
      $444 = $10;
      $445 = $11;
      $446 = ($444>>>0)<($445>>>0);
      if (!($446)) {
       break L6;
      }
      $447 = $8;
      $448 = ((($447)) + -5|0);
      $449 = HEAP8[$448>>0]|0;
      $450 = $449&255;
      $451 = $18;
      $452 = $451&255;
      $453 = ($450|0)==($452|0);
      if ($453) {
       $454 = $8;
       $455 = ((($454)) + -4|0);
       $456 = HEAP8[$455>>0]|0;
       $457 = $456&255;
       $458 = $21;
       $459 = $458&255;
       $460 = ($457|0)==($459|0);
       if ($460) {
        $461 = $8;
        $462 = ((($461)) + -3|0);
        $463 = HEAP8[$462>>0]|0;
        $464 = $463&255;
        $465 = $19;
        $466 = $465&255;
        $467 = ($464|0)==($466|0);
        if ($467) {
         $468 = $8;
         $469 = ((($468)) + -2|0);
         $470 = HEAP8[$469>>0]|0;
         $471 = $470&255;
         $472 = $22;
         $473 = $472&255;
         $474 = ($471|0)==($473|0);
         if ($474) {
          $475 = $8;
          $476 = ((($475)) + -1|0);
          $477 = HEAP8[$476>>0]|0;
          $478 = $477&255;
          $479 = $20;
          $480 = $479&255;
          $481 = ($478|0)==($480|0);
          if ($481) {
           $482 = $8;
           $483 = HEAP8[$482>>0]|0;
           $484 = $483&255;
           $485 = $23;
           $486 = $485&255;
           $487 = ($484|0)==($486|0);
           if ($487) {
            $488 = $9;
            $489 = ((($488)) + -1|0);
            $9 = $489;
            HEAP8[$488>>0] = 0;
            $490 = $9;
            $491 = ((($490)) + -1|0);
            $9 = $491;
            HEAP8[$490>>0] = 0;
           } else {
            label = 62;
           }
          } else {
           label = 62;
          }
         } else {
          label = 62;
         }
        } else {
         label = 62;
        }
       } else {
        label = 62;
       }
      } else {
       label = 62;
      }
      if ((label|0) == 62) {
       label = 0;
       $492 = $9;
       $493 = ((($492)) + -1|0);
       $9 = $493;
       HEAP8[$492>>0] = -1;
       $494 = $9;
       $495 = ((($494)) + -1|0);
       $9 = $495;
       HEAP8[$494>>0] = -1;
      }
      $496 = $8;
      $497 = ((($496)) + -1|0);
      $8 = $497;
      $498 = HEAP8[$496>>0]|0;
      $499 = $9;
      $500 = ((($499)) + -1|0);
      $9 = $500;
      HEAP8[$499>>0] = $498;
      $501 = $8;
      $502 = ((($501)) + -1|0);
      $8 = $502;
      $503 = HEAP8[$501>>0]|0;
      $504 = $9;
      $505 = ((($504)) + -1|0);
      $9 = $505;
      HEAP8[$504>>0] = $503;
      $506 = $8;
      $507 = ((($506)) + -1|0);
      $8 = $507;
      $508 = HEAP8[$506>>0]|0;
      $509 = $9;
      $510 = ((($509)) + -1|0);
      $9 = $510;
      HEAP8[$509>>0] = $508;
      $511 = $8;
      $512 = ((($511)) + -1|0);
      $8 = $512;
      $513 = HEAP8[$511>>0]|0;
      $514 = $9;
      $515 = ((($514)) + -1|0);
      $9 = $515;
      HEAP8[$514>>0] = $513;
      $516 = $8;
      $517 = ((($516)) + -1|0);
      $8 = $517;
      $518 = HEAP8[$516>>0]|0;
      $519 = $9;
      $520 = ((($519)) + -1|0);
      $9 = $520;
      HEAP8[$519>>0] = $518;
      $521 = $8;
      $522 = ((($521)) + -1|0);
      $8 = $522;
      $523 = HEAP8[$521>>0]|0;
      $524 = $9;
      $525 = ((($524)) + -1|0);
      $9 = $525;
      HEAP8[$524>>0] = $523;
      $526 = $10;
      $527 = (($526) + 1)|0;
      $10 = $527;
     }
    }
   }
  } while(0);
  $528 = $3;
  $529 = ((($528)) + 8|0);
  HEAP8[$529>>0] = 6;
  $530 = $3;
  $531 = ((($530)) + 10|0);
  HEAP8[$531>>0] = 4;
  $532 = $3;
  $533 = ((($532)) + 9|0);
  $534 = HEAP8[$533>>0]|0;
  $535 = $534&255;
  $536 = $535 << 2;
  $537 = $536&255;
  $538 = $3;
  $539 = ((($538)) + 11|0);
  HEAP8[$539>>0] = $537;
  $540 = $3;
  $541 = ((($540)) + 11|0);
  $542 = HEAP8[$541>>0]|0;
  $543 = $542&255;
  $544 = ($543|0)>=(8);
  $545 = $11;
  $546 = $3;
  $547 = ((($546)) + 11|0);
  $548 = HEAP8[$547>>0]|0;
  $549 = $548&255;
  if ($544) {
   $550 = $549 >>> 3;
   $551 = Math_imul($545, $550)|0;
   $557 = $551;
  } else {
   $552 = Math_imul($545, $549)|0;
   $553 = (($552) + 7)|0;
   $554 = $553 >>> 3;
   $557 = $554;
  }
  $555 = $3;
  $556 = ((($555)) + 4|0);
  HEAP32[$556>>2] = $557;
  STACKTOP = sp;return;
 }
 $31 = $5;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $5;
  $34 = ((($33)) + 8|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = $36;
 } else {
  $37 = 0;
 }
 $12 = $37;
 $38 = $3;
 $39 = ((($38)) + 9|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ($41|0)<(8);
 if ($42) {
  $43 = $3;
  $44 = ((($43)) + 9|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  L45: do {
   switch ($46|0) {
   case 1:  {
    $47 = $12;
    $48 = $47 & 1;
    $49 = ($48*255)|0;
    $12 = $49;
    $50 = $4;
    $51 = $11;
    $52 = (($51) - 1)|0;
    $53 = $52 >>> 3;
    $54 = (($50) + ($53)|0);
    $8 = $54;
    $55 = $4;
    $56 = $11;
    $57 = (($55) + ($56)|0);
    $58 = ((($57)) + -1|0);
    $9 = $58;
    $59 = $11;
    $60 = (($59) + 7)|0;
    $61 = $60 & 7;
    $62 = (7 - ($61))|0;
    $6 = $62;
    $10 = 0;
    while(1) {
     $63 = $10;
     $64 = $11;
     $65 = ($63>>>0)<($64>>>0);
     if (!($65)) {
      break L45;
     }
     $66 = $8;
     $67 = HEAP8[$66>>0]|0;
     $68 = $67&255;
     $69 = $6;
     $70 = $68 >> $69;
     $71 = $70 & 1;
     $72 = ($71|0)!=(0);
     $73 = $9;
     $$sink = $72 ? -1 : 0;
     HEAP8[$73>>0] = $$sink;
     $74 = $6;
     $75 = ($74|0)==(7);
     if ($75) {
      $6 = 0;
      $76 = $8;
      $77 = ((($76)) + -1|0);
      $8 = $77;
     } else {
      $78 = $6;
      $79 = (($78) + 1)|0;
      $6 = $79;
     }
     $80 = $9;
     $81 = ((($80)) + -1|0);
     $9 = $81;
     $82 = $10;
     $83 = (($82) + 1)|0;
     $10 = $83;
    }
    break;
   }
   case 2:  {
    $84 = $12;
    $85 = $84 & 3;
    $86 = ($85*85)|0;
    $12 = $86;
    $87 = $4;
    $88 = $11;
    $89 = (($88) - 1)|0;
    $90 = $89 >>> 2;
    $91 = (($87) + ($90)|0);
    $8 = $91;
    $92 = $4;
    $93 = $11;
    $94 = (($92) + ($93)|0);
    $95 = ((($94)) + -1|0);
    $9 = $95;
    $96 = $11;
    $97 = (($96) + 3)|0;
    $98 = $97 & 3;
    $99 = (3 - ($98))|0;
    $100 = $99 << 1;
    $6 = $100;
    $10 = 0;
    while(1) {
     $101 = $10;
     $102 = $11;
     $103 = ($101>>>0)<($102>>>0);
     if (!($103)) {
      break L45;
     }
     $104 = $8;
     $105 = HEAP8[$104>>0]|0;
     $106 = $105&255;
     $107 = $6;
     $108 = $106 >> $107;
     $109 = $108 & 3;
     $7 = $109;
     $110 = $7;
     $111 = $7;
     $112 = $111 << 2;
     $113 = $110 | $112;
     $114 = $7;
     $115 = $114 << 4;
     $116 = $113 | $115;
     $117 = $7;
     $118 = $117 << 6;
     $119 = $116 | $118;
     $120 = $119&255;
     $121 = $9;
     HEAP8[$121>>0] = $120;
     $122 = $6;
     $123 = ($122|0)==(6);
     if ($123) {
      $6 = 0;
      $124 = $8;
      $125 = ((($124)) + -1|0);
      $8 = $125;
     } else {
      $126 = $6;
      $127 = (($126) + 2)|0;
      $6 = $127;
     }
     $128 = $9;
     $129 = ((($128)) + -1|0);
     $9 = $129;
     $130 = $10;
     $131 = (($130) + 1)|0;
     $10 = $131;
    }
    break;
   }
   case 4:  {
    $132 = $12;
    $133 = $132 & 15;
    $134 = ($133*17)|0;
    $12 = $134;
    $135 = $4;
    $136 = $11;
    $137 = (($136) - 1)|0;
    $138 = $137 >>> 1;
    $139 = (($135) + ($138)|0);
    $8 = $139;
    $140 = $4;
    $141 = $11;
    $142 = (($140) + ($141)|0);
    $143 = ((($142)) + -1|0);
    $9 = $143;
    $144 = $11;
    $145 = (($144) + 1)|0;
    $146 = $145 & 1;
    $147 = (1 - ($146))|0;
    $148 = $147 << 2;
    $6 = $148;
    $10 = 0;
    while(1) {
     $149 = $10;
     $150 = $11;
     $151 = ($149>>>0)<($150>>>0);
     if (!($151)) {
      break L45;
     }
     $152 = $8;
     $153 = HEAP8[$152>>0]|0;
     $154 = $153&255;
     $155 = $6;
     $156 = $154 >> $155;
     $157 = $156 & 15;
     $7 = $157;
     $158 = $7;
     $159 = $7;
     $160 = $159 << 4;
     $161 = $158 | $160;
     $162 = $161&255;
     $163 = $9;
     HEAP8[$163>>0] = $162;
     $164 = $6;
     $165 = ($164|0)==(4);
     if ($165) {
      $6 = 0;
      $166 = $8;
      $167 = ((($166)) + -1|0);
      $8 = $167;
     } else {
      $6 = 4;
     }
     $168 = $9;
     $169 = ((($168)) + -1|0);
     $9 = $169;
     $170 = $10;
     $171 = (($170) + 1)|0;
     $10 = $171;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $172 = $3;
  $173 = ((($172)) + 9|0);
  HEAP8[$173>>0] = 8;
  $174 = $3;
  $175 = ((($174)) + 11|0);
  HEAP8[$175>>0] = 8;
  $176 = $11;
  $177 = $3;
  $178 = ((($177)) + 4|0);
  HEAP32[$178>>2] = $176;
 }
 $179 = $5;
 $180 = ($179|0)!=(0|0);
 if (!($180)) {
  STACKTOP = sp;return;
 }
 $181 = $3;
 $182 = ((($181)) + 9|0);
 $183 = HEAP8[$182>>0]|0;
 $184 = $183&255;
 $185 = ($184|0)==(8);
 L75: do {
  if ($185) {
   $186 = $12;
   $187 = $186 & 255;
   $12 = $187;
   $188 = $4;
   $189 = $11;
   $190 = (($188) + ($189)|0);
   $191 = ((($190)) + -1|0);
   $8 = $191;
   $192 = $4;
   $193 = $11;
   $194 = $193 << 1;
   $195 = (($192) + ($194)|0);
   $196 = ((($195)) + -1|0);
   $9 = $196;
   $10 = 0;
   while(1) {
    $197 = $10;
    $198 = $11;
    $199 = ($197>>>0)<($198>>>0);
    if (!($199)) {
     break L75;
    }
    $200 = $8;
    $201 = HEAP8[$200>>0]|0;
    $202 = $201&255;
    $203 = $202 & 255;
    $204 = $12;
    $205 = ($203|0)==($204|0);
    $206 = $9;
    $207 = ((($206)) + -1|0);
    $9 = $207;
    $$sink1 = $205 ? 0 : -1;
    HEAP8[$206>>0] = $$sink1;
    $208 = $8;
    $209 = ((($208)) + -1|0);
    $8 = $209;
    $210 = HEAP8[$208>>0]|0;
    $211 = $9;
    $212 = ((($211)) + -1|0);
    $9 = $212;
    HEAP8[$211>>0] = $210;
    $213 = $10;
    $214 = (($213) + 1)|0;
    $10 = $214;
   }
  } else {
   $215 = $3;
   $216 = ((($215)) + 9|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = ($218|0)==(16);
   if ($219) {
    $220 = $12;
    $221 = $220 >>> 8;
    $222 = $221 & 255;
    $13 = $222;
    $223 = $12;
    $224 = $223 & 255;
    $14 = $224;
    $225 = $4;
    $226 = $3;
    $227 = ((($226)) + 4|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = (($225) + ($228)|0);
    $230 = ((($229)) + -1|0);
    $8 = $230;
    $231 = $4;
    $232 = $3;
    $233 = ((($232)) + 4|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = $234 << 1;
    $236 = (($231) + ($235)|0);
    $237 = ((($236)) + -1|0);
    $9 = $237;
    $10 = 0;
    while(1) {
     $238 = $10;
     $239 = $11;
     $240 = ($238>>>0)<($239>>>0);
     if (!($240)) {
      break L75;
     }
     $241 = $8;
     $242 = ((($241)) + -1|0);
     $243 = HEAP8[$242>>0]|0;
     $244 = $243&255;
     $245 = $244 & 255;
     $246 = $13;
     $247 = ($245|0)==($246|0);
     if ($247) {
      $248 = $8;
      $249 = HEAP8[$248>>0]|0;
      $250 = $249&255;
      $251 = $250 & 255;
      $252 = $14;
      $253 = ($251|0)==($252|0);
      if ($253) {
       $254 = $9;
       $255 = ((($254)) + -1|0);
       $9 = $255;
       HEAP8[$254>>0] = 0;
       $256 = $9;
       $257 = ((($256)) + -1|0);
       $9 = $257;
       HEAP8[$256>>0] = 0;
      } else {
       label = 36;
      }
     } else {
      label = 36;
     }
     if ((label|0) == 36) {
      label = 0;
      $258 = $9;
      $259 = ((($258)) + -1|0);
      $9 = $259;
      HEAP8[$258>>0] = -1;
      $260 = $9;
      $261 = ((($260)) + -1|0);
      $9 = $261;
      HEAP8[$260>>0] = -1;
     }
     $262 = $8;
     $263 = ((($262)) + -1|0);
     $8 = $263;
     $264 = HEAP8[$262>>0]|0;
     $265 = $9;
     $266 = ((($265)) + -1|0);
     $9 = $266;
     HEAP8[$265>>0] = $264;
     $267 = $8;
     $268 = ((($267)) + -1|0);
     $8 = $268;
     $269 = HEAP8[$267>>0]|0;
     $270 = $9;
     $271 = ((($270)) + -1|0);
     $9 = $271;
     HEAP8[$270>>0] = $269;
     $272 = $10;
     $273 = (($272) + 1)|0;
     $10 = $273;
    }
   }
  }
 } while(0);
 $274 = $3;
 $275 = ((($274)) + 8|0);
 HEAP8[$275>>0] = 4;
 $276 = $3;
 $277 = ((($276)) + 10|0);
 HEAP8[$277>>0] = 2;
 $278 = $3;
 $279 = ((($278)) + 9|0);
 $280 = HEAP8[$279>>0]|0;
 $281 = $280&255;
 $282 = $281 << 1;
 $283 = $282&255;
 $284 = $3;
 $285 = ((($284)) + 11|0);
 HEAP8[$285>>0] = $283;
 $286 = $3;
 $287 = ((($286)) + 11|0);
 $288 = HEAP8[$287>>0]|0;
 $289 = $288&255;
 $290 = ($289|0)>=(8);
 $291 = $11;
 $292 = $3;
 $293 = ((($292)) + 11|0);
 $294 = HEAP8[$293>>0]|0;
 $295 = $294&255;
 if ($290) {
  $296 = $295 >>> 3;
  $297 = Math_imul($291, $296)|0;
  $303 = $297;
 } else {
  $298 = Math_imul($291, $295)|0;
  $299 = (($298) + 7)|0;
  $300 = $299 >>> 3;
  $303 = $300;
 }
 $301 = $3;
 $302 = ((($301)) + 4|0);
 HEAP32[$302>>2] = $303;
 STACKTOP = sp;return;
}
function _png_do_rgb_to_gray($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $46 = $4;
 $47 = ((($46)) + 8|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $49 & 1;
 $51 = ($50|0)==(0);
 if (!($51)) {
  $584 = $6;
  STACKTOP = sp;return ($584|0);
 }
 $52 = $4;
 $53 = ((($52)) + 8|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 2;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  $584 = $6;
  STACKTOP = sp;return ($584|0);
 }
 $58 = $3;
 $59 = ((($58)) + 670|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60&65535;
 $7 = $61;
 $62 = $3;
 $63 = ((($62)) + 672|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = $64&65535;
 $8 = $65;
 $66 = $7;
 $67 = (32768 - ($66))|0;
 $68 = $8;
 $69 = (($67) - ($68))|0;
 $9 = $69;
 $70 = $4;
 $71 = HEAP32[$70>>2]|0;
 $10 = $71;
 $72 = $4;
 $73 = ((($72)) + 8|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = $75 & 4;
 $77 = ($76|0)!=(0);
 $78 = $77&1;
 $11 = $78;
 $79 = $4;
 $80 = ((($79)) + 9|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = ($82|0)==(8);
 $84 = $3;
 L7: do {
  if ($83) {
   $85 = ((($84)) + 492|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86|0)!=(0|0);
   if ($87) {
    $88 = $3;
    $89 = ((($88)) + 496|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($90|0)!=(0|0);
    if ($91) {
     $92 = $5;
     $12 = $92;
     $93 = $5;
     $13 = $93;
     $14 = 0;
     while(1) {
      $94 = $14;
      $95 = $10;
      $96 = ($94>>>0)<($95>>>0);
      if (!($96)) {
       break L7;
      }
      $97 = $12;
      $98 = ((($97)) + 1|0);
      $12 = $98;
      $99 = HEAP8[$97>>0]|0;
      $15 = $99;
      $100 = $12;
      $101 = ((($100)) + 1|0);
      $12 = $101;
      $102 = HEAP8[$100>>0]|0;
      $16 = $102;
      $103 = $12;
      $104 = ((($103)) + 1|0);
      $12 = $104;
      $105 = HEAP8[$103>>0]|0;
      $17 = $105;
      $106 = $15;
      $107 = $106&255;
      $108 = $16;
      $109 = $108&255;
      $110 = ($107|0)!=($109|0);
      if ($110) {
       label = 10;
      } else {
       $111 = $15;
       $112 = $111&255;
       $113 = $17;
       $114 = $113&255;
       $115 = ($112|0)!=($114|0);
       if ($115) {
        label = 10;
       } else {
        $162 = $3;
        $163 = ((($162)) + 484|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = ($164|0)!=(0|0);
        if ($165) {
         $166 = $3;
         $167 = ((($166)) + 484|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = $15;
         $170 = $169&255;
         $171 = (($168) + ($170)|0);
         $172 = HEAP8[$171>>0]|0;
         $15 = $172;
        }
        $173 = $15;
        $174 = $13;
        $175 = ((($174)) + 1|0);
        $13 = $175;
        HEAP8[$174>>0] = $173;
       }
      }
      if ((label|0) == 10) {
       label = 0;
       $116 = $3;
       $117 = ((($116)) + 496|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = $15;
       $120 = $119&255;
       $121 = (($118) + ($120)|0);
       $122 = HEAP8[$121>>0]|0;
       $15 = $122;
       $123 = $3;
       $124 = ((($123)) + 496|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = $16;
       $127 = $126&255;
       $128 = (($125) + ($127)|0);
       $129 = HEAP8[$128>>0]|0;
       $16 = $129;
       $130 = $3;
       $131 = ((($130)) + 496|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = $17;
       $134 = $133&255;
       $135 = (($132) + ($134)|0);
       $136 = HEAP8[$135>>0]|0;
       $17 = $136;
       $137 = $6;
       $138 = $137 | 1;
       $6 = $138;
       $139 = $3;
       $140 = ((($139)) + 492|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = $7;
       $143 = $15;
       $144 = $143&255;
       $145 = Math_imul($142, $144)|0;
       $146 = $8;
       $147 = $16;
       $148 = $147&255;
       $149 = Math_imul($146, $148)|0;
       $150 = (($145) + ($149))|0;
       $151 = $9;
       $152 = $17;
       $153 = $152&255;
       $154 = Math_imul($151, $153)|0;
       $155 = (($150) + ($154))|0;
       $156 = (($155) + 16384)|0;
       $157 = $156 >>> 15;
       $158 = (($141) + ($157)|0);
       $159 = HEAP8[$158>>0]|0;
       $160 = $13;
       $161 = ((($160)) + 1|0);
       $13 = $161;
       HEAP8[$160>>0] = $159;
      }
      $176 = $11;
      $177 = ($176|0)!=(0);
      if ($177) {
       $178 = $12;
       $179 = ((($178)) + 1|0);
       $12 = $179;
       $180 = HEAP8[$178>>0]|0;
       $181 = $13;
       $182 = ((($181)) + 1|0);
       $13 = $182;
       HEAP8[$181>>0] = $180;
      }
      $183 = $14;
      $184 = (($183) + 1)|0;
      $14 = $184;
     }
    }
   }
   $185 = $5;
   $18 = $185;
   $186 = $5;
   $19 = $186;
   $20 = 0;
   while(1) {
    $187 = $20;
    $188 = $10;
    $189 = ($187>>>0)<($188>>>0);
    if (!($189)) {
     break L7;
    }
    $190 = $18;
    $191 = ((($190)) + 1|0);
    $18 = $191;
    $192 = HEAP8[$190>>0]|0;
    $21 = $192;
    $193 = $18;
    $194 = ((($193)) + 1|0);
    $18 = $194;
    $195 = HEAP8[$193>>0]|0;
    $22 = $195;
    $196 = $18;
    $197 = ((($196)) + 1|0);
    $18 = $197;
    $198 = HEAP8[$196>>0]|0;
    $23 = $198;
    $199 = $21;
    $200 = $199&255;
    $201 = $22;
    $202 = $201&255;
    $203 = ($200|0)!=($202|0);
    if ($203) {
     label = 21;
    } else {
     $204 = $21;
     $205 = $204&255;
     $206 = $23;
     $207 = $206&255;
     $208 = ($205|0)!=($207|0);
     if ($208) {
      label = 21;
     } else {
      $229 = $21;
      $230 = $19;
      $231 = ((($230)) + 1|0);
      $19 = $231;
      HEAP8[$230>>0] = $229;
     }
    }
    if ((label|0) == 21) {
     label = 0;
     $209 = $6;
     $210 = $209 | 1;
     $6 = $210;
     $211 = $7;
     $212 = $21;
     $213 = $212&255;
     $214 = Math_imul($211, $213)|0;
     $215 = $8;
     $216 = $22;
     $217 = $216&255;
     $218 = Math_imul($215, $217)|0;
     $219 = (($214) + ($218))|0;
     $220 = $9;
     $221 = $23;
     $222 = $221&255;
     $223 = Math_imul($220, $222)|0;
     $224 = (($219) + ($223))|0;
     $225 = $224 >>> 15;
     $226 = $225&255;
     $227 = $19;
     $228 = ((($227)) + 1|0);
     $19 = $228;
     HEAP8[$227>>0] = $226;
    }
    $232 = $11;
    $233 = ($232|0)!=(0);
    if ($233) {
     $234 = $18;
     $235 = ((($234)) + 1|0);
     $18 = $235;
     $236 = HEAP8[$234>>0]|0;
     $237 = $19;
     $238 = ((($237)) + 1|0);
     $19 = $238;
     HEAP8[$237>>0] = $236;
    }
    $239 = $20;
    $240 = (($239) + 1)|0;
    $20 = $240;
   }
  } else {
   $241 = ((($84)) + 504|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = ($242|0)!=(0|0);
   if ($243) {
    $244 = $3;
    $245 = ((($244)) + 500|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = ($246|0)!=(0|0);
    if ($247) {
     $248 = $5;
     $24 = $248;
     $249 = $5;
     $25 = $249;
     $26 = 0;
     while(1) {
      $250 = $26;
      $251 = $10;
      $252 = ($250>>>0)<($251>>>0);
      if (!($252)) {
       break L7;
      }
      $253 = $24;
      $254 = ((($253)) + 1|0);
      $24 = $254;
      $255 = HEAP8[$253>>0]|0;
      $31 = $255;
      $256 = $24;
      $257 = ((($256)) + 1|0);
      $24 = $257;
      $258 = HEAP8[$256>>0]|0;
      $32 = $258;
      $259 = $31;
      $260 = $259&255;
      $261 = $260 << 8;
      $262 = $32;
      $263 = $262&255;
      $264 = $261 | $263;
      $265 = $264&65535;
      $27 = $265;
      $266 = $24;
      $267 = ((($266)) + 1|0);
      $24 = $267;
      $268 = HEAP8[$266>>0]|0;
      $31 = $268;
      $269 = $24;
      $270 = ((($269)) + 1|0);
      $24 = $270;
      $271 = HEAP8[$269>>0]|0;
      $32 = $271;
      $272 = $31;
      $273 = $272&255;
      $274 = $273 << 8;
      $275 = $32;
      $276 = $275&255;
      $277 = $274 | $276;
      $278 = $277&65535;
      $28 = $278;
      $279 = $24;
      $280 = ((($279)) + 1|0);
      $24 = $280;
      $281 = HEAP8[$279>>0]|0;
      $31 = $281;
      $282 = $24;
      $283 = ((($282)) + 1|0);
      $24 = $283;
      $284 = HEAP8[$282>>0]|0;
      $32 = $284;
      $285 = $31;
      $286 = $285&255;
      $287 = $286 << 8;
      $288 = $32;
      $289 = $288&255;
      $290 = $287 | $289;
      $291 = $290&65535;
      $29 = $291;
      $292 = $27;
      $293 = $292&65535;
      $294 = $28;
      $295 = $294&65535;
      $296 = ($293|0)==($295|0);
      do {
       if ($296) {
        $297 = $27;
        $298 = $297&65535;
        $299 = $29;
        $300 = $299&65535;
        $301 = ($298|0)==($300|0);
        if ($301) {
         $302 = $3;
         $303 = ((($302)) + 488|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = ($304|0)!=(0|0);
         if ($305) {
          $306 = $3;
          $307 = ((($306)) + 488|0);
          $308 = HEAP32[$307>>2]|0;
          $309 = $27;
          $310 = $309&65535;
          $311 = $310 & 255;
          $312 = $3;
          $313 = ((($312)) + 476|0);
          $314 = HEAP32[$313>>2]|0;
          $315 = $311 >> $314;
          $316 = (($308) + ($315<<2)|0);
          $317 = HEAP32[$316>>2]|0;
          $318 = $27;
          $319 = $318&65535;
          $320 = $319 >> 8;
          $321 = (($317) + ($320<<1)|0);
          $322 = HEAP16[$321>>1]|0;
          $30 = $322;
          break;
         } else {
          $323 = $27;
          $30 = $323;
          break;
         }
        } else {
         label = 35;
        }
       } else {
        label = 35;
       }
      } while(0);
      if ((label|0) == 35) {
       label = 0;
       $324 = $3;
       $325 = ((($324)) + 504|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = $27;
       $328 = $327&65535;
       $329 = $328 & 255;
       $330 = $3;
       $331 = ((($330)) + 476|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $329 >> $332;
       $334 = (($326) + ($333<<2)|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $27;
       $337 = $336&65535;
       $338 = $337 >> 8;
       $339 = (($335) + ($338<<1)|0);
       $340 = HEAP16[$339>>1]|0;
       $33 = $340;
       $341 = $3;
       $342 = ((($341)) + 504|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = $28;
       $345 = $344&65535;
       $346 = $345 & 255;
       $347 = $3;
       $348 = ((($347)) + 476|0);
       $349 = HEAP32[$348>>2]|0;
       $350 = $346 >> $349;
       $351 = (($343) + ($350<<2)|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = $28;
       $354 = $353&65535;
       $355 = $354 >> 8;
       $356 = (($352) + ($355<<1)|0);
       $357 = HEAP16[$356>>1]|0;
       $34 = $357;
       $358 = $3;
       $359 = ((($358)) + 504|0);
       $360 = HEAP32[$359>>2]|0;
       $361 = $29;
       $362 = $361&65535;
       $363 = $362 & 255;
       $364 = $3;
       $365 = ((($364)) + 476|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = $363 >> $366;
       $368 = (($360) + ($367<<2)|0);
       $369 = HEAP32[$368>>2]|0;
       $370 = $29;
       $371 = $370&65535;
       $372 = $371 >> 8;
       $373 = (($369) + ($372<<1)|0);
       $374 = HEAP16[$373>>1]|0;
       $35 = $374;
       $375 = $7;
       $376 = $33;
       $377 = $376&65535;
       $378 = Math_imul($375, $377)|0;
       $379 = $8;
       $380 = $34;
       $381 = $380&65535;
       $382 = Math_imul($379, $381)|0;
       $383 = (($378) + ($382))|0;
       $384 = $9;
       $385 = $35;
       $386 = $385&65535;
       $387 = Math_imul($384, $386)|0;
       $388 = (($383) + ($387))|0;
       $389 = (($388) + 16384)|0;
       $390 = $389 >>> 15;
       $391 = $390&65535;
       $36 = $391;
       $392 = $3;
       $393 = ((($392)) + 500|0);
       $394 = HEAP32[$393>>2]|0;
       $395 = $36;
       $396 = $395&65535;
       $397 = $396 & 255;
       $398 = $3;
       $399 = ((($398)) + 476|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = $397 >> $400;
       $402 = (($394) + ($401<<2)|0);
       $403 = HEAP32[$402>>2]|0;
       $404 = $36;
       $405 = $404&65535;
       $406 = $405 >> 8;
       $407 = (($403) + ($406<<1)|0);
       $408 = HEAP16[$407>>1]|0;
       $30 = $408;
       $409 = $6;
       $410 = $409 | 1;
       $6 = $410;
      }
      $411 = $30;
      $412 = $411&65535;
      $413 = $412 >> 8;
      $414 = $413 & 255;
      $415 = $414&255;
      $416 = $25;
      $417 = ((($416)) + 1|0);
      $25 = $417;
      HEAP8[$416>>0] = $415;
      $418 = $30;
      $419 = $418&65535;
      $420 = $419 & 255;
      $421 = $420&255;
      $422 = $25;
      $423 = ((($422)) + 1|0);
      $25 = $423;
      HEAP8[$422>>0] = $421;
      $424 = $11;
      $425 = ($424|0)!=(0);
      if ($425) {
       $426 = $24;
       $427 = ((($426)) + 1|0);
       $24 = $427;
       $428 = HEAP8[$426>>0]|0;
       $429 = $25;
       $430 = ((($429)) + 1|0);
       $25 = $430;
       HEAP8[$429>>0] = $428;
       $431 = $24;
       $432 = ((($431)) + 1|0);
       $24 = $432;
       $433 = HEAP8[$431>>0]|0;
       $434 = $25;
       $435 = ((($434)) + 1|0);
       $25 = $435;
       HEAP8[$434>>0] = $433;
      }
      $436 = $26;
      $437 = (($436) + 1)|0;
      $26 = $437;
     }
    }
   }
   $438 = $5;
   $37 = $438;
   $439 = $5;
   $38 = $439;
   $39 = 0;
   while(1) {
    $440 = $39;
    $441 = $10;
    $442 = ($440>>>0)<($441>>>0);
    if (!($442)) {
     break L7;
    }
    $443 = $37;
    $444 = ((($443)) + 1|0);
    $37 = $444;
    $445 = HEAP8[$443>>0]|0;
    $44 = $445;
    $446 = $37;
    $447 = ((($446)) + 1|0);
    $37 = $447;
    $448 = HEAP8[$446>>0]|0;
    $45 = $448;
    $449 = $44;
    $450 = $449&255;
    $451 = $450 << 8;
    $452 = $45;
    $453 = $452&255;
    $454 = $451 | $453;
    $455 = $454&65535;
    $40 = $455;
    $456 = $37;
    $457 = ((($456)) + 1|0);
    $37 = $457;
    $458 = HEAP8[$456>>0]|0;
    $44 = $458;
    $459 = $37;
    $460 = ((($459)) + 1|0);
    $37 = $460;
    $461 = HEAP8[$459>>0]|0;
    $45 = $461;
    $462 = $44;
    $463 = $462&255;
    $464 = $463 << 8;
    $465 = $45;
    $466 = $465&255;
    $467 = $464 | $466;
    $468 = $467&65535;
    $41 = $468;
    $469 = $37;
    $470 = ((($469)) + 1|0);
    $37 = $470;
    $471 = HEAP8[$469>>0]|0;
    $44 = $471;
    $472 = $37;
    $473 = ((($472)) + 1|0);
    $37 = $473;
    $474 = HEAP8[$472>>0]|0;
    $45 = $474;
    $475 = $44;
    $476 = $475&255;
    $477 = $476 << 8;
    $478 = $45;
    $479 = $478&255;
    $480 = $477 | $479;
    $481 = $480&65535;
    $42 = $481;
    $482 = $40;
    $483 = $482&65535;
    $484 = $41;
    $485 = $484&65535;
    $486 = ($483|0)!=($485|0);
    if ($486) {
     label = 43;
    } else {
     $487 = $40;
     $488 = $487&65535;
     $489 = $42;
     $490 = $489&65535;
     $491 = ($488|0)!=($490|0);
     if ($491) {
      label = 43;
     }
    }
    if ((label|0) == 43) {
     label = 0;
     $492 = $6;
     $493 = $492 | 1;
     $6 = $493;
    }
    $494 = $7;
    $495 = $40;
    $496 = $495&65535;
    $497 = Math_imul($494, $496)|0;
    $498 = $8;
    $499 = $41;
    $500 = $499&65535;
    $501 = Math_imul($498, $500)|0;
    $502 = (($497) + ($501))|0;
    $503 = $9;
    $504 = $42;
    $505 = $504&65535;
    $506 = Math_imul($503, $505)|0;
    $507 = (($502) + ($506))|0;
    $508 = (($507) + 16384)|0;
    $509 = $508 >>> 15;
    $510 = $509&65535;
    $43 = $510;
    $511 = $43;
    $512 = $511&65535;
    $513 = $512 >> 8;
    $514 = $513 & 255;
    $515 = $514&255;
    $516 = $38;
    $517 = ((($516)) + 1|0);
    $38 = $517;
    HEAP8[$516>>0] = $515;
    $518 = $43;
    $519 = $518&65535;
    $520 = $519 & 255;
    $521 = $520&255;
    $522 = $38;
    $523 = ((($522)) + 1|0);
    $38 = $523;
    HEAP8[$522>>0] = $521;
    $524 = $11;
    $525 = ($524|0)!=(0);
    if ($525) {
     $526 = $37;
     $527 = ((($526)) + 1|0);
     $37 = $527;
     $528 = HEAP8[$526>>0]|0;
     $529 = $38;
     $530 = ((($529)) + 1|0);
     $38 = $530;
     HEAP8[$529>>0] = $528;
     $531 = $37;
     $532 = ((($531)) + 1|0);
     $37 = $532;
     $533 = HEAP8[$531>>0]|0;
     $534 = $38;
     $535 = ((($534)) + 1|0);
     $38 = $535;
     HEAP8[$534>>0] = $533;
    }
    $536 = $39;
    $537 = (($536) + 1)|0;
    $39 = $537;
   }
  }
 } while(0);
 $538 = $4;
 $539 = ((($538)) + 10|0);
 $540 = HEAP8[$539>>0]|0;
 $541 = $540&255;
 $542 = (($541) - 2)|0;
 $543 = $542&255;
 $544 = $4;
 $545 = ((($544)) + 10|0);
 HEAP8[$545>>0] = $543;
 $546 = $4;
 $547 = ((($546)) + 8|0);
 $548 = HEAP8[$547>>0]|0;
 $549 = $548&255;
 $550 = $549 & -3;
 $551 = $550&255;
 $552 = $4;
 $553 = ((($552)) + 8|0);
 HEAP8[$553>>0] = $551;
 $554 = $4;
 $555 = ((($554)) + 10|0);
 $556 = HEAP8[$555>>0]|0;
 $557 = $556&255;
 $558 = $4;
 $559 = ((($558)) + 9|0);
 $560 = HEAP8[$559>>0]|0;
 $561 = $560&255;
 $562 = Math_imul($557, $561)|0;
 $563 = $562&255;
 $564 = $4;
 $565 = ((($564)) + 11|0);
 HEAP8[$565>>0] = $563;
 $566 = $4;
 $567 = ((($566)) + 11|0);
 $568 = HEAP8[$567>>0]|0;
 $569 = $568&255;
 $570 = ($569|0)>=(8);
 $571 = $10;
 $572 = $4;
 $573 = ((($572)) + 11|0);
 $574 = HEAP8[$573>>0]|0;
 $575 = $574&255;
 if ($570) {
  $576 = $575 >>> 3;
  $577 = Math_imul($571, $576)|0;
  $583 = $577;
 } else {
  $578 = Math_imul($571, $575)|0;
  $579 = (($578) + 7)|0;
  $580 = $579 >>> 3;
  $583 = $580;
 }
 $581 = $4;
 $582 = ((($581)) + 4|0);
 HEAP32[$582>>2] = $583;
 $584 = $6;
 STACKTOP = sp;return ($584|0);
}
function _png_do_gray_to_rgb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $16 = $2;
 $17 = ((($16)) + 9|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($19|0)>=(8);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $2;
 $22 = ((($21)) + 8|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 & 2;
 $26 = ($25|0)==(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $2;
 $28 = ((($27)) + 8|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = ($30|0)==(0);
 $32 = $2;
 L7: do {
  if ($31) {
   $33 = ((($32)) + 9|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($35|0)==(8);
   $37 = $3;
   $38 = $5;
   if ($36) {
    $39 = (($37) + ($38)|0);
    $40 = ((($39)) + -1|0);
    $6 = $40;
    $41 = $6;
    $42 = $5;
    $43 = $42<<1;
    $44 = (($41) + ($43)|0);
    $7 = $44;
    $4 = 0;
    while(1) {
     $45 = $4;
     $46 = $5;
     $47 = ($45>>>0)<($46>>>0);
     if (!($47)) {
      break L7;
     }
     $48 = $6;
     $49 = HEAP8[$48>>0]|0;
     $50 = $7;
     $51 = ((($50)) + -1|0);
     $7 = $51;
     HEAP8[$50>>0] = $49;
     $52 = $6;
     $53 = HEAP8[$52>>0]|0;
     $54 = $7;
     $55 = ((($54)) + -1|0);
     $7 = $55;
     HEAP8[$54>>0] = $53;
     $56 = $6;
     $57 = ((($56)) + -1|0);
     $6 = $57;
     $58 = HEAP8[$56>>0]|0;
     $59 = $7;
     $60 = ((($59)) + -1|0);
     $7 = $60;
     HEAP8[$59>>0] = $58;
     $61 = $4;
     $62 = (($61) + 1)|0;
     $4 = $62;
    }
   } else {
    $63 = $38<<1;
    $64 = (($37) + ($63)|0);
    $65 = ((($64)) + -1|0);
    $8 = $65;
    $66 = $8;
    $67 = $5;
    $68 = $67<<2;
    $69 = (($66) + ($68)|0);
    $9 = $69;
    $4 = 0;
    while(1) {
     $70 = $4;
     $71 = $5;
     $72 = ($70>>>0)<($71>>>0);
     if (!($72)) {
      break L7;
     }
     $73 = $8;
     $74 = HEAP8[$73>>0]|0;
     $75 = $9;
     $76 = ((($75)) + -1|0);
     $9 = $76;
     HEAP8[$75>>0] = $74;
     $77 = $8;
     $78 = ((($77)) + -1|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $9;
     $81 = ((($80)) + -1|0);
     $9 = $81;
     HEAP8[$80>>0] = $79;
     $82 = $8;
     $83 = HEAP8[$82>>0]|0;
     $84 = $9;
     $85 = ((($84)) + -1|0);
     $9 = $85;
     HEAP8[$84>>0] = $83;
     $86 = $8;
     $87 = ((($86)) + -1|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $9;
     $90 = ((($89)) + -1|0);
     $9 = $90;
     HEAP8[$89>>0] = $88;
     $91 = $8;
     $92 = ((($91)) + -1|0);
     $8 = $92;
     $93 = HEAP8[$91>>0]|0;
     $94 = $9;
     $95 = ((($94)) + -1|0);
     $9 = $95;
     HEAP8[$94>>0] = $93;
     $96 = $8;
     $97 = ((($96)) + -1|0);
     $8 = $97;
     $98 = HEAP8[$96>>0]|0;
     $99 = $9;
     $100 = ((($99)) + -1|0);
     $9 = $100;
     HEAP8[$99>>0] = $98;
     $101 = $4;
     $102 = (($101) + 1)|0;
     $4 = $102;
    }
   }
  } else {
   $103 = ((($32)) + 8|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = ($105|0)==(4);
   if ($106) {
    $107 = $2;
    $108 = ((($107)) + 9|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109&255;
    $111 = ($110|0)==(8);
    $112 = $3;
    $113 = $5;
    if ($111) {
     $114 = $113<<1;
     $115 = (($112) + ($114)|0);
     $116 = ((($115)) + -1|0);
     $10 = $116;
     $117 = $10;
     $118 = $5;
     $119 = $118<<1;
     $120 = (($117) + ($119)|0);
     $11 = $120;
     $4 = 0;
     while(1) {
      $121 = $4;
      $122 = $5;
      $123 = ($121>>>0)<($122>>>0);
      if (!($123)) {
       break L7;
      }
      $124 = $10;
      $125 = ((($124)) + -1|0);
      $10 = $125;
      $126 = HEAP8[$124>>0]|0;
      $127 = $11;
      $128 = ((($127)) + -1|0);
      $11 = $128;
      HEAP8[$127>>0] = $126;
      $129 = $10;
      $130 = HEAP8[$129>>0]|0;
      $131 = $11;
      $132 = ((($131)) + -1|0);
      $11 = $132;
      HEAP8[$131>>0] = $130;
      $133 = $10;
      $134 = HEAP8[$133>>0]|0;
      $135 = $11;
      $136 = ((($135)) + -1|0);
      $11 = $136;
      HEAP8[$135>>0] = $134;
      $137 = $10;
      $138 = ((($137)) + -1|0);
      $10 = $138;
      $139 = HEAP8[$137>>0]|0;
      $140 = $11;
      $141 = ((($140)) + -1|0);
      $11 = $141;
      HEAP8[$140>>0] = $139;
      $142 = $4;
      $143 = (($142) + 1)|0;
      $4 = $143;
     }
    } else {
     $144 = $113<<2;
     $145 = (($112) + ($144)|0);
     $146 = ((($145)) + -1|0);
     $12 = $146;
     $147 = $12;
     $148 = $5;
     $149 = $148<<2;
     $150 = (($147) + ($149)|0);
     $13 = $150;
     $4 = 0;
     while(1) {
      $151 = $4;
      $152 = $5;
      $153 = ($151>>>0)<($152>>>0);
      if (!($153)) {
       break L7;
      }
      $154 = $12;
      $155 = ((($154)) + -1|0);
      $12 = $155;
      $156 = HEAP8[$154>>0]|0;
      $157 = $13;
      $158 = ((($157)) + -1|0);
      $13 = $158;
      HEAP8[$157>>0] = $156;
      $159 = $12;
      $160 = ((($159)) + -1|0);
      $12 = $160;
      $161 = HEAP8[$159>>0]|0;
      $162 = $13;
      $163 = ((($162)) + -1|0);
      $13 = $163;
      HEAP8[$162>>0] = $161;
      $164 = $12;
      $165 = HEAP8[$164>>0]|0;
      $166 = $13;
      $167 = ((($166)) + -1|0);
      $13 = $167;
      HEAP8[$166>>0] = $165;
      $168 = $12;
      $169 = ((($168)) + -1|0);
      $170 = HEAP8[$169>>0]|0;
      $171 = $13;
      $172 = ((($171)) + -1|0);
      $13 = $172;
      HEAP8[$171>>0] = $170;
      $173 = $12;
      $174 = HEAP8[$173>>0]|0;
      $175 = $13;
      $176 = ((($175)) + -1|0);
      $13 = $176;
      HEAP8[$175>>0] = $174;
      $177 = $12;
      $178 = ((($177)) + -1|0);
      $179 = HEAP8[$178>>0]|0;
      $180 = $13;
      $181 = ((($180)) + -1|0);
      $13 = $181;
      HEAP8[$180>>0] = $179;
      $182 = $12;
      $183 = ((($182)) + -1|0);
      $12 = $183;
      $184 = HEAP8[$182>>0]|0;
      $185 = $13;
      $186 = ((($185)) + -1|0);
      $13 = $186;
      HEAP8[$185>>0] = $184;
      $187 = $12;
      $188 = ((($187)) + -1|0);
      $12 = $188;
      $189 = HEAP8[$187>>0]|0;
      $190 = $13;
      $191 = ((($190)) + -1|0);
      $13 = $191;
      HEAP8[$190>>0] = $189;
      $192 = $4;
      $193 = (($192) + 1)|0;
      $4 = $193;
     }
    }
   }
  }
 } while(0);
 $194 = $2;
 $195 = ((($194)) + 10|0);
 $196 = HEAP8[$195>>0]|0;
 $197 = $196&255;
 $198 = (($197) + 2)|0;
 $199 = $198&255;
 $200 = $2;
 $201 = ((($200)) + 10|0);
 HEAP8[$201>>0] = $199;
 $202 = $2;
 $203 = ((($202)) + 8|0);
 $204 = HEAP8[$203>>0]|0;
 $205 = $204&255;
 $206 = $205 | 2;
 $207 = $206&255;
 HEAP8[$203>>0] = $207;
 $208 = $2;
 $209 = ((($208)) + 10|0);
 $210 = HEAP8[$209>>0]|0;
 $211 = $210&255;
 $212 = $2;
 $213 = ((($212)) + 9|0);
 $214 = HEAP8[$213>>0]|0;
 $215 = $214&255;
 $216 = Math_imul($211, $215)|0;
 $217 = $216&255;
 $218 = $2;
 $219 = ((($218)) + 11|0);
 HEAP8[$219>>0] = $217;
 $220 = $2;
 $221 = ((($220)) + 11|0);
 $222 = HEAP8[$221>>0]|0;
 $223 = $222&255;
 $224 = ($223|0)>=(8);
 $225 = $5;
 $226 = $2;
 $227 = ((($226)) + 11|0);
 $228 = HEAP8[$227>>0]|0;
 $229 = $228&255;
 if ($224) {
  $230 = $229 >>> 3;
  $231 = Math_imul($225, $230)|0;
  $237 = $231;
 } else {
  $232 = Math_imul($225, $229)|0;
  $233 = (($232) + 7)|0;
  $234 = $233 >>> 3;
  $237 = $234;
 }
 $235 = $2;
 $236 = ((($235)) + 4|0);
 HEAP32[$236>>2] = $237;
 STACKTOP = sp;return;
}
function _png_do_compose($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink16$sink = 0, $$sink18$sink = 0, $$sink2 = 0, $$sink24$sink = 0, $$sink26$sink = 0, $$sink3 = 0, $$sink32$sink = 0, $$sink34$sink = 0, $$sink36 = 0, $$sink38 = 0, $$sink40 = 0, $$sink42 = 0, $$sink44 = 0, $$sink46 = 0, $$sink5 = 0, $$sink6 = 0, $$sink8 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0;
 var $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0;
 var $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0;
 var $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0;
 var $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0;
 var $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0;
 var $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0;
 var $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0;
 var $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0;
 var $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0;
 var $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0;
 var $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0;
 var $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0;
 var $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0;
 var $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0;
 var $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0;
 var $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0;
 var $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0;
 var $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0;
 var $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0;
 var $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0;
 var $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0;
 var $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0;
 var $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0;
 var $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0;
 var $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0;
 var $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0;
 var $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0;
 var $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0;
 var $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0;
 var $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0;
 var $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0;
 var $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0;
 var $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0;
 var $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0;
 var $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0;
 var $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0;
 var $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0;
 var $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0;
 var $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0;
 var $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0;
 var $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0;
 var $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0;
 var $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0;
 var $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0;
 var $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0;
 var $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0;
 var $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0;
 var $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0;
 var $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0;
 var $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0;
 var $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0;
 var $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0;
 var $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0;
 var $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0;
 var $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0;
 var $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0;
 var $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0;
 var $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0;
 var $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0;
 var $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0;
 var $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0;
 var $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0;
 var $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0;
 var $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0;
 var $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0;
 var $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0;
 var $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0;
 var $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0;
 var $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0;
 var $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0;
 var $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0;
 var $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond29 = 0, $or$cond31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $79 = $5;
 $80 = ((($79)) + 484|0);
 $81 = HEAP32[$80>>2]|0;
 $6 = $81;
 $82 = $5;
 $83 = ((($82)) + 492|0);
 $84 = HEAP32[$83>>2]|0;
 $7 = $84;
 $85 = $5;
 $86 = ((($85)) + 496|0);
 $87 = HEAP32[$86>>2]|0;
 $8 = $87;
 $88 = $5;
 $89 = ((($88)) + 488|0);
 $90 = HEAP32[$89>>2]|0;
 $9 = $90;
 $91 = $5;
 $92 = ((($91)) + 500|0);
 $93 = HEAP32[$92>>2]|0;
 $10 = $93;
 $94 = $5;
 $95 = ((($94)) + 504|0);
 $96 = HEAP32[$95>>2]|0;
 $11 = $96;
 $97 = $5;
 $98 = ((($97)) + 476|0);
 $99 = HEAP32[$98>>2]|0;
 $12 = $99;
 $100 = $5;
 $101 = ((($100)) + 212|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $102 & 8192;
 $104 = ($103|0)!=(0);
 $105 = $104&1;
 $13 = $105;
 $106 = $3;
 $107 = HEAP32[$106>>2]|0;
 $16 = $107;
 $108 = $3;
 $109 = ((($108)) + 8|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110&255;
 switch ($111|0) {
 case 0:  {
  $112 = $3;
  $113 = ((($112)) + 9|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114&255;
  switch ($115|0) {
  case 1:  {
   $116 = $4;
   $14 = $116;
   $17 = 7;
   $15 = 0;
   while(1) {
    $117 = $15;
    $118 = $16;
    $119 = ($117>>>0)<($118>>>0);
    if (!($119)) {
     break;
    }
    $120 = $14;
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = $17;
    $124 = $122 >> $123;
    $125 = $124 & 1;
    $126 = $125&65535;
    $127 = $126&65535;
    $128 = $5;
    $129 = ((($128)) + 524|0);
    $130 = ((($129)) + 8|0);
    $131 = HEAP16[$130>>1]|0;
    $132 = $131&65535;
    $133 = ($127|0)==($132|0);
    if ($133) {
     $134 = $14;
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     $137 = $17;
     $138 = (7 - ($137))|0;
     $139 = 32639 >> $138;
     $140 = $136 & $139;
     $18 = $140;
     $141 = $5;
     $142 = ((($141)) + 444|0);
     $143 = ((($142)) + 8|0);
     $144 = HEAP16[$143>>1]|0;
     $145 = $144&65535;
     $146 = $17;
     $147 = $145 << $146;
     $148 = $18;
     $149 = $148 | $147;
     $18 = $149;
     $150 = $18;
     $151 = $150 & 255;
     $152 = $151&255;
     $153 = $14;
     HEAP8[$153>>0] = $152;
    }
    $154 = $17;
    $155 = ($154|0)==(0);
    if ($155) {
     $17 = 7;
     $156 = $14;
     $157 = ((($156)) + 1|0);
     $14 = $157;
    } else {
     $158 = $17;
     $159 = (($158) + -1)|0;
     $17 = $159;
    }
    $160 = $15;
    $161 = (($160) + 1)|0;
    $15 = $161;
   }
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $162 = $6;
   $163 = ($162|0)!=(0|0);
   $164 = $4;
   $14 = $164;
   $17 = 6;
   $15 = 0;
   if (!($163)) {
    while(1) {
     $244 = $15;
     $245 = $16;
     $246 = ($244>>>0)<($245>>>0);
     if (!($246)) {
      break;
     }
     $247 = $14;
     $248 = HEAP8[$247>>0]|0;
     $249 = $248&255;
     $250 = $17;
     $251 = $249 >> $250;
     $252 = $251 & 3;
     $253 = $252&65535;
     $254 = $253&65535;
     $255 = $5;
     $256 = ((($255)) + 524|0);
     $257 = ((($256)) + 8|0);
     $258 = HEAP16[$257>>1]|0;
     $259 = $258&65535;
     $260 = ($254|0)==($259|0);
     if ($260) {
      $261 = $14;
      $262 = HEAP8[$261>>0]|0;
      $263 = $262&255;
      $264 = $17;
      $265 = (6 - ($264))|0;
      $266 = 16191 >> $265;
      $267 = $263 & $266;
      $23 = $267;
      $268 = $5;
      $269 = ((($268)) + 444|0);
      $270 = ((($269)) + 8|0);
      $271 = HEAP16[$270>>1]|0;
      $272 = $271&65535;
      $273 = $17;
      $274 = $272 << $273;
      $275 = $23;
      $276 = $275 | $274;
      $23 = $276;
      $277 = $23;
      $278 = $277 & 255;
      $279 = $278&255;
      $280 = $14;
      HEAP8[$280>>0] = $279;
     }
     $281 = $17;
     $282 = ($281|0)==(0);
     if ($282) {
      $17 = 6;
      $283 = $14;
      $284 = ((($283)) + 1|0);
      $14 = $284;
     } else {
      $285 = $17;
      $286 = (($285) - 2)|0;
      $17 = $286;
     }
     $287 = $15;
     $288 = (($287) + 1)|0;
     $15 = $288;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $165 = $15;
    $166 = $16;
    $167 = ($165>>>0)<($166>>>0);
    if (!($167)) {
     break;
    }
    $168 = $14;
    $169 = HEAP8[$168>>0]|0;
    $170 = $169&255;
    $171 = $17;
    $172 = $170 >> $171;
    $173 = $172 & 3;
    $174 = $173&65535;
    $175 = $174&65535;
    $176 = $5;
    $177 = ((($176)) + 524|0);
    $178 = ((($177)) + 8|0);
    $179 = HEAP16[$178>>1]|0;
    $180 = $179&65535;
    $181 = ($175|0)==($180|0);
    $182 = $14;
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $185 = $17;
    if ($181) {
     $186 = (6 - ($185))|0;
     $187 = 16191 >> $186;
     $188 = $184 & $187;
     $19 = $188;
     $189 = $5;
     $190 = ((($189)) + 444|0);
     $191 = ((($190)) + 8|0);
     $192 = HEAP16[$191>>1]|0;
     $193 = $192&65535;
     $194 = $17;
     $195 = $193 << $194;
     $196 = $19;
     $197 = $196 | $195;
     $19 = $197;
     $198 = $19;
     $199 = $198 & 255;
     $200 = $199&255;
     $201 = $14;
     HEAP8[$201>>0] = $200;
    } else {
     $202 = $184 >> $185;
     $203 = $202 & 3;
     $20 = $203;
     $204 = $6;
     $205 = $20;
     $206 = $20;
     $207 = $206 << 2;
     $208 = $205 | $207;
     $209 = $20;
     $210 = $209 << 4;
     $211 = $208 | $210;
     $212 = $20;
     $213 = $212 << 6;
     $214 = $211 | $213;
     $215 = (($204) + ($214)|0);
     $216 = HEAP8[$215>>0]|0;
     $217 = $216&255;
     $218 = $217 >> 6;
     $219 = $218 & 3;
     $21 = $219;
     $220 = $14;
     $221 = HEAP8[$220>>0]|0;
     $222 = $221&255;
     $223 = $17;
     $224 = (6 - ($223))|0;
     $225 = 16191 >> $224;
     $226 = $222 & $225;
     $22 = $226;
     $227 = $21;
     $228 = $17;
     $229 = $227 << $228;
     $230 = $22;
     $231 = $230 | $229;
     $22 = $231;
     $232 = $22;
     $233 = $232 & 255;
     $234 = $233&255;
     $235 = $14;
     HEAP8[$235>>0] = $234;
    }
    $236 = $17;
    $237 = ($236|0)==(0);
    if ($237) {
     $17 = 6;
     $238 = $14;
     $239 = ((($238)) + 1|0);
     $14 = $239;
    } else {
     $240 = $17;
     $241 = (($240) - 2)|0;
     $17 = $241;
    }
    $242 = $15;
    $243 = (($242) + 1)|0;
    $15 = $243;
   }
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $289 = $6;
   $290 = ($289|0)!=(0|0);
   $291 = $4;
   $14 = $291;
   $17 = 4;
   $15 = 0;
   if (!($290)) {
    while(1) {
     $365 = $15;
     $366 = $16;
     $367 = ($365>>>0)<($366>>>0);
     if (!($367)) {
      break;
     }
     $368 = $14;
     $369 = HEAP8[$368>>0]|0;
     $370 = $369&255;
     $371 = $17;
     $372 = $370 >> $371;
     $373 = $372 & 15;
     $374 = $373&65535;
     $375 = $374&65535;
     $376 = $5;
     $377 = ((($376)) + 524|0);
     $378 = ((($377)) + 8|0);
     $379 = HEAP16[$378>>1]|0;
     $380 = $379&65535;
     $381 = ($375|0)==($380|0);
     if ($381) {
      $382 = $14;
      $383 = HEAP8[$382>>0]|0;
      $384 = $383&255;
      $385 = $17;
      $386 = (4 - ($385))|0;
      $387 = 3855 >> $386;
      $388 = $384 & $387;
      $28 = $388;
      $389 = $5;
      $390 = ((($389)) + 444|0);
      $391 = ((($390)) + 8|0);
      $392 = HEAP16[$391>>1]|0;
      $393 = $392&65535;
      $394 = $17;
      $395 = $393 << $394;
      $396 = $28;
      $397 = $396 | $395;
      $28 = $397;
      $398 = $28;
      $399 = $398 & 255;
      $400 = $399&255;
      $401 = $14;
      HEAP8[$401>>0] = $400;
     }
     $402 = $17;
     $403 = ($402|0)==(0);
     if ($403) {
      $17 = 4;
      $404 = $14;
      $405 = ((($404)) + 1|0);
      $14 = $405;
     } else {
      $406 = $17;
      $407 = (($406) - 4)|0;
      $17 = $407;
     }
     $408 = $15;
     $409 = (($408) + 1)|0;
     $15 = $409;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $292 = $15;
    $293 = $16;
    $294 = ($292>>>0)<($293>>>0);
    if (!($294)) {
     break;
    }
    $295 = $14;
    $296 = HEAP8[$295>>0]|0;
    $297 = $296&255;
    $298 = $17;
    $299 = $297 >> $298;
    $300 = $299 & 15;
    $301 = $300&65535;
    $302 = $301&65535;
    $303 = $5;
    $304 = ((($303)) + 524|0);
    $305 = ((($304)) + 8|0);
    $306 = HEAP16[$305>>1]|0;
    $307 = $306&65535;
    $308 = ($302|0)==($307|0);
    $309 = $14;
    $310 = HEAP8[$309>>0]|0;
    $311 = $310&255;
    $312 = $17;
    if ($308) {
     $313 = (4 - ($312))|0;
     $314 = 3855 >> $313;
     $315 = $311 & $314;
     $24 = $315;
     $316 = $5;
     $317 = ((($316)) + 444|0);
     $318 = ((($317)) + 8|0);
     $319 = HEAP16[$318>>1]|0;
     $320 = $319&65535;
     $321 = $17;
     $322 = $320 << $321;
     $323 = $24;
     $324 = $323 | $322;
     $24 = $324;
     $325 = $24;
     $326 = $325 & 255;
     $327 = $326&255;
     $328 = $14;
     HEAP8[$328>>0] = $327;
    } else {
     $329 = $311 >> $312;
     $330 = $329 & 15;
     $25 = $330;
     $331 = $6;
     $332 = $25;
     $333 = $25;
     $334 = $333 << 4;
     $335 = $332 | $334;
     $336 = (($331) + ($335)|0);
     $337 = HEAP8[$336>>0]|0;
     $338 = $337&255;
     $339 = $338 >> 4;
     $340 = $339 & 15;
     $26 = $340;
     $341 = $14;
     $342 = HEAP8[$341>>0]|0;
     $343 = $342&255;
     $344 = $17;
     $345 = (4 - ($344))|0;
     $346 = 3855 >> $345;
     $347 = $343 & $346;
     $27 = $347;
     $348 = $26;
     $349 = $17;
     $350 = $348 << $349;
     $351 = $27;
     $352 = $351 | $350;
     $27 = $352;
     $353 = $27;
     $354 = $353 & 255;
     $355 = $354&255;
     $356 = $14;
     HEAP8[$356>>0] = $355;
    }
    $357 = $17;
    $358 = ($357|0)==(0);
    if ($358) {
     $17 = 4;
     $359 = $14;
     $360 = ((($359)) + 1|0);
     $14 = $360;
    } else {
     $361 = $17;
     $362 = (($361) - 4)|0;
     $17 = $362;
    }
    $363 = $15;
    $364 = (($363) + 1)|0;
    $15 = $364;
   }
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $410 = $6;
   $411 = ($410|0)!=(0|0);
   $412 = $4;
   $14 = $412;
   $15 = 0;
   if (!($411)) {
    while(1) {
     $442 = $15;
     $443 = $16;
     $444 = ($442>>>0)<($443>>>0);
     if (!($444)) {
      break;
     }
     $445 = $14;
     $446 = HEAP8[$445>>0]|0;
     $447 = $446&255;
     $448 = $5;
     $449 = ((($448)) + 524|0);
     $450 = ((($449)) + 8|0);
     $451 = HEAP16[$450>>1]|0;
     $452 = $451&65535;
     $453 = ($447|0)==($452|0);
     if ($453) {
      $454 = $5;
      $455 = ((($454)) + 444|0);
      $456 = ((($455)) + 8|0);
      $457 = HEAP16[$456>>1]|0;
      $458 = $457&255;
      $459 = $14;
      HEAP8[$459>>0] = $458;
     }
     $460 = $15;
     $461 = (($460) + 1)|0;
     $15 = $461;
     $462 = $14;
     $463 = ((($462)) + 1|0);
     $14 = $463;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $413 = $15;
    $414 = $16;
    $415 = ($413>>>0)<($414>>>0);
    if (!($415)) {
     break;
    }
    $416 = $14;
    $417 = HEAP8[$416>>0]|0;
    $418 = $417&255;
    $419 = $5;
    $420 = ((($419)) + 524|0);
    $421 = ((($420)) + 8|0);
    $422 = HEAP16[$421>>1]|0;
    $423 = $422&65535;
    $424 = ($418|0)==($423|0);
    if ($424) {
     $425 = $5;
     $426 = ((($425)) + 444|0);
     $427 = ((($426)) + 8|0);
     $428 = HEAP16[$427>>1]|0;
     $429 = $428&255;
     $430 = $14;
     HEAP8[$430>>0] = $429;
    } else {
     $431 = $6;
     $432 = $14;
     $433 = HEAP8[$432>>0]|0;
     $434 = $433&255;
     $435 = (($431) + ($434)|0);
     $436 = HEAP8[$435>>0]|0;
     $437 = $14;
     HEAP8[$437>>0] = $436;
    }
    $438 = $15;
    $439 = (($438) + 1)|0;
    $15 = $439;
    $440 = $14;
    $441 = ((($440)) + 1|0);
    $14 = $441;
   }
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $464 = $9;
   $465 = ($464|0)!=(0|0);
   $466 = $4;
   $14 = $466;
   $15 = 0;
   if (!($465)) {
    while(1) {
     $535 = $15;
     $536 = $16;
     $537 = ($535>>>0)<($536>>>0);
     if (!($537)) {
      break;
     }
     $538 = $14;
     $539 = HEAP8[$538>>0]|0;
     $540 = $539&255;
     $541 = $540 << 8;
     $542 = $14;
     $543 = ((($542)) + 1|0);
     $544 = HEAP8[$543>>0]|0;
     $545 = $544&255;
     $546 = (($541) + ($545))|0;
     $547 = $546&65535;
     $30 = $547;
     $548 = $30;
     $549 = $548&65535;
     $550 = $5;
     $551 = ((($550)) + 524|0);
     $552 = ((($551)) + 8|0);
     $553 = HEAP16[$552>>1]|0;
     $554 = $553&65535;
     $555 = ($549|0)==($554|0);
     if ($555) {
      $556 = $5;
      $557 = ((($556)) + 444|0);
      $558 = ((($557)) + 8|0);
      $559 = HEAP16[$558>>1]|0;
      $560 = $559&65535;
      $561 = $560 >> 8;
      $562 = $561 & 255;
      $563 = $562&255;
      $564 = $14;
      HEAP8[$564>>0] = $563;
      $565 = $5;
      $566 = ((($565)) + 444|0);
      $567 = ((($566)) + 8|0);
      $568 = HEAP16[$567>>1]|0;
      $569 = $568&65535;
      $570 = $569 & 255;
      $571 = $570&255;
      $572 = $14;
      $573 = ((($572)) + 1|0);
      HEAP8[$573>>0] = $571;
     }
     $574 = $15;
     $575 = (($574) + 1)|0;
     $15 = $575;
     $576 = $14;
     $577 = ((($576)) + 2|0);
     $14 = $577;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $467 = $15;
    $468 = $16;
    $469 = ($467>>>0)<($468>>>0);
    if (!($469)) {
     break;
    }
    $470 = $14;
    $471 = HEAP8[$470>>0]|0;
    $472 = $471&255;
    $473 = $472 << 8;
    $474 = $14;
    $475 = ((($474)) + 1|0);
    $476 = HEAP8[$475>>0]|0;
    $477 = $476&255;
    $478 = (($473) + ($477))|0;
    $479 = $478&65535;
    $29 = $479;
    $480 = $29;
    $481 = $480&65535;
    $482 = $5;
    $483 = ((($482)) + 524|0);
    $484 = ((($483)) + 8|0);
    $485 = HEAP16[$484>>1]|0;
    $486 = $485&65535;
    $487 = ($481|0)==($486|0);
    if ($487) {
     $488 = $5;
     $489 = ((($488)) + 444|0);
     $490 = ((($489)) + 8|0);
     $491 = HEAP16[$490>>1]|0;
     $492 = $491&65535;
     $493 = $492 >> 8;
     $494 = $493 & 255;
     $495 = $494&255;
     $496 = $14;
     HEAP8[$496>>0] = $495;
     $497 = $5;
     $498 = ((($497)) + 444|0);
     $499 = ((($498)) + 8|0);
     $500 = HEAP16[$499>>1]|0;
     $501 = $500&65535;
     $502 = $501 & 255;
     $503 = $502&255;
     $504 = $14;
     $$sink = $503;$$sink2 = $504;
    } else {
     $505 = $9;
     $506 = $14;
     $507 = ((($506)) + 1|0);
     $508 = HEAP8[$507>>0]|0;
     $509 = $508&255;
     $510 = $12;
     $511 = $509 >> $510;
     $512 = (($505) + ($511<<2)|0);
     $513 = HEAP32[$512>>2]|0;
     $514 = $14;
     $515 = HEAP8[$514>>0]|0;
     $516 = $515&255;
     $517 = (($513) + ($516<<1)|0);
     $518 = HEAP16[$517>>1]|0;
     $29 = $518;
     $519 = $29;
     $520 = $519&65535;
     $521 = $520 >> 8;
     $522 = $521 & 255;
     $523 = $522&255;
     $524 = $14;
     HEAP8[$524>>0] = $523;
     $525 = $29;
     $526 = $525&65535;
     $527 = $526 & 255;
     $528 = $527&255;
     $529 = $14;
     $$sink = $528;$$sink2 = $529;
    }
    $530 = ((($$sink2)) + 1|0);
    HEAP8[$530>>0] = $$sink;
    $531 = $15;
    $532 = (($531) + 1)|0;
    $15 = $532;
    $533 = $14;
    $534 = ((($533)) + 2|0);
    $14 = $534;
   }
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 2:  {
  $578 = $3;
  $579 = ((($578)) + 9|0);
  $580 = HEAP8[$579>>0]|0;
  $581 = $580&255;
  $582 = ($581|0)==(8);
  if ($582) {
   $583 = $6;
   $584 = ($583|0)!=(0|0);
   $585 = $4;
   $14 = $585;
   $15 = 0;
   if (!($584)) {
    while(1) {
     $666 = $15;
     $667 = $16;
     $668 = ($666>>>0)<($667>>>0);
     if (!($668)) {
      break;
     }
     $669 = $14;
     $670 = HEAP8[$669>>0]|0;
     $671 = $670&255;
     $672 = $5;
     $673 = ((($672)) + 524|0);
     $674 = ((($673)) + 2|0);
     $675 = HEAP16[$674>>1]|0;
     $676 = $675&65535;
     $677 = ($671|0)==($676|0);
     if ($677) {
      $678 = $14;
      $679 = ((($678)) + 1|0);
      $680 = HEAP8[$679>>0]|0;
      $681 = $680&255;
      $682 = $5;
      $683 = ((($682)) + 524|0);
      $684 = ((($683)) + 4|0);
      $685 = HEAP16[$684>>1]|0;
      $686 = $685&65535;
      $687 = ($681|0)==($686|0);
      if ($687) {
       $688 = $14;
       $689 = ((($688)) + 2|0);
       $690 = HEAP8[$689>>0]|0;
       $691 = $690&255;
       $692 = $5;
       $693 = ((($692)) + 524|0);
       $694 = ((($693)) + 6|0);
       $695 = HEAP16[$694>>1]|0;
       $696 = $695&65535;
       $697 = ($691|0)==($696|0);
       if ($697) {
        $698 = $5;
        $699 = ((($698)) + 444|0);
        $700 = ((($699)) + 2|0);
        $701 = HEAP16[$700>>1]|0;
        $702 = $701&255;
        $703 = $14;
        HEAP8[$703>>0] = $702;
        $704 = $5;
        $705 = ((($704)) + 444|0);
        $706 = ((($705)) + 4|0);
        $707 = HEAP16[$706>>1]|0;
        $708 = $707&255;
        $709 = $14;
        $710 = ((($709)) + 1|0);
        HEAP8[$710>>0] = $708;
        $711 = $5;
        $712 = ((($711)) + 444|0);
        $713 = ((($712)) + 6|0);
        $714 = HEAP16[$713>>1]|0;
        $715 = $714&255;
        $716 = $14;
        $717 = ((($716)) + 2|0);
        HEAP8[$717>>0] = $715;
       }
      }
     }
     $718 = $15;
     $719 = (($718) + 1)|0;
     $15 = $719;
     $720 = $14;
     $721 = ((($720)) + 3|0);
     $14 = $721;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $586 = $15;
    $587 = $16;
    $588 = ($586>>>0)<($587>>>0);
    if (!($588)) {
     break;
    }
    $589 = $14;
    $590 = HEAP8[$589>>0]|0;
    $591 = $590&255;
    $592 = $5;
    $593 = ((($592)) + 524|0);
    $594 = ((($593)) + 2|0);
    $595 = HEAP16[$594>>1]|0;
    $596 = $595&65535;
    $597 = ($591|0)==($596|0);
    if ($597) {
     $598 = $14;
     $599 = ((($598)) + 1|0);
     $600 = HEAP8[$599>>0]|0;
     $601 = $600&255;
     $602 = $5;
     $603 = ((($602)) + 524|0);
     $604 = ((($603)) + 4|0);
     $605 = HEAP16[$604>>1]|0;
     $606 = $605&65535;
     $607 = ($601|0)==($606|0);
     if ($607) {
      $608 = $14;
      $609 = ((($608)) + 2|0);
      $610 = HEAP8[$609>>0]|0;
      $611 = $610&255;
      $612 = $5;
      $613 = ((($612)) + 524|0);
      $614 = ((($613)) + 6|0);
      $615 = HEAP16[$614>>1]|0;
      $616 = $615&65535;
      $617 = ($611|0)==($616|0);
      if ($617) {
       $618 = $5;
       $619 = ((($618)) + 444|0);
       $620 = ((($619)) + 2|0);
       $621 = HEAP16[$620>>1]|0;
       $622 = $621&255;
       $623 = $14;
       HEAP8[$623>>0] = $622;
       $624 = $5;
       $625 = ((($624)) + 444|0);
       $626 = ((($625)) + 4|0);
       $627 = HEAP16[$626>>1]|0;
       $628 = $627&255;
       $629 = $14;
       $630 = ((($629)) + 1|0);
       HEAP8[$630>>0] = $628;
       $631 = $5;
       $632 = ((($631)) + 444|0);
       $633 = ((($632)) + 6|0);
       $634 = HEAP16[$633>>1]|0;
       $635 = $634&255;
       $636 = $14;
       $$sink3 = $635;$$sink5 = $636;
      } else {
       label = 70;
      }
     } else {
      label = 70;
     }
    } else {
     label = 70;
    }
    if ((label|0) == 70) {
     label = 0;
     $637 = $6;
     $638 = $14;
     $639 = HEAP8[$638>>0]|0;
     $640 = $639&255;
     $641 = (($637) + ($640)|0);
     $642 = HEAP8[$641>>0]|0;
     $643 = $14;
     HEAP8[$643>>0] = $642;
     $644 = $6;
     $645 = $14;
     $646 = ((($645)) + 1|0);
     $647 = HEAP8[$646>>0]|0;
     $648 = $647&255;
     $649 = (($644) + ($648)|0);
     $650 = HEAP8[$649>>0]|0;
     $651 = $14;
     $652 = ((($651)) + 1|0);
     HEAP8[$652>>0] = $650;
     $653 = $6;
     $654 = $14;
     $655 = ((($654)) + 2|0);
     $656 = HEAP8[$655>>0]|0;
     $657 = $656&255;
     $658 = (($653) + ($657)|0);
     $659 = HEAP8[$658>>0]|0;
     $660 = $14;
     $$sink3 = $659;$$sink5 = $660;
    }
    $661 = ((($$sink5)) + 2|0);
    HEAP8[$661>>0] = $$sink3;
    $662 = $15;
    $663 = (($662) + 1)|0;
    $15 = $663;
    $664 = $14;
    $665 = ((($664)) + 3|0);
    $14 = $665;
   }
   STACKTOP = sp;return;
  } else {
   $722 = $9;
   $723 = ($722|0)!=(0|0);
   $724 = $4;
   $14 = $724;
   $15 = 0;
   if (!($723)) {
    while(1) {
     $925 = $15;
     $926 = $16;
     $927 = ($925>>>0)<($926>>>0);
     if (!($927)) {
      break;
     }
     $928 = $14;
     $929 = HEAP8[$928>>0]|0;
     $930 = $929&255;
     $931 = $930 << 8;
     $932 = $14;
     $933 = ((($932)) + 1|0);
     $934 = HEAP8[$933>>0]|0;
     $935 = $934&255;
     $936 = (($931) + ($935))|0;
     $937 = $936&65535;
     $35 = $937;
     $938 = $14;
     $939 = ((($938)) + 2|0);
     $940 = HEAP8[$939>>0]|0;
     $941 = $940&255;
     $942 = $941 << 8;
     $943 = $14;
     $944 = ((($943)) + 3|0);
     $945 = HEAP8[$944>>0]|0;
     $946 = $945&255;
     $947 = (($942) + ($946))|0;
     $948 = $947&65535;
     $36 = $948;
     $949 = $14;
     $950 = ((($949)) + 4|0);
     $951 = HEAP8[$950>>0]|0;
     $952 = $951&255;
     $953 = $952 << 8;
     $954 = $14;
     $955 = ((($954)) + 5|0);
     $956 = HEAP8[$955>>0]|0;
     $957 = $956&255;
     $958 = (($953) + ($957))|0;
     $959 = $958&65535;
     $37 = $959;
     $960 = $35;
     $961 = $960&65535;
     $962 = $5;
     $963 = ((($962)) + 524|0);
     $964 = ((($963)) + 2|0);
     $965 = HEAP16[$964>>1]|0;
     $966 = $965&65535;
     $967 = ($961|0)==($966|0);
     if ($967) {
      $968 = $36;
      $969 = $968&65535;
      $970 = $5;
      $971 = ((($970)) + 524|0);
      $972 = ((($971)) + 4|0);
      $973 = HEAP16[$972>>1]|0;
      $974 = $973&65535;
      $975 = ($969|0)==($974|0);
      if ($975) {
       $976 = $37;
       $977 = $976&65535;
       $978 = $5;
       $979 = ((($978)) + 524|0);
       $980 = ((($979)) + 6|0);
       $981 = HEAP16[$980>>1]|0;
       $982 = $981&65535;
       $983 = ($977|0)==($982|0);
       if ($983) {
        $984 = $5;
        $985 = ((($984)) + 444|0);
        $986 = ((($985)) + 2|0);
        $987 = HEAP16[$986>>1]|0;
        $988 = $987&65535;
        $989 = $988 >> 8;
        $990 = $989 & 255;
        $991 = $990&255;
        $992 = $14;
        HEAP8[$992>>0] = $991;
        $993 = $5;
        $994 = ((($993)) + 444|0);
        $995 = ((($994)) + 2|0);
        $996 = HEAP16[$995>>1]|0;
        $997 = $996&65535;
        $998 = $997 & 255;
        $999 = $998&255;
        $1000 = $14;
        $1001 = ((($1000)) + 1|0);
        HEAP8[$1001>>0] = $999;
        $1002 = $5;
        $1003 = ((($1002)) + 444|0);
        $1004 = ((($1003)) + 4|0);
        $1005 = HEAP16[$1004>>1]|0;
        $1006 = $1005&65535;
        $1007 = $1006 >> 8;
        $1008 = $1007 & 255;
        $1009 = $1008&255;
        $1010 = $14;
        $1011 = ((($1010)) + 2|0);
        HEAP8[$1011>>0] = $1009;
        $1012 = $5;
        $1013 = ((($1012)) + 444|0);
        $1014 = ((($1013)) + 4|0);
        $1015 = HEAP16[$1014>>1]|0;
        $1016 = $1015&65535;
        $1017 = $1016 & 255;
        $1018 = $1017&255;
        $1019 = $14;
        $1020 = ((($1019)) + 3|0);
        HEAP8[$1020>>0] = $1018;
        $1021 = $5;
        $1022 = ((($1021)) + 444|0);
        $1023 = ((($1022)) + 6|0);
        $1024 = HEAP16[$1023>>1]|0;
        $1025 = $1024&65535;
        $1026 = $1025 >> 8;
        $1027 = $1026 & 255;
        $1028 = $1027&255;
        $1029 = $14;
        $1030 = ((($1029)) + 4|0);
        HEAP8[$1030>>0] = $1028;
        $1031 = $5;
        $1032 = ((($1031)) + 444|0);
        $1033 = ((($1032)) + 6|0);
        $1034 = HEAP16[$1033>>1]|0;
        $1035 = $1034&65535;
        $1036 = $1035 & 255;
        $1037 = $1036&255;
        $1038 = $14;
        $1039 = ((($1038)) + 5|0);
        HEAP8[$1039>>0] = $1037;
       }
      }
     }
     $1040 = $15;
     $1041 = (($1040) + 1)|0;
     $15 = $1041;
     $1042 = $14;
     $1043 = ((($1042)) + 6|0);
     $14 = $1043;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $725 = $15;
    $726 = $16;
    $727 = ($725>>>0)<($726>>>0);
    if (!($727)) {
     break;
    }
    $728 = $14;
    $729 = HEAP8[$728>>0]|0;
    $730 = $729&255;
    $731 = $730 << 8;
    $732 = $14;
    $733 = ((($732)) + 1|0);
    $734 = HEAP8[$733>>0]|0;
    $735 = $734&255;
    $736 = (($731) + ($735))|0;
    $737 = $736&65535;
    $31 = $737;
    $738 = $14;
    $739 = ((($738)) + 2|0);
    $740 = HEAP8[$739>>0]|0;
    $741 = $740&255;
    $742 = $741 << 8;
    $743 = $14;
    $744 = ((($743)) + 3|0);
    $745 = HEAP8[$744>>0]|0;
    $746 = $745&255;
    $747 = (($742) + ($746))|0;
    $748 = $747&65535;
    $32 = $748;
    $749 = $14;
    $750 = ((($749)) + 4|0);
    $751 = HEAP8[$750>>0]|0;
    $752 = $751&255;
    $753 = $752 << 8;
    $754 = $14;
    $755 = ((($754)) + 5|0);
    $756 = HEAP8[$755>>0]|0;
    $757 = $756&255;
    $758 = (($753) + ($757))|0;
    $759 = $758&65535;
    $33 = $759;
    $760 = $31;
    $761 = $760&65535;
    $762 = $5;
    $763 = ((($762)) + 524|0);
    $764 = ((($763)) + 2|0);
    $765 = HEAP16[$764>>1]|0;
    $766 = $765&65535;
    $767 = ($761|0)==($766|0);
    if ($767) {
     $768 = $32;
     $769 = $768&65535;
     $770 = $5;
     $771 = ((($770)) + 524|0);
     $772 = ((($771)) + 4|0);
     $773 = HEAP16[$772>>1]|0;
     $774 = $773&65535;
     $775 = ($769|0)==($774|0);
     if ($775) {
      $776 = $33;
      $777 = $776&65535;
      $778 = $5;
      $779 = ((($778)) + 524|0);
      $780 = ((($779)) + 6|0);
      $781 = HEAP16[$780>>1]|0;
      $782 = $781&65535;
      $783 = ($777|0)==($782|0);
      if ($783) {
       $784 = $5;
       $785 = ((($784)) + 444|0);
       $786 = ((($785)) + 2|0);
       $787 = HEAP16[$786>>1]|0;
       $788 = $787&65535;
       $789 = $788 >> 8;
       $790 = $789 & 255;
       $791 = $790&255;
       $792 = $14;
       HEAP8[$792>>0] = $791;
       $793 = $5;
       $794 = ((($793)) + 444|0);
       $795 = ((($794)) + 2|0);
       $796 = HEAP16[$795>>1]|0;
       $797 = $796&65535;
       $798 = $797 & 255;
       $799 = $798&255;
       $800 = $14;
       $801 = ((($800)) + 1|0);
       HEAP8[$801>>0] = $799;
       $802 = $5;
       $803 = ((($802)) + 444|0);
       $804 = ((($803)) + 4|0);
       $805 = HEAP16[$804>>1]|0;
       $806 = $805&65535;
       $807 = $806 >> 8;
       $808 = $807 & 255;
       $809 = $808&255;
       $810 = $14;
       $811 = ((($810)) + 2|0);
       HEAP8[$811>>0] = $809;
       $812 = $5;
       $813 = ((($812)) + 444|0);
       $814 = ((($813)) + 4|0);
       $815 = HEAP16[$814>>1]|0;
       $816 = $815&65535;
       $817 = $816 & 255;
       $818 = $817&255;
       $819 = $14;
       $820 = ((($819)) + 3|0);
       HEAP8[$820>>0] = $818;
       $821 = $5;
       $822 = ((($821)) + 444|0);
       $823 = ((($822)) + 6|0);
       $824 = HEAP16[$823>>1]|0;
       $825 = $824&65535;
       $826 = $825 >> 8;
       $827 = $826 & 255;
       $828 = $827&255;
       $829 = $14;
       $830 = ((($829)) + 4|0);
       HEAP8[$830>>0] = $828;
       $831 = $5;
       $832 = ((($831)) + 444|0);
       $833 = ((($832)) + 6|0);
       $834 = HEAP16[$833>>1]|0;
       $835 = $834&65535;
       $836 = $835 & 255;
       $837 = $836&255;
       $838 = $14;
       $$sink6 = $837;$$sink8 = $838;
      } else {
       label = 84;
      }
     } else {
      label = 84;
     }
    } else {
     label = 84;
    }
    if ((label|0) == 84) {
     label = 0;
     $839 = $9;
     $840 = $14;
     $841 = ((($840)) + 1|0);
     $842 = HEAP8[$841>>0]|0;
     $843 = $842&255;
     $844 = $12;
     $845 = $843 >> $844;
     $846 = (($839) + ($845<<2)|0);
     $847 = HEAP32[$846>>2]|0;
     $848 = $14;
     $849 = HEAP8[$848>>0]|0;
     $850 = $849&255;
     $851 = (($847) + ($850<<1)|0);
     $852 = HEAP16[$851>>1]|0;
     $34 = $852;
     $853 = $34;
     $854 = $853&65535;
     $855 = $854 >> 8;
     $856 = $855 & 255;
     $857 = $856&255;
     $858 = $14;
     HEAP8[$858>>0] = $857;
     $859 = $34;
     $860 = $859&65535;
     $861 = $860 & 255;
     $862 = $861&255;
     $863 = $14;
     $864 = ((($863)) + 1|0);
     HEAP8[$864>>0] = $862;
     $865 = $9;
     $866 = $14;
     $867 = ((($866)) + 3|0);
     $868 = HEAP8[$867>>0]|0;
     $869 = $868&255;
     $870 = $12;
     $871 = $869 >> $870;
     $872 = (($865) + ($871<<2)|0);
     $873 = HEAP32[$872>>2]|0;
     $874 = $14;
     $875 = ((($874)) + 2|0);
     $876 = HEAP8[$875>>0]|0;
     $877 = $876&255;
     $878 = (($873) + ($877<<1)|0);
     $879 = HEAP16[$878>>1]|0;
     $34 = $879;
     $880 = $34;
     $881 = $880&65535;
     $882 = $881 >> 8;
     $883 = $882 & 255;
     $884 = $883&255;
     $885 = $14;
     $886 = ((($885)) + 2|0);
     HEAP8[$886>>0] = $884;
     $887 = $34;
     $888 = $887&65535;
     $889 = $888 & 255;
     $890 = $889&255;
     $891 = $14;
     $892 = ((($891)) + 3|0);
     HEAP8[$892>>0] = $890;
     $893 = $9;
     $894 = $14;
     $895 = ((($894)) + 5|0);
     $896 = HEAP8[$895>>0]|0;
     $897 = $896&255;
     $898 = $12;
     $899 = $897 >> $898;
     $900 = (($893) + ($899<<2)|0);
     $901 = HEAP32[$900>>2]|0;
     $902 = $14;
     $903 = ((($902)) + 4|0);
     $904 = HEAP8[$903>>0]|0;
     $905 = $904&255;
     $906 = (($901) + ($905<<1)|0);
     $907 = HEAP16[$906>>1]|0;
     $34 = $907;
     $908 = $34;
     $909 = $908&65535;
     $910 = $909 >> 8;
     $911 = $910 & 255;
     $912 = $911&255;
     $913 = $14;
     $914 = ((($913)) + 4|0);
     HEAP8[$914>>0] = $912;
     $915 = $34;
     $916 = $915&65535;
     $917 = $916 & 255;
     $918 = $917&255;
     $919 = $14;
     $$sink6 = $918;$$sink8 = $919;
    }
    $920 = ((($$sink8)) + 5|0);
    HEAP8[$920>>0] = $$sink6;
    $921 = $15;
    $922 = (($921) + 1)|0;
    $15 = $922;
    $923 = $14;
    $924 = ((($923)) + 6|0);
    $14 = $924;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $1044 = $3;
  $1045 = ((($1044)) + 9|0);
  $1046 = HEAP8[$1045>>0]|0;
  $1047 = $1046&255;
  $1048 = ($1047|0)==(8);
  if ($1048) {
   $1049 = $8;
   $1050 = ($1049|0)!=(0|0);
   $1051 = $7;
   $1052 = ($1051|0)!=(0|0);
   $or$cond = $1050 & $1052;
   $1053 = $6;
   $1054 = ($1053|0)!=(0|0);
   $or$cond11 = $or$cond & $1054;
   $1055 = $4;
   $14 = $1055;
   $15 = 0;
   if (!($or$cond11)) {
    while(1) {
     $1130 = $15;
     $1131 = $16;
     $1132 = ($1130>>>0)<($1131>>>0);
     if (!($1132)) {
      break;
     }
     $1133 = $14;
     $1134 = ((($1133)) + 1|0);
     $1135 = HEAP8[$1134>>0]|0;
     $42 = $1135;
     $1136 = $42;
     $1137 = $1136&255;
     $1138 = ($1137|0)==(0);
     if ($1138) {
      $1139 = $5;
      $1140 = ((($1139)) + 444|0);
      $1141 = ((($1140)) + 8|0);
      $1142 = HEAP16[$1141>>1]|0;
      $1143 = $1142&255;
      $1144 = $14;
      HEAP8[$1144>>0] = $1143;
     } else {
      $1145 = $42;
      $1146 = $1145&255;
      $1147 = ($1146|0)<(255);
      if ($1147) {
       $1148 = $14;
       $1149 = HEAP8[$1148>>0]|0;
       $1150 = $1149&255;
       $1151 = $1150&65535;
       $1152 = $42;
       $1153 = $1152&255;
       $1154 = $1153&65535;
       $1155 = Math_imul($1151, $1154)|0;
       $1156 = $5;
       $1157 = ((($1156)) + 444|0);
       $1158 = ((($1157)) + 8|0);
       $1159 = HEAP16[$1158>>1]|0;
       $1160 = $1159&65535;
       $1161 = $42;
       $1162 = $1161&255;
       $1163 = $1162&65535;
       $1164 = (255 - ($1163))|0;
       $1165 = $1164&65535;
       $1166 = $1165&65535;
       $1167 = Math_imul($1160, $1166)|0;
       $1168 = (($1155) + ($1167))|0;
       $1169 = (($1168) + 128)|0;
       $1170 = $1169&65535;
       $43 = $1170;
       $1171 = $43;
       $1172 = $1171&65535;
       $1173 = $43;
       $1174 = $1173&65535;
       $1175 = $1174 >> 8;
       $1176 = (($1172) + ($1175))|0;
       $1177 = $1176 >> 8;
       $1178 = $1177 & 255;
       $1179 = $1178&255;
       $1180 = $14;
       HEAP8[$1180>>0] = $1179;
      }
     }
     $1181 = $15;
     $1182 = (($1181) + 1)|0;
     $15 = $1182;
     $1183 = $14;
     $1184 = ((($1183)) + 2|0);
     $14 = $1184;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $1056 = $15;
    $1057 = $16;
    $1058 = ($1056>>>0)<($1057>>>0);
    if (!($1058)) {
     break;
    }
    $1059 = $14;
    $1060 = ((($1059)) + 1|0);
    $1061 = HEAP8[$1060>>0]|0;
    $1062 = $1061&255;
    $38 = $1062;
    $1063 = $38;
    $1064 = $1063&65535;
    $1065 = ($1064|0)==(255);
    do {
     if ($1065) {
      $1066 = $6;
      $1067 = $14;
      $1068 = HEAP8[$1067>>0]|0;
      $1069 = $1068&255;
      $1070 = (($1066) + ($1069)|0);
      $1071 = HEAP8[$1070>>0]|0;
      $1072 = $14;
      HEAP8[$1072>>0] = $1071;
     } else {
      $1073 = $38;
      $1074 = $1073&65535;
      $1075 = ($1074|0)==(0);
      if ($1075) {
       $1076 = $5;
       $1077 = ((($1076)) + 444|0);
       $1078 = ((($1077)) + 8|0);
       $1079 = HEAP16[$1078>>1]|0;
       $1080 = $1079&255;
       $1081 = $14;
       HEAP8[$1081>>0] = $1080;
       break;
      }
      $1082 = $8;
      $1083 = $14;
      $1084 = HEAP8[$1083>>0]|0;
      $1085 = $1084&255;
      $1086 = (($1082) + ($1085)|0);
      $1087 = HEAP8[$1086>>0]|0;
      $39 = $1087;
      $1088 = $39;
      $1089 = $1088&255;
      $1090 = $1089&65535;
      $1091 = $38;
      $1092 = $1091&65535;
      $1093 = Math_imul($1090, $1092)|0;
      $1094 = $5;
      $1095 = ((($1094)) + 454|0);
      $1096 = ((($1095)) + 8|0);
      $1097 = HEAP16[$1096>>1]|0;
      $1098 = $1097&65535;
      $1099 = $38;
      $1100 = $1099&65535;
      $1101 = (255 - ($1100))|0;
      $1102 = $1101&65535;
      $1103 = $1102&65535;
      $1104 = Math_imul($1098, $1103)|0;
      $1105 = (($1093) + ($1104))|0;
      $1106 = (($1105) + 128)|0;
      $1107 = $1106&65535;
      $41 = $1107;
      $1108 = $41;
      $1109 = $1108&65535;
      $1110 = $41;
      $1111 = $1110&65535;
      $1112 = $1111 >> 8;
      $1113 = (($1109) + ($1112))|0;
      $1114 = $1113 >> 8;
      $1115 = $1114 & 255;
      $1116 = $1115&255;
      $40 = $1116;
      $1117 = $13;
      $1118 = ($1117|0)==(0);
      if ($1118) {
       $1119 = $7;
       $1120 = $40;
       $1121 = $1120&255;
       $1122 = (($1119) + ($1121)|0);
       $1123 = HEAP8[$1122>>0]|0;
       $40 = $1123;
      }
      $1124 = $40;
      $1125 = $14;
      HEAP8[$1125>>0] = $1124;
     }
    } while(0);
    $1126 = $15;
    $1127 = (($1126) + 1)|0;
    $15 = $1127;
    $1128 = $14;
    $1129 = ((($1128)) + 2|0);
    $14 = $1129;
   }
   STACKTOP = sp;return;
  }
  $1185 = $9;
  $1186 = ($1185|0)!=(0|0);
  $1187 = $10;
  $1188 = ($1187|0)!=(0|0);
  $or$cond13 = $1186 & $1188;
  $1189 = $11;
  $1190 = ($1189|0)!=(0|0);
  $or$cond15 = $or$cond13 & $1190;
  $1191 = $4;
  $14 = $1191;
  $15 = 0;
  if (!($or$cond15)) {
   while(1) {
    $1323 = $15;
    $1324 = $16;
    $1325 = ($1323>>>0)<($1324>>>0);
    if (!($1325)) {
     break;
    }
    $1326 = $14;
    $1327 = ((($1326)) + 2|0);
    $1328 = HEAP8[$1327>>0]|0;
    $1329 = $1328&255;
    $1330 = $1329 << 8;
    $1331 = $14;
    $1332 = ((($1331)) + 3|0);
    $1333 = HEAP8[$1332>>0]|0;
    $1334 = $1333&255;
    $1335 = (($1330) + ($1334))|0;
    $1336 = $1335&65535;
    $50 = $1336;
    $1337 = $50;
    $1338 = $1337&65535;
    $1339 = ($1338|0)==(0);
    if ($1339) {
     $1340 = $5;
     $1341 = ((($1340)) + 444|0);
     $1342 = ((($1341)) + 8|0);
     $1343 = HEAP16[$1342>>1]|0;
     $1344 = $1343&65535;
     $1345 = $1344 >> 8;
     $1346 = $1345 & 255;
     $1347 = $1346&255;
     $1348 = $14;
     HEAP8[$1348>>0] = $1347;
     $1349 = $5;
     $1350 = ((($1349)) + 444|0);
     $1351 = ((($1350)) + 8|0);
     $1352 = HEAP16[$1351>>1]|0;
     $1353 = $1352&65535;
     $1354 = $1353 & 255;
     $1355 = $1354&255;
     $1356 = $14;
     $$sink36 = $1355;$$sink38 = $1356;
     label = 125;
    } else {
     $1357 = $50;
     $1358 = $1357&65535;
     $1359 = ($1358|0)<(65535);
     if ($1359) {
      $1360 = $14;
      $1361 = HEAP8[$1360>>0]|0;
      $1362 = $1361&255;
      $1363 = $1362 << 8;
      $1364 = $14;
      $1365 = ((($1364)) + 1|0);
      $1366 = HEAP8[$1365>>0]|0;
      $1367 = $1366&255;
      $1368 = (($1363) + ($1367))|0;
      $1369 = $1368&65535;
      $51 = $1369;
      $1370 = $51;
      $1371 = $1370&65535;
      $1372 = $50;
      $1373 = $1372&65535;
      $1374 = Math_imul($1371, $1373)|0;
      $1375 = $5;
      $1376 = ((($1375)) + 444|0);
      $1377 = ((($1376)) + 8|0);
      $1378 = HEAP16[$1377>>1]|0;
      $1379 = $1378&65535;
      $1380 = $50;
      $1381 = $1380&65535;
      $1382 = (65535 - ($1381))|0;
      $1383 = Math_imul($1379, $1382)|0;
      $1384 = (($1374) + ($1383))|0;
      $1385 = (($1384) + 32768)|0;
      $53 = $1385;
      $1386 = $53;
      $1387 = $53;
      $1388 = $1387 >>> 16;
      $1389 = (($1386) + ($1388))|0;
      $1390 = $1389 >>> 16;
      $1391 = 65535 & $1390;
      $1392 = $1391&65535;
      $52 = $1392;
      $1393 = $52;
      $1394 = $1393&65535;
      $1395 = $1394 >> 8;
      $1396 = $1395 & 255;
      $1397 = $1396&255;
      $1398 = $14;
      HEAP8[$1398>>0] = $1397;
      $1399 = $52;
      $1400 = $1399&65535;
      $1401 = $1400 & 255;
      $1402 = $1401&255;
      $1403 = $14;
      $$sink36 = $1402;$$sink38 = $1403;
      label = 125;
     }
    }
    if ((label|0) == 125) {
     label = 0;
     $1404 = ((($$sink38)) + 1|0);
     HEAP8[$1404>>0] = $$sink36;
    }
    $1405 = $15;
    $1406 = (($1405) + 1)|0;
    $15 = $1406;
    $1407 = $14;
    $1408 = ((($1407)) + 4|0);
    $14 = $1408;
   }
   STACKTOP = sp;return;
  }
  while(1) {
   $1192 = $15;
   $1193 = $16;
   $1194 = ($1192>>>0)<($1193>>>0);
   if (!($1194)) {
    break;
   }
   $1195 = $14;
   $1196 = ((($1195)) + 2|0);
   $1197 = HEAP8[$1196>>0]|0;
   $1198 = $1197&255;
   $1199 = $1198 << 8;
   $1200 = $14;
   $1201 = ((($1200)) + 3|0);
   $1202 = HEAP8[$1201>>0]|0;
   $1203 = $1202&255;
   $1204 = (($1199) + ($1203))|0;
   $1205 = $1204&65535;
   $44 = $1205;
   $1206 = $44;
   $1207 = $1206&65535;
   $1208 = ($1207|0)==(65535);
   do {
    if ($1208) {
     $1209 = $9;
     $1210 = $14;
     $1211 = ((($1210)) + 1|0);
     $1212 = HEAP8[$1211>>0]|0;
     $1213 = $1212&255;
     $1214 = $12;
     $1215 = $1213 >> $1214;
     $1216 = (($1209) + ($1215<<2)|0);
     $1217 = HEAP32[$1216>>2]|0;
     $1218 = $14;
     $1219 = HEAP8[$1218>>0]|0;
     $1220 = $1219&255;
     $1221 = (($1217) + ($1220<<1)|0);
     $1222 = HEAP16[$1221>>1]|0;
     $45 = $1222;
     $1223 = $45;
     $1224 = $1223&65535;
     $1225 = $1224 >> 8;
     $1226 = $1225 & 255;
     $1227 = $1226&255;
     $1228 = $14;
     HEAP8[$1228>>0] = $1227;
     $1229 = $45;
     $1230 = $1229&65535;
     $1231 = $1230 & 255;
     $1232 = $1231&255;
     $1233 = $14;
     $$sink16$sink = $1232;$$sink18$sink = $1233;
    } else {
     $1234 = $44;
     $1235 = $1234&65535;
     $1236 = ($1235|0)==(0);
     if ($1236) {
      $1237 = $5;
      $1238 = ((($1237)) + 444|0);
      $1239 = ((($1238)) + 8|0);
      $1240 = HEAP16[$1239>>1]|0;
      $1241 = $1240&65535;
      $1242 = $1241 >> 8;
      $1243 = $1242 & 255;
      $1244 = $1243&255;
      $1245 = $14;
      HEAP8[$1245>>0] = $1244;
      $1246 = $5;
      $1247 = ((($1246)) + 444|0);
      $1248 = ((($1247)) + 8|0);
      $1249 = HEAP16[$1248>>1]|0;
      $1250 = $1249&65535;
      $1251 = $1250 & 255;
      $1252 = $1251&255;
      $1253 = $14;
      $$sink16$sink = $1252;$$sink18$sink = $1253;
      break;
     }
     $1254 = $11;
     $1255 = $14;
     $1256 = ((($1255)) + 1|0);
     $1257 = HEAP8[$1256>>0]|0;
     $1258 = $1257&255;
     $1259 = $12;
     $1260 = $1258 >> $1259;
     $1261 = (($1254) + ($1260<<2)|0);
     $1262 = HEAP32[$1261>>2]|0;
     $1263 = $14;
     $1264 = HEAP8[$1263>>0]|0;
     $1265 = $1264&255;
     $1266 = (($1262) + ($1265<<1)|0);
     $1267 = HEAP16[$1266>>1]|0;
     $46 = $1267;
     $1268 = $46;
     $1269 = $1268&65535;
     $1270 = $44;
     $1271 = $1270&65535;
     $1272 = Math_imul($1269, $1271)|0;
     $1273 = $5;
     $1274 = ((($1273)) + 454|0);
     $1275 = ((($1274)) + 8|0);
     $1276 = HEAP16[$1275>>1]|0;
     $1277 = $1276&65535;
     $1278 = $44;
     $1279 = $1278&65535;
     $1280 = (65535 - ($1279))|0;
     $1281 = Math_imul($1277, $1280)|0;
     $1282 = (($1272) + ($1281))|0;
     $1283 = (($1282) + 32768)|0;
     $49 = $1283;
     $1284 = $49;
     $1285 = $49;
     $1286 = $1285 >>> 16;
     $1287 = (($1284) + ($1286))|0;
     $1288 = $1287 >>> 16;
     $1289 = 65535 & $1288;
     $1290 = $1289&65535;
     $47 = $1290;
     $1291 = $13;
     $1292 = ($1291|0)!=(0);
     if ($1292) {
      $1293 = $47;
      $48 = $1293;
     } else {
      $1294 = $10;
      $1295 = $47;
      $1296 = $1295&65535;
      $1297 = $1296 & 255;
      $1298 = $12;
      $1299 = $1297 >> $1298;
      $1300 = (($1294) + ($1299<<2)|0);
      $1301 = HEAP32[$1300>>2]|0;
      $1302 = $47;
      $1303 = $1302&65535;
      $1304 = $1303 >> 8;
      $1305 = (($1301) + ($1304<<1)|0);
      $1306 = HEAP16[$1305>>1]|0;
      $48 = $1306;
     }
     $1307 = $48;
     $1308 = $1307&65535;
     $1309 = $1308 >> 8;
     $1310 = $1309 & 255;
     $1311 = $1310&255;
     $1312 = $14;
     HEAP8[$1312>>0] = $1311;
     $1313 = $48;
     $1314 = $1313&65535;
     $1315 = $1314 & 255;
     $1316 = $1315&255;
     $1317 = $14;
     $$sink16$sink = $1316;$$sink18$sink = $1317;
    }
   } while(0);
   $1318 = ((($$sink18$sink)) + 1|0);
   HEAP8[$1318>>0] = $$sink16$sink;
   $1319 = $15;
   $1320 = (($1319) + 1)|0;
   $15 = $1320;
   $1321 = $14;
   $1322 = ((($1321)) + 4|0);
   $14 = $1322;
  }
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $1409 = $3;
  $1410 = ((($1409)) + 9|0);
  $1411 = HEAP8[$1410>>0]|0;
  $1412 = $1411&255;
  $1413 = ($1412|0)==(8);
  if ($1413) {
   $1414 = $8;
   $1415 = ($1414|0)!=(0|0);
   $1416 = $7;
   $1417 = ($1416|0)!=(0|0);
   $or$cond21 = $1415 & $1417;
   $1418 = $6;
   $1419 = ($1418|0)!=(0|0);
   $or$cond23 = $or$cond21 & $1419;
   $1420 = $4;
   $14 = $1420;
   $15 = 0;
   if (!($or$cond23)) {
    while(1) {
     $1622 = $15;
     $1623 = $16;
     $1624 = ($1622>>>0)<($1623>>>0);
     if (!($1624)) {
      break;
     }
     $1625 = $14;
     $1626 = ((($1625)) + 3|0);
     $1627 = HEAP8[$1626>>0]|0;
     $60 = $1627;
     $1628 = $60;
     $1629 = $1628&255;
     $1630 = ($1629|0)==(0);
     if ($1630) {
      $1631 = $5;
      $1632 = ((($1631)) + 444|0);
      $1633 = ((($1632)) + 2|0);
      $1634 = HEAP16[$1633>>1]|0;
      $1635 = $1634&255;
      $1636 = $14;
      HEAP8[$1636>>0] = $1635;
      $1637 = $5;
      $1638 = ((($1637)) + 444|0);
      $1639 = ((($1638)) + 4|0);
      $1640 = HEAP16[$1639>>1]|0;
      $1641 = $1640&255;
      $1642 = $14;
      $1643 = ((($1642)) + 1|0);
      HEAP8[$1643>>0] = $1641;
      $1644 = $5;
      $1645 = ((($1644)) + 444|0);
      $1646 = ((($1645)) + 6|0);
      $1647 = HEAP16[$1646>>1]|0;
      $1648 = $1647&255;
      $1649 = $14;
      $$sink40 = $1648;$$sink42 = $1649;
      label = 147;
     } else {
      $1650 = $60;
      $1651 = $1650&255;
      $1652 = ($1651|0)<(255);
      if ($1652) {
       $1653 = $14;
       $1654 = HEAP8[$1653>>0]|0;
       $1655 = $1654&255;
       $1656 = $1655&65535;
       $1657 = $60;
       $1658 = $1657&255;
       $1659 = $1658&65535;
       $1660 = Math_imul($1656, $1659)|0;
       $1661 = $5;
       $1662 = ((($1661)) + 444|0);
       $1663 = ((($1662)) + 2|0);
       $1664 = HEAP16[$1663>>1]|0;
       $1665 = $1664&65535;
       $1666 = $60;
       $1667 = $1666&255;
       $1668 = $1667&65535;
       $1669 = (255 - ($1668))|0;
       $1670 = $1669&65535;
       $1671 = $1670&65535;
       $1672 = Math_imul($1665, $1671)|0;
       $1673 = (($1660) + ($1672))|0;
       $1674 = (($1673) + 128)|0;
       $1675 = $1674&65535;
       $61 = $1675;
       $1676 = $61;
       $1677 = $1676&65535;
       $1678 = $61;
       $1679 = $1678&65535;
       $1680 = $1679 >> 8;
       $1681 = (($1677) + ($1680))|0;
       $1682 = $1681 >> 8;
       $1683 = $1682 & 255;
       $1684 = $1683&255;
       $1685 = $14;
       HEAP8[$1685>>0] = $1684;
       $1686 = $14;
       $1687 = ((($1686)) + 1|0);
       $1688 = HEAP8[$1687>>0]|0;
       $1689 = $1688&255;
       $1690 = $1689&65535;
       $1691 = $60;
       $1692 = $1691&255;
       $1693 = $1692&65535;
       $1694 = Math_imul($1690, $1693)|0;
       $1695 = $5;
       $1696 = ((($1695)) + 444|0);
       $1697 = ((($1696)) + 4|0);
       $1698 = HEAP16[$1697>>1]|0;
       $1699 = $1698&65535;
       $1700 = $60;
       $1701 = $1700&255;
       $1702 = $1701&65535;
       $1703 = (255 - ($1702))|0;
       $1704 = $1703&65535;
       $1705 = $1704&65535;
       $1706 = Math_imul($1699, $1705)|0;
       $1707 = (($1694) + ($1706))|0;
       $1708 = (($1707) + 128)|0;
       $1709 = $1708&65535;
       $62 = $1709;
       $1710 = $62;
       $1711 = $1710&65535;
       $1712 = $62;
       $1713 = $1712&65535;
       $1714 = $1713 >> 8;
       $1715 = (($1711) + ($1714))|0;
       $1716 = $1715 >> 8;
       $1717 = $1716 & 255;
       $1718 = $1717&255;
       $1719 = $14;
       $1720 = ((($1719)) + 1|0);
       HEAP8[$1720>>0] = $1718;
       $1721 = $14;
       $1722 = ((($1721)) + 2|0);
       $1723 = HEAP8[$1722>>0]|0;
       $1724 = $1723&255;
       $1725 = $1724&65535;
       $1726 = $60;
       $1727 = $1726&255;
       $1728 = $1727&65535;
       $1729 = Math_imul($1725, $1728)|0;
       $1730 = $5;
       $1731 = ((($1730)) + 444|0);
       $1732 = ((($1731)) + 6|0);
       $1733 = HEAP16[$1732>>1]|0;
       $1734 = $1733&65535;
       $1735 = $60;
       $1736 = $1735&255;
       $1737 = $1736&65535;
       $1738 = (255 - ($1737))|0;
       $1739 = $1738&65535;
       $1740 = $1739&65535;
       $1741 = Math_imul($1734, $1740)|0;
       $1742 = (($1729) + ($1741))|0;
       $1743 = (($1742) + 128)|0;
       $1744 = $1743&65535;
       $63 = $1744;
       $1745 = $63;
       $1746 = $1745&65535;
       $1747 = $63;
       $1748 = $1747&65535;
       $1749 = $1748 >> 8;
       $1750 = (($1746) + ($1749))|0;
       $1751 = $1750 >> 8;
       $1752 = $1751 & 255;
       $1753 = $1752&255;
       $1754 = $14;
       $$sink40 = $1753;$$sink42 = $1754;
       label = 147;
      }
     }
     if ((label|0) == 147) {
      label = 0;
      $1755 = ((($$sink42)) + 2|0);
      HEAP8[$1755>>0] = $$sink40;
     }
     $1756 = $15;
     $1757 = (($1756) + 1)|0;
     $15 = $1757;
     $1758 = $14;
     $1759 = ((($1758)) + 4|0);
     $14 = $1759;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $1421 = $15;
    $1422 = $16;
    $1423 = ($1421>>>0)<($1422>>>0);
    if (!($1423)) {
     break;
    }
    $1424 = $14;
    $1425 = ((($1424)) + 3|0);
    $1426 = HEAP8[$1425>>0]|0;
    $54 = $1426;
    $1427 = $54;
    $1428 = $1427&255;
    $1429 = ($1428|0)==(255);
    do {
     if ($1429) {
      $1430 = $6;
      $1431 = $14;
      $1432 = HEAP8[$1431>>0]|0;
      $1433 = $1432&255;
      $1434 = (($1430) + ($1433)|0);
      $1435 = HEAP8[$1434>>0]|0;
      $1436 = $14;
      HEAP8[$1436>>0] = $1435;
      $1437 = $6;
      $1438 = $14;
      $1439 = ((($1438)) + 1|0);
      $1440 = HEAP8[$1439>>0]|0;
      $1441 = $1440&255;
      $1442 = (($1437) + ($1441)|0);
      $1443 = HEAP8[$1442>>0]|0;
      $1444 = $14;
      $1445 = ((($1444)) + 1|0);
      HEAP8[$1445>>0] = $1443;
      $1446 = $6;
      $1447 = $14;
      $1448 = ((($1447)) + 2|0);
      $1449 = HEAP8[$1448>>0]|0;
      $1450 = $1449&255;
      $1451 = (($1446) + ($1450)|0);
      $1452 = HEAP8[$1451>>0]|0;
      $1453 = $14;
      $$sink24$sink = $1452;$$sink26$sink = $1453;
     } else {
      $1454 = $54;
      $1455 = $1454&255;
      $1456 = ($1455|0)==(0);
      if ($1456) {
       $1457 = $5;
       $1458 = ((($1457)) + 444|0);
       $1459 = ((($1458)) + 2|0);
       $1460 = HEAP16[$1459>>1]|0;
       $1461 = $1460&255;
       $1462 = $14;
       HEAP8[$1462>>0] = $1461;
       $1463 = $5;
       $1464 = ((($1463)) + 444|0);
       $1465 = ((($1464)) + 4|0);
       $1466 = HEAP16[$1465>>1]|0;
       $1467 = $1466&255;
       $1468 = $14;
       $1469 = ((($1468)) + 1|0);
       HEAP8[$1469>>0] = $1467;
       $1470 = $5;
       $1471 = ((($1470)) + 444|0);
       $1472 = ((($1471)) + 6|0);
       $1473 = HEAP16[$1472>>1]|0;
       $1474 = $1473&255;
       $1475 = $14;
       $$sink24$sink = $1474;$$sink26$sink = $1475;
       break;
      }
      $1476 = $8;
      $1477 = $14;
      $1478 = HEAP8[$1477>>0]|0;
      $1479 = $1478&255;
      $1480 = (($1476) + ($1479)|0);
      $1481 = HEAP8[$1480>>0]|0;
      $55 = $1481;
      $1482 = $55;
      $1483 = $1482&255;
      $1484 = $1483&65535;
      $1485 = $54;
      $1486 = $1485&255;
      $1487 = $1486&65535;
      $1488 = Math_imul($1484, $1487)|0;
      $1489 = $5;
      $1490 = ((($1489)) + 454|0);
      $1491 = ((($1490)) + 2|0);
      $1492 = HEAP16[$1491>>1]|0;
      $1493 = $1492&65535;
      $1494 = $54;
      $1495 = $1494&255;
      $1496 = $1495&65535;
      $1497 = (255 - ($1496))|0;
      $1498 = $1497&65535;
      $1499 = $1498&65535;
      $1500 = Math_imul($1493, $1499)|0;
      $1501 = (($1488) + ($1500))|0;
      $1502 = (($1501) + 128)|0;
      $1503 = $1502&65535;
      $57 = $1503;
      $1504 = $57;
      $1505 = $1504&65535;
      $1506 = $57;
      $1507 = $1506&65535;
      $1508 = $1507 >> 8;
      $1509 = (($1505) + ($1508))|0;
      $1510 = $1509 >> 8;
      $1511 = $1510 & 255;
      $1512 = $1511&255;
      $56 = $1512;
      $1513 = $13;
      $1514 = ($1513|0)==(0);
      if ($1514) {
       $1515 = $7;
       $1516 = $56;
       $1517 = $1516&255;
       $1518 = (($1515) + ($1517)|0);
       $1519 = HEAP8[$1518>>0]|0;
       $56 = $1519;
      }
      $1520 = $56;
      $1521 = $14;
      HEAP8[$1521>>0] = $1520;
      $1522 = $8;
      $1523 = $14;
      $1524 = ((($1523)) + 1|0);
      $1525 = HEAP8[$1524>>0]|0;
      $1526 = $1525&255;
      $1527 = (($1522) + ($1526)|0);
      $1528 = HEAP8[$1527>>0]|0;
      $55 = $1528;
      $1529 = $55;
      $1530 = $1529&255;
      $1531 = $1530&65535;
      $1532 = $54;
      $1533 = $1532&255;
      $1534 = $1533&65535;
      $1535 = Math_imul($1531, $1534)|0;
      $1536 = $5;
      $1537 = ((($1536)) + 454|0);
      $1538 = ((($1537)) + 4|0);
      $1539 = HEAP16[$1538>>1]|0;
      $1540 = $1539&65535;
      $1541 = $54;
      $1542 = $1541&255;
      $1543 = $1542&65535;
      $1544 = (255 - ($1543))|0;
      $1545 = $1544&65535;
      $1546 = $1545&65535;
      $1547 = Math_imul($1540, $1546)|0;
      $1548 = (($1535) + ($1547))|0;
      $1549 = (($1548) + 128)|0;
      $1550 = $1549&65535;
      $58 = $1550;
      $1551 = $58;
      $1552 = $1551&65535;
      $1553 = $58;
      $1554 = $1553&65535;
      $1555 = $1554 >> 8;
      $1556 = (($1552) + ($1555))|0;
      $1557 = $1556 >> 8;
      $1558 = $1557 & 255;
      $1559 = $1558&255;
      $56 = $1559;
      $1560 = $13;
      $1561 = ($1560|0)==(0);
      if ($1561) {
       $1562 = $7;
       $1563 = $56;
       $1564 = $1563&255;
       $1565 = (($1562) + ($1564)|0);
       $1566 = HEAP8[$1565>>0]|0;
       $56 = $1566;
      }
      $1567 = $56;
      $1568 = $14;
      $1569 = ((($1568)) + 1|0);
      HEAP8[$1569>>0] = $1567;
      $1570 = $8;
      $1571 = $14;
      $1572 = ((($1571)) + 2|0);
      $1573 = HEAP8[$1572>>0]|0;
      $1574 = $1573&255;
      $1575 = (($1570) + ($1574)|0);
      $1576 = HEAP8[$1575>>0]|0;
      $55 = $1576;
      $1577 = $55;
      $1578 = $1577&255;
      $1579 = $1578&65535;
      $1580 = $54;
      $1581 = $1580&255;
      $1582 = $1581&65535;
      $1583 = Math_imul($1579, $1582)|0;
      $1584 = $5;
      $1585 = ((($1584)) + 454|0);
      $1586 = ((($1585)) + 6|0);
      $1587 = HEAP16[$1586>>1]|0;
      $1588 = $1587&65535;
      $1589 = $54;
      $1590 = $1589&255;
      $1591 = $1590&65535;
      $1592 = (255 - ($1591))|0;
      $1593 = $1592&65535;
      $1594 = $1593&65535;
      $1595 = Math_imul($1588, $1594)|0;
      $1596 = (($1583) + ($1595))|0;
      $1597 = (($1596) + 128)|0;
      $1598 = $1597&65535;
      $59 = $1598;
      $1599 = $59;
      $1600 = $1599&65535;
      $1601 = $59;
      $1602 = $1601&65535;
      $1603 = $1602 >> 8;
      $1604 = (($1600) + ($1603))|0;
      $1605 = $1604 >> 8;
      $1606 = $1605 & 255;
      $1607 = $1606&255;
      $56 = $1607;
      $1608 = $13;
      $1609 = ($1608|0)==(0);
      if ($1609) {
       $1610 = $7;
       $1611 = $56;
       $1612 = $1611&255;
       $1613 = (($1610) + ($1612)|0);
       $1614 = HEAP8[$1613>>0]|0;
       $56 = $1614;
      }
      $1615 = $56;
      $1616 = $14;
      $$sink24$sink = $1615;$$sink26$sink = $1616;
     }
    } while(0);
    $1617 = ((($$sink26$sink)) + 2|0);
    HEAP8[$1617>>0] = $$sink24$sink;
    $1618 = $15;
    $1619 = (($1618) + 1)|0;
    $15 = $1619;
    $1620 = $14;
    $1621 = ((($1620)) + 4|0);
    $14 = $1621;
   }
   STACKTOP = sp;return;
  } else {
   $1760 = $9;
   $1761 = ($1760|0)!=(0|0);
   $1762 = $10;
   $1763 = ($1762|0)!=(0|0);
   $or$cond29 = $1761 & $1763;
   $1764 = $11;
   $1765 = ($1764|0)!=(0|0);
   $or$cond31 = $or$cond29 & $1765;
   $1766 = $4;
   $14 = $1766;
   $15 = 0;
   if (!($or$cond31)) {
    while(1) {
     $2125 = $15;
     $2126 = $16;
     $2127 = ($2125>>>0)<($2126>>>0);
     if (!($2127)) {
      break;
     }
     $2128 = $14;
     $2129 = ((($2128)) + 6|0);
     $2130 = HEAP8[$2129>>0]|0;
     $2131 = $2130&255;
     $2132 = $2131&65535;
     $2133 = $2132 << 8;
     $2134 = $14;
     $2135 = ((($2134)) + 7|0);
     $2136 = HEAP8[$2135>>0]|0;
     $2137 = $2136&255;
     $2138 = $2137&65535;
     $2139 = (($2133) + ($2138))|0;
     $2140 = $2139&65535;
     $71 = $2140;
     $2141 = $71;
     $2142 = $2141&65535;
     $2143 = ($2142|0)==(0);
     if ($2143) {
      $2144 = $5;
      $2145 = ((($2144)) + 444|0);
      $2146 = ((($2145)) + 2|0);
      $2147 = HEAP16[$2146>>1]|0;
      $2148 = $2147&65535;
      $2149 = $2148 >> 8;
      $2150 = $2149 & 255;
      $2151 = $2150&255;
      $2152 = $14;
      HEAP8[$2152>>0] = $2151;
      $2153 = $5;
      $2154 = ((($2153)) + 444|0);
      $2155 = ((($2154)) + 2|0);
      $2156 = HEAP16[$2155>>1]|0;
      $2157 = $2156&65535;
      $2158 = $2157 & 255;
      $2159 = $2158&255;
      $2160 = $14;
      $2161 = ((($2160)) + 1|0);
      HEAP8[$2161>>0] = $2159;
      $2162 = $5;
      $2163 = ((($2162)) + 444|0);
      $2164 = ((($2163)) + 4|0);
      $2165 = HEAP16[$2164>>1]|0;
      $2166 = $2165&65535;
      $2167 = $2166 >> 8;
      $2168 = $2167 & 255;
      $2169 = $2168&255;
      $2170 = $14;
      $2171 = ((($2170)) + 2|0);
      HEAP8[$2171>>0] = $2169;
      $2172 = $5;
      $2173 = ((($2172)) + 444|0);
      $2174 = ((($2173)) + 4|0);
      $2175 = HEAP16[$2174>>1]|0;
      $2176 = $2175&65535;
      $2177 = $2176 & 255;
      $2178 = $2177&255;
      $2179 = $14;
      $2180 = ((($2179)) + 3|0);
      HEAP8[$2180>>0] = $2178;
      $2181 = $5;
      $2182 = ((($2181)) + 444|0);
      $2183 = ((($2182)) + 6|0);
      $2184 = HEAP16[$2183>>1]|0;
      $2185 = $2184&65535;
      $2186 = $2185 >> 8;
      $2187 = $2186 & 255;
      $2188 = $2187&255;
      $2189 = $14;
      $2190 = ((($2189)) + 4|0);
      HEAP8[$2190>>0] = $2188;
      $2191 = $5;
      $2192 = ((($2191)) + 444|0);
      $2193 = ((($2192)) + 6|0);
      $2194 = HEAP16[$2193>>1]|0;
      $2195 = $2194&65535;
      $2196 = $2195 & 255;
      $2197 = $2196&255;
      $2198 = $14;
      $$sink44 = $2197;$$sink46 = $2198;
      label = 168;
     } else {
      $2199 = $71;
      $2200 = $2199&65535;
      $2201 = ($2200|0)<(65535);
      if ($2201) {
       $2202 = $14;
       $2203 = HEAP8[$2202>>0]|0;
       $2204 = $2203&255;
       $2205 = $2204 << 8;
       $2206 = $14;
       $2207 = ((($2206)) + 1|0);
       $2208 = HEAP8[$2207>>0]|0;
       $2209 = $2208&255;
       $2210 = (($2205) + ($2209))|0;
       $2211 = $2210&65535;
       $73 = $2211;
       $2212 = $14;
       $2213 = ((($2212)) + 2|0);
       $2214 = HEAP8[$2213>>0]|0;
       $2215 = $2214&255;
       $2216 = $2215 << 8;
       $2217 = $14;
       $2218 = ((($2217)) + 3|0);
       $2219 = HEAP8[$2218>>0]|0;
       $2220 = $2219&255;
       $2221 = (($2216) + ($2220))|0;
       $2222 = $2221&65535;
       $74 = $2222;
       $2223 = $14;
       $2224 = ((($2223)) + 4|0);
       $2225 = HEAP8[$2224>>0]|0;
       $2226 = $2225&255;
       $2227 = $2226 << 8;
       $2228 = $14;
       $2229 = ((($2228)) + 5|0);
       $2230 = HEAP8[$2229>>0]|0;
       $2231 = $2230&255;
       $2232 = (($2227) + ($2231))|0;
       $2233 = $2232&65535;
       $75 = $2233;
       $2234 = $73;
       $2235 = $2234&65535;
       $2236 = $71;
       $2237 = $2236&65535;
       $2238 = Math_imul($2235, $2237)|0;
       $2239 = $5;
       $2240 = ((($2239)) + 444|0);
       $2241 = ((($2240)) + 2|0);
       $2242 = HEAP16[$2241>>1]|0;
       $2243 = $2242&65535;
       $2244 = $71;
       $2245 = $2244&65535;
       $2246 = (65535 - ($2245))|0;
       $2247 = Math_imul($2243, $2246)|0;
       $2248 = (($2238) + ($2247))|0;
       $2249 = (($2248) + 32768)|0;
       $76 = $2249;
       $2250 = $76;
       $2251 = $76;
       $2252 = $2251 >>> 16;
       $2253 = (($2250) + ($2252))|0;
       $2254 = $2253 >>> 16;
       $2255 = 65535 & $2254;
       $2256 = $2255&65535;
       $72 = $2256;
       $2257 = $72;
       $2258 = $2257&65535;
       $2259 = $2258 >> 8;
       $2260 = $2259 & 255;
       $2261 = $2260&255;
       $2262 = $14;
       HEAP8[$2262>>0] = $2261;
       $2263 = $72;
       $2264 = $2263&65535;
       $2265 = $2264 & 255;
       $2266 = $2265&255;
       $2267 = $14;
       $2268 = ((($2267)) + 1|0);
       HEAP8[$2268>>0] = $2266;
       $2269 = $74;
       $2270 = $2269&65535;
       $2271 = $71;
       $2272 = $2271&65535;
       $2273 = Math_imul($2270, $2272)|0;
       $2274 = $5;
       $2275 = ((($2274)) + 444|0);
       $2276 = ((($2275)) + 4|0);
       $2277 = HEAP16[$2276>>1]|0;
       $2278 = $2277&65535;
       $2279 = $71;
       $2280 = $2279&65535;
       $2281 = (65535 - ($2280))|0;
       $2282 = Math_imul($2278, $2281)|0;
       $2283 = (($2273) + ($2282))|0;
       $2284 = (($2283) + 32768)|0;
       $77 = $2284;
       $2285 = $77;
       $2286 = $77;
       $2287 = $2286 >>> 16;
       $2288 = (($2285) + ($2287))|0;
       $2289 = $2288 >>> 16;
       $2290 = 65535 & $2289;
       $2291 = $2290&65535;
       $72 = $2291;
       $2292 = $72;
       $2293 = $2292&65535;
       $2294 = $2293 >> 8;
       $2295 = $2294 & 255;
       $2296 = $2295&255;
       $2297 = $14;
       $2298 = ((($2297)) + 2|0);
       HEAP8[$2298>>0] = $2296;
       $2299 = $72;
       $2300 = $2299&65535;
       $2301 = $2300 & 255;
       $2302 = $2301&255;
       $2303 = $14;
       $2304 = ((($2303)) + 3|0);
       HEAP8[$2304>>0] = $2302;
       $2305 = $75;
       $2306 = $2305&65535;
       $2307 = $71;
       $2308 = $2307&65535;
       $2309 = Math_imul($2306, $2308)|0;
       $2310 = $5;
       $2311 = ((($2310)) + 444|0);
       $2312 = ((($2311)) + 6|0);
       $2313 = HEAP16[$2312>>1]|0;
       $2314 = $2313&65535;
       $2315 = $71;
       $2316 = $2315&65535;
       $2317 = (65535 - ($2316))|0;
       $2318 = Math_imul($2314, $2317)|0;
       $2319 = (($2309) + ($2318))|0;
       $2320 = (($2319) + 32768)|0;
       $78 = $2320;
       $2321 = $78;
       $2322 = $78;
       $2323 = $2322 >>> 16;
       $2324 = (($2321) + ($2323))|0;
       $2325 = $2324 >>> 16;
       $2326 = 65535 & $2325;
       $2327 = $2326&65535;
       $72 = $2327;
       $2328 = $72;
       $2329 = $2328&65535;
       $2330 = $2329 >> 8;
       $2331 = $2330 & 255;
       $2332 = $2331&255;
       $2333 = $14;
       $2334 = ((($2333)) + 4|0);
       HEAP8[$2334>>0] = $2332;
       $2335 = $72;
       $2336 = $2335&65535;
       $2337 = $2336 & 255;
       $2338 = $2337&255;
       $2339 = $14;
       $$sink44 = $2338;$$sink46 = $2339;
       label = 168;
      }
     }
     if ((label|0) == 168) {
      label = 0;
      $2340 = ((($$sink46)) + 5|0);
      HEAP8[$2340>>0] = $$sink44;
     }
     $2341 = $15;
     $2342 = (($2341) + 1)|0;
     $15 = $2342;
     $2343 = $14;
     $2344 = ((($2343)) + 8|0);
     $14 = $2344;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $1767 = $15;
    $1768 = $16;
    $1769 = ($1767>>>0)<($1768>>>0);
    if (!($1769)) {
     break;
    }
    $1770 = $14;
    $1771 = ((($1770)) + 6|0);
    $1772 = HEAP8[$1771>>0]|0;
    $1773 = $1772&255;
    $1774 = $1773&65535;
    $1775 = $1774 << 8;
    $1776 = $14;
    $1777 = ((($1776)) + 7|0);
    $1778 = HEAP8[$1777>>0]|0;
    $1779 = $1778&255;
    $1780 = $1779&65535;
    $1781 = (($1775) + ($1780))|0;
    $1782 = $1781&65535;
    $64 = $1782;
    $1783 = $64;
    $1784 = $1783&65535;
    $1785 = ($1784|0)==(65535);
    do {
     if ($1785) {
      $1786 = $9;
      $1787 = $14;
      $1788 = ((($1787)) + 1|0);
      $1789 = HEAP8[$1788>>0]|0;
      $1790 = $1789&255;
      $1791 = $12;
      $1792 = $1790 >> $1791;
      $1793 = (($1786) + ($1792<<2)|0);
      $1794 = HEAP32[$1793>>2]|0;
      $1795 = $14;
      $1796 = HEAP8[$1795>>0]|0;
      $1797 = $1796&255;
      $1798 = (($1794) + ($1797<<1)|0);
      $1799 = HEAP16[$1798>>1]|0;
      $65 = $1799;
      $1800 = $65;
      $1801 = $1800&65535;
      $1802 = $1801 >> 8;
      $1803 = $1802 & 255;
      $1804 = $1803&255;
      $1805 = $14;
      HEAP8[$1805>>0] = $1804;
      $1806 = $65;
      $1807 = $1806&65535;
      $1808 = $1807 & 255;
      $1809 = $1808&255;
      $1810 = $14;
      $1811 = ((($1810)) + 1|0);
      HEAP8[$1811>>0] = $1809;
      $1812 = $9;
      $1813 = $14;
      $1814 = ((($1813)) + 3|0);
      $1815 = HEAP8[$1814>>0]|0;
      $1816 = $1815&255;
      $1817 = $12;
      $1818 = $1816 >> $1817;
      $1819 = (($1812) + ($1818<<2)|0);
      $1820 = HEAP32[$1819>>2]|0;
      $1821 = $14;
      $1822 = ((($1821)) + 2|0);
      $1823 = HEAP8[$1822>>0]|0;
      $1824 = $1823&255;
      $1825 = (($1820) + ($1824<<1)|0);
      $1826 = HEAP16[$1825>>1]|0;
      $65 = $1826;
      $1827 = $65;
      $1828 = $1827&65535;
      $1829 = $1828 >> 8;
      $1830 = $1829 & 255;
      $1831 = $1830&255;
      $1832 = $14;
      $1833 = ((($1832)) + 2|0);
      HEAP8[$1833>>0] = $1831;
      $1834 = $65;
      $1835 = $1834&65535;
      $1836 = $1835 & 255;
      $1837 = $1836&255;
      $1838 = $14;
      $1839 = ((($1838)) + 3|0);
      HEAP8[$1839>>0] = $1837;
      $1840 = $9;
      $1841 = $14;
      $1842 = ((($1841)) + 5|0);
      $1843 = HEAP8[$1842>>0]|0;
      $1844 = $1843&255;
      $1845 = $12;
      $1846 = $1844 >> $1845;
      $1847 = (($1840) + ($1846<<2)|0);
      $1848 = HEAP32[$1847>>2]|0;
      $1849 = $14;
      $1850 = ((($1849)) + 4|0);
      $1851 = HEAP8[$1850>>0]|0;
      $1852 = $1851&255;
      $1853 = (($1848) + ($1852<<1)|0);
      $1854 = HEAP16[$1853>>1]|0;
      $65 = $1854;
      $1855 = $65;
      $1856 = $1855&65535;
      $1857 = $1856 >> 8;
      $1858 = $1857 & 255;
      $1859 = $1858&255;
      $1860 = $14;
      $1861 = ((($1860)) + 4|0);
      HEAP8[$1861>>0] = $1859;
      $1862 = $65;
      $1863 = $1862&65535;
      $1864 = $1863 & 255;
      $1865 = $1864&255;
      $1866 = $14;
      $$sink32$sink = $1865;$$sink34$sink = $1866;
     } else {
      $1867 = $64;
      $1868 = $1867&65535;
      $1869 = ($1868|0)==(0);
      if ($1869) {
       $1870 = $5;
       $1871 = ((($1870)) + 444|0);
       $1872 = ((($1871)) + 2|0);
       $1873 = HEAP16[$1872>>1]|0;
       $1874 = $1873&65535;
       $1875 = $1874 >> 8;
       $1876 = $1875 & 255;
       $1877 = $1876&255;
       $1878 = $14;
       HEAP8[$1878>>0] = $1877;
       $1879 = $5;
       $1880 = ((($1879)) + 444|0);
       $1881 = ((($1880)) + 2|0);
       $1882 = HEAP16[$1881>>1]|0;
       $1883 = $1882&65535;
       $1884 = $1883 & 255;
       $1885 = $1884&255;
       $1886 = $14;
       $1887 = ((($1886)) + 1|0);
       HEAP8[$1887>>0] = $1885;
       $1888 = $5;
       $1889 = ((($1888)) + 444|0);
       $1890 = ((($1889)) + 4|0);
       $1891 = HEAP16[$1890>>1]|0;
       $1892 = $1891&65535;
       $1893 = $1892 >> 8;
       $1894 = $1893 & 255;
       $1895 = $1894&255;
       $1896 = $14;
       $1897 = ((($1896)) + 2|0);
       HEAP8[$1897>>0] = $1895;
       $1898 = $5;
       $1899 = ((($1898)) + 444|0);
       $1900 = ((($1899)) + 4|0);
       $1901 = HEAP16[$1900>>1]|0;
       $1902 = $1901&65535;
       $1903 = $1902 & 255;
       $1904 = $1903&255;
       $1905 = $14;
       $1906 = ((($1905)) + 3|0);
       HEAP8[$1906>>0] = $1904;
       $1907 = $5;
       $1908 = ((($1907)) + 444|0);
       $1909 = ((($1908)) + 6|0);
       $1910 = HEAP16[$1909>>1]|0;
       $1911 = $1910&65535;
       $1912 = $1911 >> 8;
       $1913 = $1912 & 255;
       $1914 = $1913&255;
       $1915 = $14;
       $1916 = ((($1915)) + 4|0);
       HEAP8[$1916>>0] = $1914;
       $1917 = $5;
       $1918 = ((($1917)) + 444|0);
       $1919 = ((($1918)) + 6|0);
       $1920 = HEAP16[$1919>>1]|0;
       $1921 = $1920&65535;
       $1922 = $1921 & 255;
       $1923 = $1922&255;
       $1924 = $14;
       $$sink32$sink = $1923;$$sink34$sink = $1924;
       break;
      }
      $1925 = $11;
      $1926 = $14;
      $1927 = ((($1926)) + 1|0);
      $1928 = HEAP8[$1927>>0]|0;
      $1929 = $1928&255;
      $1930 = $12;
      $1931 = $1929 >> $1930;
      $1932 = (($1925) + ($1931<<2)|0);
      $1933 = HEAP32[$1932>>2]|0;
      $1934 = $14;
      $1935 = HEAP8[$1934>>0]|0;
      $1936 = $1935&255;
      $1937 = (($1933) + ($1936<<1)|0);
      $1938 = HEAP16[$1937>>1]|0;
      $66 = $1938;
      $1939 = $66;
      $1940 = $1939&65535;
      $1941 = $64;
      $1942 = $1941&65535;
      $1943 = Math_imul($1940, $1942)|0;
      $1944 = $5;
      $1945 = ((($1944)) + 454|0);
      $1946 = ((($1945)) + 2|0);
      $1947 = HEAP16[$1946>>1]|0;
      $1948 = $1947&65535;
      $1949 = $64;
      $1950 = $1949&65535;
      $1951 = (65535 - ($1950))|0;
      $1952 = Math_imul($1948, $1951)|0;
      $1953 = (($1943) + ($1952))|0;
      $1954 = (($1953) + 32768)|0;
      $68 = $1954;
      $1955 = $68;
      $1956 = $68;
      $1957 = $1956 >>> 16;
      $1958 = (($1955) + ($1957))|0;
      $1959 = $1958 >>> 16;
      $1960 = 65535 & $1959;
      $1961 = $1960&65535;
      $67 = $1961;
      $1962 = $13;
      $1963 = ($1962|0)==(0);
      if ($1963) {
       $1964 = $10;
       $1965 = $67;
       $1966 = $1965&65535;
       $1967 = $1966 & 255;
       $1968 = $12;
       $1969 = $1967 >> $1968;
       $1970 = (($1964) + ($1969<<2)|0);
       $1971 = HEAP32[$1970>>2]|0;
       $1972 = $67;
       $1973 = $1972&65535;
       $1974 = $1973 >> 8;
       $1975 = (($1971) + ($1974<<1)|0);
       $1976 = HEAP16[$1975>>1]|0;
       $67 = $1976;
      }
      $1977 = $67;
      $1978 = $1977&65535;
      $1979 = $1978 >> 8;
      $1980 = $1979 & 255;
      $1981 = $1980&255;
      $1982 = $14;
      HEAP8[$1982>>0] = $1981;
      $1983 = $67;
      $1984 = $1983&65535;
      $1985 = $1984 & 255;
      $1986 = $1985&255;
      $1987 = $14;
      $1988 = ((($1987)) + 1|0);
      HEAP8[$1988>>0] = $1986;
      $1989 = $11;
      $1990 = $14;
      $1991 = ((($1990)) + 3|0);
      $1992 = HEAP8[$1991>>0]|0;
      $1993 = $1992&255;
      $1994 = $12;
      $1995 = $1993 >> $1994;
      $1996 = (($1989) + ($1995<<2)|0);
      $1997 = HEAP32[$1996>>2]|0;
      $1998 = $14;
      $1999 = ((($1998)) + 2|0);
      $2000 = HEAP8[$1999>>0]|0;
      $2001 = $2000&255;
      $2002 = (($1997) + ($2001<<1)|0);
      $2003 = HEAP16[$2002>>1]|0;
      $66 = $2003;
      $2004 = $66;
      $2005 = $2004&65535;
      $2006 = $64;
      $2007 = $2006&65535;
      $2008 = Math_imul($2005, $2007)|0;
      $2009 = $5;
      $2010 = ((($2009)) + 454|0);
      $2011 = ((($2010)) + 4|0);
      $2012 = HEAP16[$2011>>1]|0;
      $2013 = $2012&65535;
      $2014 = $64;
      $2015 = $2014&65535;
      $2016 = (65535 - ($2015))|0;
      $2017 = Math_imul($2013, $2016)|0;
      $2018 = (($2008) + ($2017))|0;
      $2019 = (($2018) + 32768)|0;
      $69 = $2019;
      $2020 = $69;
      $2021 = $69;
      $2022 = $2021 >>> 16;
      $2023 = (($2020) + ($2022))|0;
      $2024 = $2023 >>> 16;
      $2025 = 65535 & $2024;
      $2026 = $2025&65535;
      $67 = $2026;
      $2027 = $13;
      $2028 = ($2027|0)==(0);
      if ($2028) {
       $2029 = $10;
       $2030 = $67;
       $2031 = $2030&65535;
       $2032 = $2031 & 255;
       $2033 = $12;
       $2034 = $2032 >> $2033;
       $2035 = (($2029) + ($2034<<2)|0);
       $2036 = HEAP32[$2035>>2]|0;
       $2037 = $67;
       $2038 = $2037&65535;
       $2039 = $2038 >> 8;
       $2040 = (($2036) + ($2039<<1)|0);
       $2041 = HEAP16[$2040>>1]|0;
       $67 = $2041;
      }
      $2042 = $67;
      $2043 = $2042&65535;
      $2044 = $2043 >> 8;
      $2045 = $2044 & 255;
      $2046 = $2045&255;
      $2047 = $14;
      $2048 = ((($2047)) + 2|0);
      HEAP8[$2048>>0] = $2046;
      $2049 = $67;
      $2050 = $2049&65535;
      $2051 = $2050 & 255;
      $2052 = $2051&255;
      $2053 = $14;
      $2054 = ((($2053)) + 3|0);
      HEAP8[$2054>>0] = $2052;
      $2055 = $11;
      $2056 = $14;
      $2057 = ((($2056)) + 5|0);
      $2058 = HEAP8[$2057>>0]|0;
      $2059 = $2058&255;
      $2060 = $12;
      $2061 = $2059 >> $2060;
      $2062 = (($2055) + ($2061<<2)|0);
      $2063 = HEAP32[$2062>>2]|0;
      $2064 = $14;
      $2065 = ((($2064)) + 4|0);
      $2066 = HEAP8[$2065>>0]|0;
      $2067 = $2066&255;
      $2068 = (($2063) + ($2067<<1)|0);
      $2069 = HEAP16[$2068>>1]|0;
      $66 = $2069;
      $2070 = $66;
      $2071 = $2070&65535;
      $2072 = $64;
      $2073 = $2072&65535;
      $2074 = Math_imul($2071, $2073)|0;
      $2075 = $5;
      $2076 = ((($2075)) + 454|0);
      $2077 = ((($2076)) + 6|0);
      $2078 = HEAP16[$2077>>1]|0;
      $2079 = $2078&65535;
      $2080 = $64;
      $2081 = $2080&65535;
      $2082 = (65535 - ($2081))|0;
      $2083 = Math_imul($2079, $2082)|0;
      $2084 = (($2074) + ($2083))|0;
      $2085 = (($2084) + 32768)|0;
      $70 = $2085;
      $2086 = $70;
      $2087 = $70;
      $2088 = $2087 >>> 16;
      $2089 = (($2086) + ($2088))|0;
      $2090 = $2089 >>> 16;
      $2091 = 65535 & $2090;
      $2092 = $2091&65535;
      $67 = $2092;
      $2093 = $13;
      $2094 = ($2093|0)==(0);
      if ($2094) {
       $2095 = $10;
       $2096 = $67;
       $2097 = $2096&65535;
       $2098 = $2097 & 255;
       $2099 = $12;
       $2100 = $2098 >> $2099;
       $2101 = (($2095) + ($2100<<2)|0);
       $2102 = HEAP32[$2101>>2]|0;
       $2103 = $67;
       $2104 = $2103&65535;
       $2105 = $2104 >> 8;
       $2106 = (($2102) + ($2105<<1)|0);
       $2107 = HEAP16[$2106>>1]|0;
       $67 = $2107;
      }
      $2108 = $67;
      $2109 = $2108&65535;
      $2110 = $2109 >> 8;
      $2111 = $2110 & 255;
      $2112 = $2111&255;
      $2113 = $14;
      $2114 = ((($2113)) + 4|0);
      HEAP8[$2114>>0] = $2112;
      $2115 = $67;
      $2116 = $2115&65535;
      $2117 = $2116 & 255;
      $2118 = $2117&255;
      $2119 = $14;
      $$sink32$sink = $2118;$$sink34$sink = $2119;
     }
    } while(0);
    $2120 = ((($$sink34$sink)) + 5|0);
    HEAP8[$2120>>0] = $$sink32$sink;
    $2121 = $15;
    $2122 = (($2121) + 1)|0;
    $15 = $2122;
    $2123 = $14;
    $2124 = ((($2123)) + 8|0);
    $14 = $2124;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _png_do_gamma($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $22 = $5;
 $23 = ((($22)) + 484|0);
 $24 = HEAP32[$23>>2]|0;
 $6 = $24;
 $25 = $5;
 $26 = ((($25)) + 488|0);
 $27 = HEAP32[$26>>2]|0;
 $7 = $27;
 $28 = $5;
 $29 = ((($28)) + 476|0);
 $30 = HEAP32[$29>>2]|0;
 $8 = $30;
 $31 = $3;
 $32 = HEAP32[$31>>2]|0;
 $11 = $32;
 $33 = $3;
 $34 = ((($33)) + 9|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)<=(8);
 $38 = $6;
 $39 = ($38|0)!=(0|0);
 $or$cond = $37 & $39;
 if (!($or$cond)) {
  $40 = $3;
  $41 = ((($40)) + 9|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($43|0)==(16);
  $45 = $7;
  $46 = ($45|0)!=(0|0);
  $or$cond3 = $44 & $46;
  if (!($or$cond3)) {
   STACKTOP = sp;return;
  }
 }
 $47 = $3;
 $48 = ((($47)) + 8|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 switch ($50|0) {
 case 2:  {
  $51 = $3;
  $52 = ((($51)) + 9|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)==(8);
  $56 = $4;
  $9 = $56;
  $10 = 0;
  if ($55) {
   while(1) {
    $57 = $10;
    $58 = $11;
    $59 = ($57>>>0)<($58>>>0);
    if (!($59)) {
     break;
    }
    $60 = $6;
    $61 = $9;
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = (($60) + ($63)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $9;
    HEAP8[$66>>0] = $65;
    $67 = $9;
    $68 = ((($67)) + 1|0);
    $9 = $68;
    $69 = $6;
    $70 = $9;
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = (($69) + ($72)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $9;
    HEAP8[$75>>0] = $74;
    $76 = $9;
    $77 = ((($76)) + 1|0);
    $9 = $77;
    $78 = $6;
    $79 = $9;
    $80 = HEAP8[$79>>0]|0;
    $81 = $80&255;
    $82 = (($78) + ($81)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $9;
    HEAP8[$84>>0] = $83;
    $85 = $9;
    $86 = ((($85)) + 1|0);
    $9 = $86;
    $87 = $10;
    $88 = (($87) + 1)|0;
    $10 = $88;
   }
   STACKTOP = sp;return;
  } else {
   while(1) {
    $89 = $10;
    $90 = $11;
    $91 = ($89>>>0)<($90>>>0);
    if (!($91)) {
     break;
    }
    $92 = $7;
    $93 = $9;
    $94 = ((($93)) + 1|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = $8;
    $98 = $96 >> $97;
    $99 = (($92) + ($98<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $9;
    $102 = HEAP8[$101>>0]|0;
    $103 = $102&255;
    $104 = (($100) + ($103<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $12 = $105;
    $106 = $12;
    $107 = $106&65535;
    $108 = $107 >> 8;
    $109 = $108 & 255;
    $110 = $109&255;
    $111 = $9;
    HEAP8[$111>>0] = $110;
    $112 = $12;
    $113 = $112&65535;
    $114 = $113 & 255;
    $115 = $114&255;
    $116 = $9;
    $117 = ((($116)) + 1|0);
    HEAP8[$117>>0] = $115;
    $118 = $9;
    $119 = ((($118)) + 2|0);
    $9 = $119;
    $120 = $7;
    $121 = $9;
    $122 = ((($121)) + 1|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = $8;
    $126 = $124 >> $125;
    $127 = (($120) + ($126<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $9;
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = (($128) + ($131<<1)|0);
    $133 = HEAP16[$132>>1]|0;
    $12 = $133;
    $134 = $12;
    $135 = $134&65535;
    $136 = $135 >> 8;
    $137 = $136 & 255;
    $138 = $137&255;
    $139 = $9;
    HEAP8[$139>>0] = $138;
    $140 = $12;
    $141 = $140&65535;
    $142 = $141 & 255;
    $143 = $142&255;
    $144 = $9;
    $145 = ((($144)) + 1|0);
    HEAP8[$145>>0] = $143;
    $146 = $9;
    $147 = ((($146)) + 2|0);
    $9 = $147;
    $148 = $7;
    $149 = $9;
    $150 = ((($149)) + 1|0);
    $151 = HEAP8[$150>>0]|0;
    $152 = $151&255;
    $153 = $8;
    $154 = $152 >> $153;
    $155 = (($148) + ($154<<2)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $9;
    $158 = HEAP8[$157>>0]|0;
    $159 = $158&255;
    $160 = (($156) + ($159<<1)|0);
    $161 = HEAP16[$160>>1]|0;
    $12 = $161;
    $162 = $12;
    $163 = $162&65535;
    $164 = $163 >> 8;
    $165 = $164 & 255;
    $166 = $165&255;
    $167 = $9;
    HEAP8[$167>>0] = $166;
    $168 = $12;
    $169 = $168&65535;
    $170 = $169 & 255;
    $171 = $170&255;
    $172 = $9;
    $173 = ((($172)) + 1|0);
    HEAP8[$173>>0] = $171;
    $174 = $9;
    $175 = ((($174)) + 2|0);
    $9 = $175;
    $176 = $10;
    $177 = (($176) + 1)|0;
    $10 = $177;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 case 6:  {
  $178 = $3;
  $179 = ((($178)) + 9|0);
  $180 = HEAP8[$179>>0]|0;
  $181 = $180&255;
  $182 = ($181|0)==(8);
  $183 = $4;
  $9 = $183;
  $10 = 0;
  if ($182) {
   while(1) {
    $184 = $10;
    $185 = $11;
    $186 = ($184>>>0)<($185>>>0);
    if (!($186)) {
     break;
    }
    $187 = $6;
    $188 = $9;
    $189 = HEAP8[$188>>0]|0;
    $190 = $189&255;
    $191 = (($187) + ($190)|0);
    $192 = HEAP8[$191>>0]|0;
    $193 = $9;
    HEAP8[$193>>0] = $192;
    $194 = $9;
    $195 = ((($194)) + 1|0);
    $9 = $195;
    $196 = $6;
    $197 = $9;
    $198 = HEAP8[$197>>0]|0;
    $199 = $198&255;
    $200 = (($196) + ($199)|0);
    $201 = HEAP8[$200>>0]|0;
    $202 = $9;
    HEAP8[$202>>0] = $201;
    $203 = $9;
    $204 = ((($203)) + 1|0);
    $9 = $204;
    $205 = $6;
    $206 = $9;
    $207 = HEAP8[$206>>0]|0;
    $208 = $207&255;
    $209 = (($205) + ($208)|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = $9;
    HEAP8[$211>>0] = $210;
    $212 = $9;
    $213 = ((($212)) + 1|0);
    $9 = $213;
    $214 = $9;
    $215 = ((($214)) + 1|0);
    $9 = $215;
    $216 = $10;
    $217 = (($216) + 1)|0;
    $10 = $217;
   }
   STACKTOP = sp;return;
  } else {
   while(1) {
    $218 = $10;
    $219 = $11;
    $220 = ($218>>>0)<($219>>>0);
    if (!($220)) {
     break;
    }
    $221 = $7;
    $222 = $9;
    $223 = ((($222)) + 1|0);
    $224 = HEAP8[$223>>0]|0;
    $225 = $224&255;
    $226 = $8;
    $227 = $225 >> $226;
    $228 = (($221) + ($227<<2)|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = $9;
    $231 = HEAP8[$230>>0]|0;
    $232 = $231&255;
    $233 = (($229) + ($232<<1)|0);
    $234 = HEAP16[$233>>1]|0;
    $13 = $234;
    $235 = $13;
    $236 = $235&65535;
    $237 = $236 >> 8;
    $238 = $237 & 255;
    $239 = $238&255;
    $240 = $9;
    HEAP8[$240>>0] = $239;
    $241 = $13;
    $242 = $241&65535;
    $243 = $242 & 255;
    $244 = $243&255;
    $245 = $9;
    $246 = ((($245)) + 1|0);
    HEAP8[$246>>0] = $244;
    $247 = $9;
    $248 = ((($247)) + 2|0);
    $9 = $248;
    $249 = $7;
    $250 = $9;
    $251 = ((($250)) + 1|0);
    $252 = HEAP8[$251>>0]|0;
    $253 = $252&255;
    $254 = $8;
    $255 = $253 >> $254;
    $256 = (($249) + ($255<<2)|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = $9;
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = (($257) + ($260<<1)|0);
    $262 = HEAP16[$261>>1]|0;
    $13 = $262;
    $263 = $13;
    $264 = $263&65535;
    $265 = $264 >> 8;
    $266 = $265 & 255;
    $267 = $266&255;
    $268 = $9;
    HEAP8[$268>>0] = $267;
    $269 = $13;
    $270 = $269&65535;
    $271 = $270 & 255;
    $272 = $271&255;
    $273 = $9;
    $274 = ((($273)) + 1|0);
    HEAP8[$274>>0] = $272;
    $275 = $9;
    $276 = ((($275)) + 2|0);
    $9 = $276;
    $277 = $7;
    $278 = $9;
    $279 = ((($278)) + 1|0);
    $280 = HEAP8[$279>>0]|0;
    $281 = $280&255;
    $282 = $8;
    $283 = $281 >> $282;
    $284 = (($277) + ($283<<2)|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = $9;
    $287 = HEAP8[$286>>0]|0;
    $288 = $287&255;
    $289 = (($285) + ($288<<1)|0);
    $290 = HEAP16[$289>>1]|0;
    $13 = $290;
    $291 = $13;
    $292 = $291&65535;
    $293 = $292 >> 8;
    $294 = $293 & 255;
    $295 = $294&255;
    $296 = $9;
    HEAP8[$296>>0] = $295;
    $297 = $13;
    $298 = $297&65535;
    $299 = $298 & 255;
    $300 = $299&255;
    $301 = $9;
    $302 = ((($301)) + 1|0);
    HEAP8[$302>>0] = $300;
    $303 = $9;
    $304 = ((($303)) + 4|0);
    $9 = $304;
    $305 = $10;
    $306 = (($305) + 1)|0;
    $10 = $306;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $307 = $3;
  $308 = ((($307)) + 9|0);
  $309 = HEAP8[$308>>0]|0;
  $310 = $309&255;
  $311 = ($310|0)==(8);
  $312 = $4;
  $9 = $312;
  $10 = 0;
  if ($311) {
   while(1) {
    $313 = $10;
    $314 = $11;
    $315 = ($313>>>0)<($314>>>0);
    if (!($315)) {
     break;
    }
    $316 = $6;
    $317 = $9;
    $318 = HEAP8[$317>>0]|0;
    $319 = $318&255;
    $320 = (($316) + ($319)|0);
    $321 = HEAP8[$320>>0]|0;
    $322 = $9;
    HEAP8[$322>>0] = $321;
    $323 = $9;
    $324 = ((($323)) + 2|0);
    $9 = $324;
    $325 = $10;
    $326 = (($325) + 1)|0;
    $10 = $326;
   }
   STACKTOP = sp;return;
  } else {
   while(1) {
    $327 = $10;
    $328 = $11;
    $329 = ($327>>>0)<($328>>>0);
    if (!($329)) {
     break;
    }
    $330 = $7;
    $331 = $9;
    $332 = ((($331)) + 1|0);
    $333 = HEAP8[$332>>0]|0;
    $334 = $333&255;
    $335 = $8;
    $336 = $334 >> $335;
    $337 = (($330) + ($336<<2)|0);
    $338 = HEAP32[$337>>2]|0;
    $339 = $9;
    $340 = HEAP8[$339>>0]|0;
    $341 = $340&255;
    $342 = (($338) + ($341<<1)|0);
    $343 = HEAP16[$342>>1]|0;
    $14 = $343;
    $344 = $14;
    $345 = $344&65535;
    $346 = $345 >> 8;
    $347 = $346 & 255;
    $348 = $347&255;
    $349 = $9;
    HEAP8[$349>>0] = $348;
    $350 = $14;
    $351 = $350&65535;
    $352 = $351 & 255;
    $353 = $352&255;
    $354 = $9;
    $355 = ((($354)) + 1|0);
    HEAP8[$355>>0] = $353;
    $356 = $9;
    $357 = ((($356)) + 4|0);
    $9 = $357;
    $358 = $10;
    $359 = (($358) + 1)|0;
    $10 = $359;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 case 0:  {
  $360 = $3;
  $361 = ((($360)) + 9|0);
  $362 = HEAP8[$361>>0]|0;
  $363 = $362&255;
  $364 = ($363|0)==(2);
  L37: do {
   if ($364) {
    $365 = $4;
    $9 = $365;
    $10 = 0;
    while(1) {
     $366 = $10;
     $367 = $11;
     $368 = ($366>>>0)<($367>>>0);
     if (!($368)) {
      break L37;
     }
     $369 = $9;
     $370 = HEAP8[$369>>0]|0;
     $371 = $370&255;
     $372 = $371 & 192;
     $15 = $372;
     $373 = $9;
     $374 = HEAP8[$373>>0]|0;
     $375 = $374&255;
     $376 = $375 & 48;
     $16 = $376;
     $377 = $9;
     $378 = HEAP8[$377>>0]|0;
     $379 = $378&255;
     $380 = $379 & 12;
     $17 = $380;
     $381 = $9;
     $382 = HEAP8[$381>>0]|0;
     $383 = $382&255;
     $384 = $383 & 3;
     $18 = $384;
     $385 = $6;
     $386 = $15;
     $387 = $15;
     $388 = $387 >> 2;
     $389 = $386 | $388;
     $390 = $15;
     $391 = $390 >> 4;
     $392 = $389 | $391;
     $393 = $15;
     $394 = $393 >> 6;
     $395 = $392 | $394;
     $396 = (($385) + ($395)|0);
     $397 = HEAP8[$396>>0]|0;
     $398 = $397&255;
     $399 = $398 & 192;
     $400 = $6;
     $401 = $16;
     $402 = $401 << 2;
     $403 = $16;
     $404 = $402 | $403;
     $405 = $16;
     $406 = $405 >> 2;
     $407 = $404 | $406;
     $408 = $16;
     $409 = $408 >> 4;
     $410 = $407 | $409;
     $411 = (($400) + ($410)|0);
     $412 = HEAP8[$411>>0]|0;
     $413 = $412&255;
     $414 = $413 >> 2;
     $415 = $414 & 48;
     $416 = $399 | $415;
     $417 = $6;
     $418 = $17;
     $419 = $418 << 4;
     $420 = $17;
     $421 = $420 << 2;
     $422 = $419 | $421;
     $423 = $17;
     $424 = $422 | $423;
     $425 = $17;
     $426 = $425 >> 2;
     $427 = $424 | $426;
     $428 = (($417) + ($427)|0);
     $429 = HEAP8[$428>>0]|0;
     $430 = $429&255;
     $431 = $430 >> 4;
     $432 = $431 & 12;
     $433 = $416 | $432;
     $434 = $6;
     $435 = $18;
     $436 = $435 << 6;
     $437 = $18;
     $438 = $437 << 4;
     $439 = $436 | $438;
     $440 = $18;
     $441 = $440 << 2;
     $442 = $439 | $441;
     $443 = $18;
     $444 = $442 | $443;
     $445 = (($434) + ($444)|0);
     $446 = HEAP8[$445>>0]|0;
     $447 = $446&255;
     $448 = $447 >> 6;
     $449 = $433 | $448;
     $450 = $449&255;
     $451 = $9;
     HEAP8[$451>>0] = $450;
     $452 = $9;
     $453 = ((($452)) + 1|0);
     $9 = $453;
     $454 = $10;
     $455 = (($454) + 4)|0;
     $10 = $455;
    }
   }
  } while(0);
  $456 = $3;
  $457 = ((($456)) + 9|0);
  $458 = HEAP8[$457>>0]|0;
  $459 = $458&255;
  $460 = ($459|0)==(4);
  if ($460) {
   $461 = $4;
   $9 = $461;
   $10 = 0;
   while(1) {
    $462 = $10;
    $463 = $11;
    $464 = ($462>>>0)<($463>>>0);
    if (!($464)) {
     break;
    }
    $465 = $9;
    $466 = HEAP8[$465>>0]|0;
    $467 = $466&255;
    $468 = $467 & 240;
    $19 = $468;
    $469 = $9;
    $470 = HEAP8[$469>>0]|0;
    $471 = $470&255;
    $472 = $471 & 15;
    $20 = $472;
    $473 = $6;
    $474 = $19;
    $475 = $19;
    $476 = $475 >> 4;
    $477 = $474 | $476;
    $478 = (($473) + ($477)|0);
    $479 = HEAP8[$478>>0]|0;
    $480 = $479&255;
    $481 = $480 & 240;
    $482 = $6;
    $483 = $20;
    $484 = $483 << 4;
    $485 = $20;
    $486 = $484 | $485;
    $487 = (($482) + ($486)|0);
    $488 = HEAP8[$487>>0]|0;
    $489 = $488&255;
    $490 = $489 >> 4;
    $491 = $481 | $490;
    $492 = $491&255;
    $493 = $9;
    HEAP8[$493>>0] = $492;
    $494 = $9;
    $495 = ((($494)) + 1|0);
    $9 = $495;
    $496 = $10;
    $497 = (($496) + 2)|0;
    $10 = $497;
   }
   STACKTOP = sp;return;
  }
  $498 = $3;
  $499 = ((($498)) + 9|0);
  $500 = HEAP8[$499>>0]|0;
  $501 = $500&255;
  $502 = ($501|0)==(8);
  if ($502) {
   $503 = $4;
   $9 = $503;
   $10 = 0;
   while(1) {
    $504 = $10;
    $505 = $11;
    $506 = ($504>>>0)<($505>>>0);
    if (!($506)) {
     break;
    }
    $507 = $6;
    $508 = $9;
    $509 = HEAP8[$508>>0]|0;
    $510 = $509&255;
    $511 = (($507) + ($510)|0);
    $512 = HEAP8[$511>>0]|0;
    $513 = $9;
    HEAP8[$513>>0] = $512;
    $514 = $9;
    $515 = ((($514)) + 1|0);
    $9 = $515;
    $516 = $10;
    $517 = (($516) + 1)|0;
    $10 = $517;
   }
   STACKTOP = sp;return;
  }
  $518 = $3;
  $519 = ((($518)) + 9|0);
  $520 = HEAP8[$519>>0]|0;
  $521 = $520&255;
  $522 = ($521|0)==(16);
  if (!($522)) {
   STACKTOP = sp;return;
  }
  $523 = $4;
  $9 = $523;
  $10 = 0;
  while(1) {
   $524 = $10;
   $525 = $11;
   $526 = ($524>>>0)<($525>>>0);
   if (!($526)) {
    break;
   }
   $527 = $7;
   $528 = $9;
   $529 = ((($528)) + 1|0);
   $530 = HEAP8[$529>>0]|0;
   $531 = $530&255;
   $532 = $8;
   $533 = $531 >> $532;
   $534 = (($527) + ($533<<2)|0);
   $535 = HEAP32[$534>>2]|0;
   $536 = $9;
   $537 = HEAP8[$536>>0]|0;
   $538 = $537&255;
   $539 = (($535) + ($538<<1)|0);
   $540 = HEAP16[$539>>1]|0;
   $21 = $540;
   $541 = $21;
   $542 = $541&65535;
   $543 = $542 >> 8;
   $544 = $543 & 255;
   $545 = $544&255;
   $546 = $9;
   HEAP8[$546>>0] = $545;
   $547 = $21;
   $548 = $547&65535;
   $549 = $548 & 255;
   $550 = $549&255;
   $551 = $9;
   $552 = ((($551)) + 1|0);
   HEAP8[$552>>0] = $550;
   $553 = $9;
   $554 = ((($553)) + 2|0);
   $9 = $554;
   $555 = $10;
   $556 = (($555) + 1)|0;
   $10 = $556;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _png_do_encode_alpha($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $6 = $14;
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 & 4;
 $20 = ($19|0)!=(0);
 do {
  if ($20) {
   $21 = $3;
   $22 = ((($21)) + 9|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($24|0)==(8);
   if ($25) {
    $26 = $5;
    $27 = ((($26)) + 492|0);
    $28 = HEAP32[$27>>2]|0;
    $7 = $28;
    $29 = $7;
    $30 = ($29|0)!=(0|0);
    if (!($30)) {
     break;
    }
    $31 = $3;
    $32 = ((($31)) + 8|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = $34 & 2;
    $36 = ($35|0)!=(0);
    $37 = $36 ? 4 : 2;
    $8 = $37;
    $38 = $8;
    $39 = (($38) - 1)|0;
    $40 = $4;
    $41 = (($40) + ($39)|0);
    $4 = $41;
    while(1) {
     $42 = $6;
     $43 = ($42>>>0)>(0);
     if (!($43)) {
      break;
     }
     $44 = $7;
     $45 = $4;
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = (($44) + ($47)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $4;
     HEAP8[$50>>0] = $49;
     $51 = $6;
     $52 = (($51) + -1)|0;
     $6 = $52;
     $53 = $8;
     $54 = $4;
     $55 = (($54) + ($53)|0);
     $4 = $55;
    }
    STACKTOP = sp;return;
   }
   $56 = $3;
   $57 = ((($56)) + 9|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59|0)==(16);
   if ($60) {
    $61 = $5;
    $62 = ((($61)) + 500|0);
    $63 = HEAP32[$62>>2]|0;
    $9 = $63;
    $64 = $5;
    $65 = ((($64)) + 476|0);
    $66 = HEAP32[$65>>2]|0;
    $10 = $66;
    $67 = $9;
    $68 = ($67|0)!=(0|0);
    if ($68) {
     $69 = $3;
     $70 = ((($69)) + 8|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     $73 = $72 & 2;
     $74 = ($73|0)!=(0);
     $75 = $74 ? 8 : 4;
     $11 = $75;
     $76 = $11;
     $77 = (($76) - 2)|0;
     $78 = $4;
     $79 = (($78) + ($77)|0);
     $4 = $79;
     while(1) {
      $80 = $6;
      $81 = ($80>>>0)>(0);
      if (!($81)) {
       break;
      }
      $82 = $9;
      $83 = $4;
      $84 = ((($83)) + 1|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85&255;
      $87 = $10;
      $88 = $86 >> $87;
      $89 = (($82) + ($88<<2)|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = $4;
      $92 = HEAP8[$91>>0]|0;
      $93 = $92&255;
      $94 = (($90) + ($93<<1)|0);
      $95 = HEAP16[$94>>1]|0;
      $12 = $95;
      $96 = $12;
      $97 = $96&65535;
      $98 = $97 >> 8;
      $99 = $98 & 255;
      $100 = $99&255;
      $101 = $4;
      HEAP8[$101>>0] = $100;
      $102 = $12;
      $103 = $102&65535;
      $104 = $103 & 255;
      $105 = $104&255;
      $106 = $4;
      $107 = ((($106)) + 1|0);
      HEAP8[$107>>0] = $105;
      $108 = $6;
      $109 = (($108) + -1)|0;
      $6 = $109;
      $110 = $11;
      $111 = $4;
      $112 = (($111) + ($110)|0);
      $4 = $112;
     }
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $113 = $5;
 _png_warning($113,15376);
 STACKTOP = sp;return;
}
function _png_do_scale_16_to_8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 9|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(16);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $3;
 $4 = $13;
 $14 = $3;
 $5 = $14;
 $15 = $4;
 $16 = $2;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($15) + ($18)|0);
 $6 = $19;
 while(1) {
  $20 = $4;
  $21 = $6;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $4;
  $24 = ((($23)) + 1|0);
  $4 = $24;
  $25 = HEAP8[$23>>0]|0;
  $26 = $25&255;
  $7 = $26;
  $27 = $4;
  $28 = ((($27)) + 1|0);
  $4 = $28;
  $29 = HEAP8[$27>>0]|0;
  $30 = $29&255;
  $31 = $7;
  $32 = (($30) - ($31))|0;
  $33 = (($32) + 128)|0;
  $34 = ($33*65535)|0;
  $35 = $34 >> 24;
  $36 = $7;
  $37 = (($36) + ($35))|0;
  $7 = $37;
  $38 = $7;
  $39 = $38&255;
  $40 = $5;
  $41 = ((($40)) + 1|0);
  $5 = $41;
  HEAP8[$40>>0] = $39;
 }
 $42 = $2;
 $43 = ((($42)) + 9|0);
 HEAP8[$43>>0] = 8;
 $44 = $2;
 $45 = ((($44)) + 10|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47<<3;
 $49 = $48&255;
 $50 = $2;
 $51 = ((($50)) + 11|0);
 HEAP8[$51>>0] = $49;
 $52 = $2;
 $53 = HEAP32[$52>>2]|0;
 $54 = $2;
 $55 = ((($54)) + 10|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = Math_imul($53, $57)|0;
 $59 = $2;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = $58;
 STACKTOP = sp;return;
}
function _png_do_chop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 9|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(16);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $3;
 $4 = $12;
 $13 = $3;
 $5 = $13;
 $14 = $4;
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) + ($17)|0);
 $6 = $18;
 while(1) {
  $19 = $4;
  $20 = $6;
  $21 = ($19>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = $4;
  $23 = HEAP8[$22>>0]|0;
  $24 = $5;
  $25 = ((($24)) + 1|0);
  $5 = $25;
  HEAP8[$24>>0] = $23;
  $26 = $4;
  $27 = ((($26)) + 2|0);
  $4 = $27;
 }
 $28 = $2;
 $29 = ((($28)) + 9|0);
 HEAP8[$29>>0] = 8;
 $30 = $2;
 $31 = ((($30)) + 10|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33<<3;
 $35 = $34&255;
 $36 = $2;
 $37 = ((($36)) + 11|0);
 HEAP8[$37>>0] = $35;
 $38 = $2;
 $39 = HEAP32[$38>>2]|0;
 $40 = $2;
 $41 = ((($40)) + 10|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = Math_imul($39, $43)|0;
 $45 = $2;
 $46 = ((($45)) + 4|0);
 HEAP32[$46>>2] = $44;
 STACKTOP = sp;return;
}
function _png_do_quantize($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $11 = $21;
 $22 = $4;
 $23 = ((($22)) + 9|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25|0)==(8);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $4;
 $28 = ((($27)) + 8|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = ($30|0)==(2);
 $32 = $6;
 $33 = ($32|0)!=(0|0);
 $or$cond = $31 & $33;
 if ($or$cond) {
  $34 = $5;
  $8 = $34;
  $35 = $5;
  $9 = $35;
  $10 = 0;
  while(1) {
   $36 = $10;
   $37 = $11;
   $38 = ($36>>>0)<($37>>>0);
   if (!($38)) {
    break;
   }
   $39 = $8;
   $40 = ((($39)) + 1|0);
   $8 = $40;
   $41 = HEAP8[$39>>0]|0;
   $42 = $41&255;
   $12 = $42;
   $43 = $8;
   $44 = ((($43)) + 1|0);
   $8 = $44;
   $45 = HEAP8[$43>>0]|0;
   $46 = $45&255;
   $13 = $46;
   $47 = $8;
   $48 = ((($47)) + 1|0);
   $8 = $48;
   $49 = HEAP8[$47>>0]|0;
   $50 = $49&255;
   $14 = $50;
   $51 = $12;
   $52 = $51 >> 3;
   $53 = $52 & 31;
   $54 = $53 << 10;
   $55 = $13;
   $56 = $55 >> 3;
   $57 = $56 & 31;
   $58 = $57 << 5;
   $59 = $54 | $58;
   $60 = $14;
   $61 = $60 >> 3;
   $62 = $61 & 31;
   $63 = $59 | $62;
   $15 = $63;
   $64 = $6;
   $65 = $15;
   $66 = (($64) + ($65)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $9;
   $69 = ((($68)) + 1|0);
   $9 = $69;
   HEAP8[$68>>0] = $67;
   $70 = $10;
   $71 = (($70) + 1)|0;
   $10 = $71;
  }
  $72 = $4;
  $73 = ((($72)) + 8|0);
  HEAP8[$73>>0] = 3;
  $74 = $4;
  $75 = ((($74)) + 10|0);
  HEAP8[$75>>0] = 1;
  $76 = $4;
  $77 = ((($76)) + 9|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $4;
  $80 = ((($79)) + 11|0);
  HEAP8[$80>>0] = $78;
  $81 = $4;
  $82 = ((($81)) + 11|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ($84|0)>=(8);
  $86 = $11;
  $87 = $4;
  $88 = ((($87)) + 11|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  if ($85) {
   $91 = $90 >>> 3;
   $92 = Math_imul($86, $91)|0;
   $98 = $92;
  } else {
   $93 = Math_imul($86, $90)|0;
   $94 = (($93) + 7)|0;
   $95 = $94 >>> 3;
   $98 = $95;
  }
  $96 = $4;
  $97 = ((($96)) + 4|0);
  HEAP32[$97>>2] = $98;
  STACKTOP = sp;return;
 }
 $99 = $4;
 $100 = ((($99)) + 8|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = ($102|0)==(6);
 $104 = $6;
 $105 = ($104|0)!=(0|0);
 $or$cond3 = $103 & $105;
 if (!($or$cond3)) {
  $173 = $4;
  $174 = ((($173)) + 8|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = ($176|0)==(3);
  $178 = $7;
  $179 = ($178|0)!=(0|0);
  $or$cond5 = $177 & $179;
  if (!($or$cond5)) {
   STACKTOP = sp;return;
  }
  $180 = $5;
  $8 = $180;
  $10 = 0;
  while(1) {
   $181 = $10;
   $182 = $11;
   $183 = ($181>>>0)<($182>>>0);
   if (!($183)) {
    break;
   }
   $184 = $7;
   $185 = $8;
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = (($184) + ($187)|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $8;
   HEAP8[$190>>0] = $189;
   $191 = $10;
   $192 = (($191) + 1)|0;
   $10 = $192;
   $193 = $8;
   $194 = ((($193)) + 1|0);
   $8 = $194;
  }
  STACKTOP = sp;return;
 }
 $106 = $5;
 $8 = $106;
 $107 = $5;
 $9 = $107;
 $10 = 0;
 while(1) {
  $108 = $10;
  $109 = $11;
  $110 = ($108>>>0)<($109>>>0);
  if (!($110)) {
   break;
  }
  $111 = $8;
  $112 = ((($111)) + 1|0);
  $8 = $112;
  $113 = HEAP8[$111>>0]|0;
  $114 = $113&255;
  $16 = $114;
  $115 = $8;
  $116 = ((($115)) + 1|0);
  $8 = $116;
  $117 = HEAP8[$115>>0]|0;
  $118 = $117&255;
  $17 = $118;
  $119 = $8;
  $120 = ((($119)) + 1|0);
  $8 = $120;
  $121 = HEAP8[$119>>0]|0;
  $122 = $121&255;
  $18 = $122;
  $123 = $8;
  $124 = ((($123)) + 1|0);
  $8 = $124;
  $125 = $16;
  $126 = $125 >> 3;
  $127 = $126 & 31;
  $128 = $127 << 10;
  $129 = $17;
  $130 = $129 >> 3;
  $131 = $130 & 31;
  $132 = $131 << 5;
  $133 = $128 | $132;
  $134 = $18;
  $135 = $134 >> 3;
  $136 = $135 & 31;
  $137 = $133 | $136;
  $19 = $137;
  $138 = $6;
  $139 = $19;
  $140 = (($138) + ($139)|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $9;
  $143 = ((($142)) + 1|0);
  $9 = $143;
  HEAP8[$142>>0] = $141;
  $144 = $10;
  $145 = (($144) + 1)|0;
  $10 = $145;
 }
 $146 = $4;
 $147 = ((($146)) + 8|0);
 HEAP8[$147>>0] = 3;
 $148 = $4;
 $149 = ((($148)) + 10|0);
 HEAP8[$149>>0] = 1;
 $150 = $4;
 $151 = ((($150)) + 9|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = $4;
 $154 = ((($153)) + 11|0);
 HEAP8[$154>>0] = $152;
 $155 = $4;
 $156 = ((($155)) + 11|0);
 $157 = HEAP8[$156>>0]|0;
 $158 = $157&255;
 $159 = ($158|0)>=(8);
 $160 = $11;
 $161 = $4;
 $162 = ((($161)) + 11|0);
 $163 = HEAP8[$162>>0]|0;
 $164 = $163&255;
 if ($159) {
  $165 = $164 >>> 3;
  $166 = Math_imul($160, $165)|0;
  $172 = $166;
 } else {
  $167 = Math_imul($160, $164)|0;
  $168 = (($167) + 7)|0;
  $169 = $168 >>> 3;
  $172 = $169;
 }
 $170 = $4;
 $171 = ((($170)) + 4|0);
 HEAP32[$171>>2] = $172;
 STACKTOP = sp;return;
}
function _png_do_expand_16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(8);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)!=(3);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $3;
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($16) + ($19)|0);
 $4 = $20;
 $21 = $4;
 $22 = $2;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($21) + ($24)|0);
 $5 = $25;
 while(1) {
  $26 = $5;
  $27 = $4;
  $28 = ($26>>>0)>($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $4;
  $30 = ((($29)) + -1|0);
  $4 = $30;
  $31 = HEAP8[$30>>0]|0;
  $32 = $5;
  $33 = ((($32)) + -1|0);
  HEAP8[$33>>0] = $31;
  $34 = $5;
  $35 = ((($34)) + -2|0);
  HEAP8[$35>>0] = $31;
  $36 = $5;
  $37 = ((($36)) + -2|0);
  $5 = $37;
 }
 $38 = $2;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40<<1;
 HEAP32[$39>>2] = $41;
 $42 = $2;
 $43 = ((($42)) + 9|0);
 HEAP8[$43>>0] = 16;
 $44 = $2;
 $45 = ((($44)) + 10|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47<<4;
 $49 = $48&255;
 $50 = $2;
 $51 = ((($50)) + 11|0);
 HEAP8[$51>>0] = $49;
 STACKTOP = sp;return;
}
function _png_do_read_invert_alpha($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = $0;
 $3 = $1;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $4 = $18;
 $19 = $2;
 $20 = ((($19)) + 8|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = ($22|0)==(6);
 $24 = $2;
 if ($23) {
  $25 = ((($24)) + 9|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = ($27|0)==(8);
  $29 = $3;
  $30 = $2;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  if ($28) {
   $5 = $33;
   $34 = $5;
   $6 = $34;
   $7 = 0;
   while(1) {
    $35 = $7;
    $36 = $4;
    $37 = ($35>>>0)<($36>>>0);
    if (!($37)) {
     break;
    }
    $38 = $5;
    $39 = ((($38)) + -1|0);
    $5 = $39;
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = (255 - ($41))|0;
    $43 = $42&255;
    $44 = $6;
    $45 = ((($44)) + -1|0);
    $6 = $45;
    HEAP8[$45>>0] = $43;
    $46 = $5;
    $47 = ((($46)) + -3|0);
    $5 = $47;
    $48 = $5;
    $6 = $48;
    $49 = $7;
    $50 = (($49) + 1)|0;
    $7 = $50;
   }
   STACKTOP = sp;return;
  } else {
   $8 = $33;
   $51 = $8;
   $9 = $51;
   $10 = 0;
   while(1) {
    $52 = $10;
    $53 = $4;
    $54 = ($52>>>0)<($53>>>0);
    if (!($54)) {
     break;
    }
    $55 = $8;
    $56 = ((($55)) + -1|0);
    $8 = $56;
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = (255 - ($58))|0;
    $60 = $59&255;
    $61 = $9;
    $62 = ((($61)) + -1|0);
    $9 = $62;
    HEAP8[$62>>0] = $60;
    $63 = $8;
    $64 = ((($63)) + -1|0);
    $8 = $64;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = (255 - ($66))|0;
    $68 = $67&255;
    $69 = $9;
    $70 = ((($69)) + -1|0);
    $9 = $70;
    HEAP8[$70>>0] = $68;
    $71 = $8;
    $72 = ((($71)) + -6|0);
    $8 = $72;
    $73 = $8;
    $9 = $73;
    $74 = $10;
    $75 = (($74) + 1)|0;
    $10 = $75;
   }
   STACKTOP = sp;return;
  }
 }
 $76 = ((($24)) + 8|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = ($78|0)==(4);
 if (!($79)) {
  STACKTOP = sp;return;
 }
 $80 = $2;
 $81 = ((($80)) + 9|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = ($83|0)==(8);
 $85 = $3;
 $86 = $2;
 $87 = ((($86)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($85) + ($88)|0);
 if ($84) {
  $11 = $89;
  $90 = $11;
  $12 = $90;
  $13 = 0;
  while(1) {
   $91 = $13;
   $92 = $4;
   $93 = ($91>>>0)<($92>>>0);
   if (!($93)) {
    break;
   }
   $94 = $11;
   $95 = ((($94)) + -1|0);
   $11 = $95;
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = (255 - ($97))|0;
   $99 = $98&255;
   $100 = $12;
   $101 = ((($100)) + -1|0);
   $12 = $101;
   HEAP8[$101>>0] = $99;
   $102 = $11;
   $103 = ((($102)) + -1|0);
   $11 = $103;
   $104 = HEAP8[$103>>0]|0;
   $105 = $12;
   $106 = ((($105)) + -1|0);
   $12 = $106;
   HEAP8[$106>>0] = $104;
   $107 = $13;
   $108 = (($107) + 1)|0;
   $13 = $108;
  }
  STACKTOP = sp;return;
 } else {
  $14 = $89;
  $109 = $14;
  $15 = $109;
  $16 = 0;
  while(1) {
   $110 = $16;
   $111 = $4;
   $112 = ($110>>>0)<($111>>>0);
   if (!($112)) {
    break;
   }
   $113 = $14;
   $114 = ((($113)) + -1|0);
   $14 = $114;
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&255;
   $117 = (255 - ($116))|0;
   $118 = $117&255;
   $119 = $15;
   $120 = ((($119)) + -1|0);
   $15 = $120;
   HEAP8[$120>>0] = $118;
   $121 = $14;
   $122 = ((($121)) + -1|0);
   $14 = $122;
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = (255 - ($124))|0;
   $126 = $125&255;
   $127 = $15;
   $128 = ((($127)) + -1|0);
   $15 = $128;
   HEAP8[$128>>0] = $126;
   $129 = $14;
   $130 = ((($129)) + -2|0);
   $14 = $130;
   $131 = $14;
   $15 = $131;
   $132 = $16;
   $133 = (($132) + 1)|0;
   $16 = $133;
  }
  STACKTOP = sp;return;
 }
}
function _png_do_unshift($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$3 = 0, $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 80|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $6 = $31;
 $32 = $6;
 $33 = ($32|0)!=(3);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $8 = 0;
 $34 = $3;
 $35 = ((($34)) + 9|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $9 = $37;
 $38 = $6;
 $39 = $38 & 2;
 $40 = ($39|0)!=(0);
 $41 = $9;
 $42 = $5;
 if ($40) {
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (($41) - ($44))|0;
  $46 = $8;
  $47 = (($46) + 1)|0;
  $8 = $47;
  $48 = (($7) + ($46<<2)|0);
  HEAP32[$48>>2] = $45;
  $49 = $9;
  $50 = $5;
  $51 = ((($50)) + 1|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = (($49) - ($53))|0;
  $55 = $8;
  $56 = (($55) + 1)|0;
  $8 = $56;
  $57 = (($7) + ($55<<2)|0);
  HEAP32[$57>>2] = $54;
  $58 = $9;
  $59 = $5;
  $60 = ((($59)) + 2|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (($58) - ($62))|0;
  $64 = $8;
  $65 = (($64) + 1)|0;
  $8 = $65;
  $$sink = $63;$$sink2 = $64;
 } else {
  $66 = ((($42)) + 3|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = (($41) - ($68))|0;
  $70 = $8;
  $71 = (($70) + 1)|0;
  $8 = $71;
  $$sink = $69;$$sink2 = $70;
 }
 $72 = (($7) + ($$sink2<<2)|0);
 HEAP32[$72>>2] = $$sink;
 $73 = $6;
 $74 = $73 & 4;
 $75 = ($74|0)!=(0);
 if ($75) {
  $76 = $9;
  $77 = $5;
  $78 = ((($77)) + 4|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = (($76) - ($80))|0;
  $82 = $8;
  $83 = (($82) + 1)|0;
  $8 = $83;
  $84 = (($7) + ($82<<2)|0);
  HEAP32[$84>>2] = $81;
 }
 $11 = 0;
 $10 = 0;
 while(1) {
  $85 = $10;
  $86 = $8;
  $87 = ($85|0)<($86|0);
  if (!($87)) {
   break;
  }
  $88 = $10;
  $89 = (($7) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)<=(0);
  if ($91) {
   label = 11;
  } else {
   $92 = $10;
   $93 = (($7) + ($92<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $9;
   $96 = ($94|0)>=($95|0);
   if ($96) {
    label = 11;
   } else {
    $11 = 1;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $97 = $10;
   $98 = (($7) + ($97<<2)|0);
   HEAP32[$98>>2] = 0;
  }
  $99 = $10;
  $100 = (($99) + 1)|0;
  $10 = $100;
 }
 $101 = $11;
 $102 = ($101|0)==(0);
 if ($102) {
  STACKTOP = sp;return;
 }
 $103 = $9;
 $104 = (($103) - 2)|0;
 $105 = $104 >>> 1;
 $106 = $104 << 31;
 $107 = $105 | $106;
 switch ($107|0) {
 case 0:  {
  $108 = $4;
  $12 = $108;
  $109 = $12;
  $110 = $3;
  $111 = ((($110)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($109) + ($112)|0);
  $13 = $113;
  while(1) {
   $114 = $12;
   $115 = $13;
   $116 = ($114>>>0)<($115>>>0);
   if (!($116)) {
    break;
   }
   $117 = $12;
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = $119 >> 1;
   $121 = $120 & 85;
   $14 = $121;
   $122 = $14;
   $123 = $122&255;
   $124 = $12;
   $125 = ((($124)) + 1|0);
   $12 = $125;
   HEAP8[$124>>0] = $123;
  }
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $126 = $4;
  $15 = $126;
  $127 = $15;
  $128 = $3;
  $129 = ((($128)) + 4|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($127) + ($130)|0);
  $16 = $131;
  $132 = HEAP32[$7>>2]|0;
  $17 = $132;
  $133 = $17;
  $134 = 15 >> $133;
  $18 = $134;
  $135 = $18;
  $136 = $135 << 4;
  $137 = $18;
  $138 = $137 | $136;
  $18 = $138;
  while(1) {
   $139 = $15;
   $140 = $16;
   $141 = ($139>>>0)<($140>>>0);
   if (!($141)) {
    break;
   }
   $142 = $15;
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = $17;
   $146 = $144 >> $145;
   $147 = $18;
   $148 = $146 & $147;
   $19 = $148;
   $149 = $19;
   $150 = $149&255;
   $151 = $15;
   $152 = ((($151)) + 1|0);
   $15 = $152;
   HEAP8[$151>>0] = $150;
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $153 = $4;
  $20 = $153;
  $154 = $20;
  $155 = $3;
  $156 = ((($155)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($154) + ($157)|0);
  $21 = $158;
  $22 = 0;
  while(1) {
   $159 = $20;
   $160 = $21;
   $161 = ($159>>>0)<($160>>>0);
   if (!($161)) {
    break;
   }
   $162 = $20;
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = $22;
   $166 = (($7) + ($165<<2)|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $164 >> $167;
   $23 = $168;
   $169 = $22;
   $170 = (($169) + 1)|0;
   $22 = $170;
   $171 = $8;
   $172 = ($170|0)>=($171|0);
   $$ = $172 ? 0 : $170;
   $22 = $$;
   $173 = $23;
   $174 = $173&255;
   $175 = $20;
   $176 = ((($175)) + 1|0);
   $20 = $176;
   HEAP8[$175>>0] = $174;
  }
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $177 = $4;
  $24 = $177;
  $178 = $24;
  $179 = $3;
  $180 = ((($179)) + 4|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($178) + ($181)|0);
  $25 = $182;
  $26 = 0;
  while(1) {
   $183 = $24;
   $184 = $25;
   $185 = ($183>>>0)<($184>>>0);
   if (!($185)) {
    break;
   }
   $186 = $24;
   $187 = HEAP8[$186>>0]|0;
   $188 = $187&255;
   $189 = $188 << 8;
   $190 = $24;
   $191 = ((($190)) + 1|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = (($189) + ($193))|0;
   $27 = $194;
   $195 = $26;
   $196 = (($7) + ($195<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $27;
   $199 = $198 >> $197;
   $27 = $199;
   $200 = $26;
   $201 = (($200) + 1)|0;
   $26 = $201;
   $202 = $8;
   $203 = ($201|0)>=($202|0);
   $$3 = $203 ? 0 : $201;
   $26 = $$3;
   $204 = $27;
   $205 = $204 >> 8;
   $206 = $205&255;
   $207 = $24;
   $208 = ((($207)) + 1|0);
   $24 = $208;
   HEAP8[$207>>0] = $206;
   $209 = $27;
   $210 = $209&255;
   $211 = $24;
   $212 = ((($211)) + 1|0);
   $24 = $212;
   HEAP8[$211>>0] = $210;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _png_do_unpack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = $0;
 $3 = $1;
 $15 = $2;
 $16 = ((($15)) + 9|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)<(8);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $5 = $21;
 $22 = $2;
 $23 = ((($22)) + 9|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 L4: do {
  switch ($25|0) {
  case 1:  {
   $26 = $3;
   $27 = $5;
   $28 = (($27) - 1)|0;
   $29 = $28 >>> 3;
   $30 = (($26) + ($29)|0);
   $6 = $30;
   $31 = $3;
   $32 = $5;
   $33 = (($31) + ($32)|0);
   $34 = ((($33)) + -1|0);
   $7 = $34;
   $35 = $5;
   $36 = (($35) + 7)|0;
   $37 = $36 & 7;
   $38 = (7 - ($37))|0;
   $8 = $38;
   $4 = 0;
   while(1) {
    $39 = $4;
    $40 = $5;
    $41 = ($39>>>0)<($40>>>0);
    if (!($41)) {
     break L4;
    }
    $42 = $6;
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = $8;
    $46 = $44 >> $45;
    $47 = $46 & 1;
    $48 = $47&255;
    $49 = $7;
    HEAP8[$49>>0] = $48;
    $50 = $8;
    $51 = ($50|0)==(7);
    if ($51) {
     $8 = 0;
     $52 = $6;
     $53 = ((($52)) + -1|0);
     $6 = $53;
    } else {
     $54 = $8;
     $55 = (($54) + 1)|0;
     $8 = $55;
    }
    $56 = $7;
    $57 = ((($56)) + -1|0);
    $7 = $57;
    $58 = $4;
    $59 = (($58) + 1)|0;
    $4 = $59;
   }
   break;
  }
  case 2:  {
   $60 = $3;
   $61 = $5;
   $62 = (($61) - 1)|0;
   $63 = $62 >>> 2;
   $64 = (($60) + ($63)|0);
   $9 = $64;
   $65 = $3;
   $66 = $5;
   $67 = (($65) + ($66)|0);
   $68 = ((($67)) + -1|0);
   $10 = $68;
   $69 = $5;
   $70 = (($69) + 3)|0;
   $71 = $70 & 3;
   $72 = (3 - ($71))|0;
   $73 = $72 << 1;
   $11 = $73;
   $4 = 0;
   while(1) {
    $74 = $4;
    $75 = $5;
    $76 = ($74>>>0)<($75>>>0);
    if (!($76)) {
     break L4;
    }
    $77 = $9;
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = $11;
    $81 = $79 >> $80;
    $82 = $81 & 3;
    $83 = $82&255;
    $84 = $10;
    HEAP8[$84>>0] = $83;
    $85 = $11;
    $86 = ($85|0)==(6);
    if ($86) {
     $11 = 0;
     $87 = $9;
     $88 = ((($87)) + -1|0);
     $9 = $88;
    } else {
     $89 = $11;
     $90 = (($89) + 2)|0;
     $11 = $90;
    }
    $91 = $10;
    $92 = ((($91)) + -1|0);
    $10 = $92;
    $93 = $4;
    $94 = (($93) + 1)|0;
    $4 = $94;
   }
   break;
  }
  case 4:  {
   $95 = $3;
   $96 = $5;
   $97 = (($96) - 1)|0;
   $98 = $97 >>> 1;
   $99 = (($95) + ($98)|0);
   $12 = $99;
   $100 = $3;
   $101 = $5;
   $102 = (($100) + ($101)|0);
   $103 = ((($102)) + -1|0);
   $13 = $103;
   $104 = $5;
   $105 = (($104) + 1)|0;
   $106 = $105 & 1;
   $107 = (1 - ($106))|0;
   $108 = $107 << 2;
   $14 = $108;
   $4 = 0;
   while(1) {
    $109 = $4;
    $110 = $5;
    $111 = ($109>>>0)<($110>>>0);
    if (!($111)) {
     break L4;
    }
    $112 = $12;
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = $14;
    $116 = $114 >> $115;
    $117 = $116 & 15;
    $118 = $117&255;
    $119 = $13;
    HEAP8[$119>>0] = $118;
    $120 = $14;
    $121 = ($120|0)==(4);
    if ($121) {
     $14 = 0;
     $122 = $12;
     $123 = ((($122)) + -1|0);
     $12 = $123;
    } else {
     $14 = 4;
    }
    $124 = $13;
    $125 = ((($124)) + -1|0);
    $13 = $125;
    $126 = $4;
    $127 = (($126) + 1)|0;
    $4 = $127;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $128 = $2;
 $129 = ((($128)) + 9|0);
 HEAP8[$129>>0] = 8;
 $130 = $2;
 $131 = ((($130)) + 10|0);
 $132 = HEAP8[$131>>0]|0;
 $133 = $132&255;
 $134 = $133<<3;
 $135 = $134&255;
 $136 = $2;
 $137 = ((($136)) + 11|0);
 HEAP8[$137>>0] = $135;
 $138 = $5;
 $139 = $2;
 $140 = ((($139)) + 10|0);
 $141 = HEAP8[$140>>0]|0;
 $142 = $141&255;
 $143 = Math_imul($138, $142)|0;
 $144 = $2;
 $145 = ((($144)) + 4|0);
 HEAP32[$145>>2] = $143;
 STACKTOP = sp;return;
}
function _png_do_read_filler($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink11 = 0, $$sink2 = 0, $$sink3 = 0, $$sink5 = 0, $$sink6 = 0, $$sink8 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $28 = $4;
 $29 = HEAP32[$28>>2]|0;
 $9 = $29;
 $30 = $6;
 $31 = $30 >>> 8;
 $32 = $31&255;
 $10 = $32;
 $33 = $6;
 $34 = $33&255;
 $11 = $34;
 $35 = $4;
 $36 = ((($35)) + 8|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = ($38|0)==(0);
 $40 = $4;
 if ($39) {
  $41 = ((($40)) + 9|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($43|0)==(8);
  if ($44) {
   $45 = $7;
   $46 = $45 & 128;
   $47 = ($46|0)!=(0);
   $48 = $5;
   $49 = $9;
   $50 = (($48) + ($49)|0);
   if ($47) {
    $12 = $50;
    $51 = $12;
    $52 = $9;
    $53 = (($51) + ($52)|0);
    $13 = $53;
    $8 = 1;
    while(1) {
     $54 = $8;
     $55 = $9;
     $56 = ($54>>>0)<($55>>>0);
     $57 = $11;
     $58 = $13;
     $59 = ((($58)) + -1|0);
     $13 = $59;
     HEAP8[$59>>0] = $57;
     if (!($56)) {
      break;
     }
     $60 = $12;
     $61 = ((($60)) + -1|0);
     $12 = $61;
     $62 = HEAP8[$61>>0]|0;
     $63 = $13;
     $64 = ((($63)) + -1|0);
     $13 = $64;
     HEAP8[$64>>0] = $62;
     $65 = $8;
     $66 = (($65) + 1)|0;
     $8 = $66;
    }
    $67 = $4;
    $68 = ((($67)) + 10|0);
    HEAP8[$68>>0] = 2;
    $69 = $4;
    $70 = ((($69)) + 11|0);
    HEAP8[$70>>0] = 16;
    $71 = $9;
    $72 = $71<<1;
    $73 = $4;
    $$sink = $72;$$sink2 = $73;
   } else {
    $14 = $50;
    $74 = $14;
    $75 = $9;
    $76 = (($74) + ($75)|0);
    $15 = $76;
    $8 = 0;
    while(1) {
     $77 = $8;
     $78 = $9;
     $79 = ($77>>>0)<($78>>>0);
     if (!($79)) {
      break;
     }
     $80 = $14;
     $81 = ((($80)) + -1|0);
     $14 = $81;
     $82 = HEAP8[$81>>0]|0;
     $83 = $15;
     $84 = ((($83)) + -1|0);
     $15 = $84;
     HEAP8[$84>>0] = $82;
     $85 = $11;
     $86 = $15;
     $87 = ((($86)) + -1|0);
     $15 = $87;
     HEAP8[$87>>0] = $85;
     $88 = $8;
     $89 = (($88) + 1)|0;
     $8 = $89;
    }
    $90 = $4;
    $91 = ((($90)) + 10|0);
    HEAP8[$91>>0] = 2;
    $92 = $4;
    $93 = ((($92)) + 11|0);
    HEAP8[$93>>0] = 16;
    $94 = $9;
    $95 = $94<<1;
    $96 = $4;
    $$sink = $95;$$sink2 = $96;
   }
   $97 = ((($$sink2)) + 4|0);
   HEAP32[$97>>2] = $$sink;
   STACKTOP = sp;return;
  }
  $98 = $4;
  $99 = ((($98)) + 9|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = ($101|0)==(16);
  if (!($102)) {
   STACKTOP = sp;return;
  }
  $103 = $7;
  $104 = $103 & 128;
  $105 = ($104|0)!=(0);
  $106 = $5;
  $107 = $9;
  $108 = $107<<1;
  $109 = (($106) + ($108)|0);
  if ($105) {
   $16 = $109;
   $110 = $16;
   $111 = $9;
   $112 = $111<<1;
   $113 = (($110) + ($112)|0);
   $17 = $113;
   $8 = 1;
   while(1) {
    $114 = $8;
    $115 = $9;
    $116 = ($114>>>0)<($115>>>0);
    $117 = $11;
    $118 = $17;
    $119 = ((($118)) + -1|0);
    $17 = $119;
    HEAP8[$119>>0] = $117;
    $120 = $10;
    $121 = $17;
    $122 = ((($121)) + -1|0);
    $17 = $122;
    HEAP8[$122>>0] = $120;
    if (!($116)) {
     break;
    }
    $123 = $16;
    $124 = ((($123)) + -1|0);
    $16 = $124;
    $125 = HEAP8[$124>>0]|0;
    $126 = $17;
    $127 = ((($126)) + -1|0);
    $17 = $127;
    HEAP8[$127>>0] = $125;
    $128 = $16;
    $129 = ((($128)) + -1|0);
    $16 = $129;
    $130 = HEAP8[$129>>0]|0;
    $131 = $17;
    $132 = ((($131)) + -1|0);
    $17 = $132;
    HEAP8[$132>>0] = $130;
    $133 = $8;
    $134 = (($133) + 1)|0;
    $8 = $134;
   }
   $135 = $4;
   $136 = ((($135)) + 10|0);
   HEAP8[$136>>0] = 2;
   $137 = $4;
   $138 = ((($137)) + 11|0);
   HEAP8[$138>>0] = 32;
   $139 = $9;
   $140 = $139<<2;
   $141 = $4;
   $$sink3 = $140;$$sink5 = $141;
  } else {
   $18 = $109;
   $142 = $18;
   $143 = $9;
   $144 = $143<<1;
   $145 = (($142) + ($144)|0);
   $19 = $145;
   $8 = 0;
   while(1) {
    $146 = $8;
    $147 = $9;
    $148 = ($146>>>0)<($147>>>0);
    if (!($148)) {
     break;
    }
    $149 = $18;
    $150 = ((($149)) + -1|0);
    $18 = $150;
    $151 = HEAP8[$150>>0]|0;
    $152 = $19;
    $153 = ((($152)) + -1|0);
    $19 = $153;
    HEAP8[$153>>0] = $151;
    $154 = $18;
    $155 = ((($154)) + -1|0);
    $18 = $155;
    $156 = HEAP8[$155>>0]|0;
    $157 = $19;
    $158 = ((($157)) + -1|0);
    $19 = $158;
    HEAP8[$158>>0] = $156;
    $159 = $11;
    $160 = $19;
    $161 = ((($160)) + -1|0);
    $19 = $161;
    HEAP8[$161>>0] = $159;
    $162 = $10;
    $163 = $19;
    $164 = ((($163)) + -1|0);
    $19 = $164;
    HEAP8[$164>>0] = $162;
    $165 = $8;
    $166 = (($165) + 1)|0;
    $8 = $166;
   }
   $167 = $4;
   $168 = ((($167)) + 10|0);
   HEAP8[$168>>0] = 2;
   $169 = $4;
   $170 = ((($169)) + 11|0);
   HEAP8[$170>>0] = 32;
   $171 = $9;
   $172 = $171<<2;
   $173 = $4;
   $$sink3 = $172;$$sink5 = $173;
  }
  $174 = ((($$sink5)) + 4|0);
  HEAP32[$174>>2] = $$sink3;
  STACKTOP = sp;return;
 }
 $175 = ((($40)) + 8|0);
 $176 = HEAP8[$175>>0]|0;
 $177 = $176&255;
 $178 = ($177|0)==(2);
 if (!($178)) {
  STACKTOP = sp;return;
 }
 $179 = $4;
 $180 = ((($179)) + 9|0);
 $181 = HEAP8[$180>>0]|0;
 $182 = $181&255;
 $183 = ($182|0)==(8);
 if ($183) {
  $184 = $7;
  $185 = $184 & 128;
  $186 = ($185|0)!=(0);
  $187 = $5;
  $188 = $9;
  $189 = ($188*3)|0;
  $190 = (($187) + ($189)|0);
  if ($186) {
   $20 = $190;
   $191 = $20;
   $192 = $9;
   $193 = (($191) + ($192)|0);
   $21 = $193;
   $8 = 1;
   while(1) {
    $194 = $8;
    $195 = $9;
    $196 = ($194>>>0)<($195>>>0);
    $197 = $11;
    $198 = $21;
    $199 = ((($198)) + -1|0);
    $21 = $199;
    HEAP8[$199>>0] = $197;
    if (!($196)) {
     break;
    }
    $200 = $20;
    $201 = ((($200)) + -1|0);
    $20 = $201;
    $202 = HEAP8[$201>>0]|0;
    $203 = $21;
    $204 = ((($203)) + -1|0);
    $21 = $204;
    HEAP8[$204>>0] = $202;
    $205 = $20;
    $206 = ((($205)) + -1|0);
    $20 = $206;
    $207 = HEAP8[$206>>0]|0;
    $208 = $21;
    $209 = ((($208)) + -1|0);
    $21 = $209;
    HEAP8[$209>>0] = $207;
    $210 = $20;
    $211 = ((($210)) + -1|0);
    $20 = $211;
    $212 = HEAP8[$211>>0]|0;
    $213 = $21;
    $214 = ((($213)) + -1|0);
    $21 = $214;
    HEAP8[$214>>0] = $212;
    $215 = $8;
    $216 = (($215) + 1)|0;
    $8 = $216;
   }
   $217 = $4;
   $218 = ((($217)) + 10|0);
   HEAP8[$218>>0] = 4;
   $219 = $4;
   $220 = ((($219)) + 11|0);
   HEAP8[$220>>0] = 32;
   $221 = $9;
   $222 = $221<<2;
   $223 = $4;
   $$sink6 = $222;$$sink8 = $223;
  } else {
   $22 = $190;
   $224 = $22;
   $225 = $9;
   $226 = (($224) + ($225)|0);
   $23 = $226;
   $8 = 0;
   while(1) {
    $227 = $8;
    $228 = $9;
    $229 = ($227>>>0)<($228>>>0);
    if (!($229)) {
     break;
    }
    $230 = $22;
    $231 = ((($230)) + -1|0);
    $22 = $231;
    $232 = HEAP8[$231>>0]|0;
    $233 = $23;
    $234 = ((($233)) + -1|0);
    $23 = $234;
    HEAP8[$234>>0] = $232;
    $235 = $22;
    $236 = ((($235)) + -1|0);
    $22 = $236;
    $237 = HEAP8[$236>>0]|0;
    $238 = $23;
    $239 = ((($238)) + -1|0);
    $23 = $239;
    HEAP8[$239>>0] = $237;
    $240 = $22;
    $241 = ((($240)) + -1|0);
    $22 = $241;
    $242 = HEAP8[$241>>0]|0;
    $243 = $23;
    $244 = ((($243)) + -1|0);
    $23 = $244;
    HEAP8[$244>>0] = $242;
    $245 = $11;
    $246 = $23;
    $247 = ((($246)) + -1|0);
    $23 = $247;
    HEAP8[$247>>0] = $245;
    $248 = $8;
    $249 = (($248) + 1)|0;
    $8 = $249;
   }
   $250 = $4;
   $251 = ((($250)) + 10|0);
   HEAP8[$251>>0] = 4;
   $252 = $4;
   $253 = ((($252)) + 11|0);
   HEAP8[$253>>0] = 32;
   $254 = $9;
   $255 = $254<<2;
   $256 = $4;
   $$sink6 = $255;$$sink8 = $256;
  }
  $257 = ((($$sink8)) + 4|0);
  HEAP32[$257>>2] = $$sink6;
  STACKTOP = sp;return;
 }
 $258 = $4;
 $259 = ((($258)) + 9|0);
 $260 = HEAP8[$259>>0]|0;
 $261 = $260&255;
 $262 = ($261|0)==(16);
 if (!($262)) {
  STACKTOP = sp;return;
 }
 $263 = $7;
 $264 = $263 & 128;
 $265 = ($264|0)!=(0);
 $266 = $5;
 $267 = $9;
 $268 = ($267*6)|0;
 $269 = (($266) + ($268)|0);
 if ($265) {
  $24 = $269;
  $270 = $24;
  $271 = $9;
  $272 = $271<<1;
  $273 = (($270) + ($272)|0);
  $25 = $273;
  $8 = 1;
  while(1) {
   $274 = $8;
   $275 = $9;
   $276 = ($274>>>0)<($275>>>0);
   $277 = $11;
   $278 = $25;
   $279 = ((($278)) + -1|0);
   $25 = $279;
   HEAP8[$279>>0] = $277;
   $280 = $10;
   $281 = $25;
   $282 = ((($281)) + -1|0);
   $25 = $282;
   HEAP8[$282>>0] = $280;
   if (!($276)) {
    break;
   }
   $283 = $24;
   $284 = ((($283)) + -1|0);
   $24 = $284;
   $285 = HEAP8[$284>>0]|0;
   $286 = $25;
   $287 = ((($286)) + -1|0);
   $25 = $287;
   HEAP8[$287>>0] = $285;
   $288 = $24;
   $289 = ((($288)) + -1|0);
   $24 = $289;
   $290 = HEAP8[$289>>0]|0;
   $291 = $25;
   $292 = ((($291)) + -1|0);
   $25 = $292;
   HEAP8[$292>>0] = $290;
   $293 = $24;
   $294 = ((($293)) + -1|0);
   $24 = $294;
   $295 = HEAP8[$294>>0]|0;
   $296 = $25;
   $297 = ((($296)) + -1|0);
   $25 = $297;
   HEAP8[$297>>0] = $295;
   $298 = $24;
   $299 = ((($298)) + -1|0);
   $24 = $299;
   $300 = HEAP8[$299>>0]|0;
   $301 = $25;
   $302 = ((($301)) + -1|0);
   $25 = $302;
   HEAP8[$302>>0] = $300;
   $303 = $24;
   $304 = ((($303)) + -1|0);
   $24 = $304;
   $305 = HEAP8[$304>>0]|0;
   $306 = $25;
   $307 = ((($306)) + -1|0);
   $25 = $307;
   HEAP8[$307>>0] = $305;
   $308 = $24;
   $309 = ((($308)) + -1|0);
   $24 = $309;
   $310 = HEAP8[$309>>0]|0;
   $311 = $25;
   $312 = ((($311)) + -1|0);
   $25 = $312;
   HEAP8[$312>>0] = $310;
   $313 = $8;
   $314 = (($313) + 1)|0;
   $8 = $314;
  }
  $315 = $4;
  $316 = ((($315)) + 10|0);
  HEAP8[$316>>0] = 4;
  $317 = $4;
  $318 = ((($317)) + 11|0);
  HEAP8[$318>>0] = 64;
  $319 = $9;
  $320 = $319<<3;
  $321 = $4;
  $$sink11 = $321;$$sink9 = $320;
 } else {
  $26 = $269;
  $322 = $26;
  $323 = $9;
  $324 = $323<<1;
  $325 = (($322) + ($324)|0);
  $27 = $325;
  $8 = 0;
  while(1) {
   $326 = $8;
   $327 = $9;
   $328 = ($326>>>0)<($327>>>0);
   if (!($328)) {
    break;
   }
   $329 = $26;
   $330 = ((($329)) + -1|0);
   $26 = $330;
   $331 = HEAP8[$330>>0]|0;
   $332 = $27;
   $333 = ((($332)) + -1|0);
   $27 = $333;
   HEAP8[$333>>0] = $331;
   $334 = $26;
   $335 = ((($334)) + -1|0);
   $26 = $335;
   $336 = HEAP8[$335>>0]|0;
   $337 = $27;
   $338 = ((($337)) + -1|0);
   $27 = $338;
   HEAP8[$338>>0] = $336;
   $339 = $26;
   $340 = ((($339)) + -1|0);
   $26 = $340;
   $341 = HEAP8[$340>>0]|0;
   $342 = $27;
   $343 = ((($342)) + -1|0);
   $27 = $343;
   HEAP8[$343>>0] = $341;
   $344 = $26;
   $345 = ((($344)) + -1|0);
   $26 = $345;
   $346 = HEAP8[$345>>0]|0;
   $347 = $27;
   $348 = ((($347)) + -1|0);
   $27 = $348;
   HEAP8[$348>>0] = $346;
   $349 = $26;
   $350 = ((($349)) + -1|0);
   $26 = $350;
   $351 = HEAP8[$350>>0]|0;
   $352 = $27;
   $353 = ((($352)) + -1|0);
   $27 = $353;
   HEAP8[$353>>0] = $351;
   $354 = $26;
   $355 = ((($354)) + -1|0);
   $26 = $355;
   $356 = HEAP8[$355>>0]|0;
   $357 = $27;
   $358 = ((($357)) + -1|0);
   $27 = $358;
   HEAP8[$358>>0] = $356;
   $359 = $11;
   $360 = $27;
   $361 = ((($360)) + -1|0);
   $27 = $361;
   HEAP8[$361>>0] = $359;
   $362 = $10;
   $363 = $27;
   $364 = ((($363)) + -1|0);
   $27 = $364;
   HEAP8[$364>>0] = $362;
   $365 = $8;
   $366 = (($365) + 1)|0;
   $8 = $366;
  }
  $367 = $4;
  $368 = ((($367)) + 10|0);
  HEAP8[$368>>0] = 4;
  $369 = $4;
  $370 = ((($369)) + 11|0);
  HEAP8[$370>>0] = 64;
  $371 = $9;
  $372 = $371<<3;
  $373 = $4;
  $$sink11 = $373;$$sink9 = $372;
 }
 $374 = ((($$sink11)) + 4|0);
 HEAP32[$374>>2] = $$sink9;
 STACKTOP = sp;return;
}
function _png_do_read_swap_alpha($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = sp + 64|0;
 $19 = sp + 60|0;
 $2 = $0;
 $3 = $1;
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $4 = $22;
 $23 = $2;
 $24 = ((($23)) + 8|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)==(6);
 $28 = $2;
 if ($27) {
  $29 = ((($28)) + 9|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)==(8);
  $33 = $3;
  $34 = $2;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($33) + ($36)|0);
  if ($32) {
   $5 = $37;
   $38 = $5;
   $6 = $38;
   $8 = 0;
   while(1) {
    $39 = $8;
    $40 = $4;
    $41 = ($39>>>0)<($40>>>0);
    if (!($41)) {
     break;
    }
    $42 = $5;
    $43 = ((($42)) + -1|0);
    $5 = $43;
    $44 = HEAP8[$43>>0]|0;
    $7 = $44;
    $45 = $5;
    $46 = ((($45)) + -1|0);
    $5 = $46;
    $47 = HEAP8[$46>>0]|0;
    $48 = $6;
    $49 = ((($48)) + -1|0);
    $6 = $49;
    HEAP8[$49>>0] = $47;
    $50 = $5;
    $51 = ((($50)) + -1|0);
    $5 = $51;
    $52 = HEAP8[$51>>0]|0;
    $53 = $6;
    $54 = ((($53)) + -1|0);
    $6 = $54;
    HEAP8[$54>>0] = $52;
    $55 = $5;
    $56 = ((($55)) + -1|0);
    $5 = $56;
    $57 = HEAP8[$56>>0]|0;
    $58 = $6;
    $59 = ((($58)) + -1|0);
    $6 = $59;
    HEAP8[$59>>0] = $57;
    $60 = $7;
    $61 = $6;
    $62 = ((($61)) + -1|0);
    $6 = $62;
    HEAP8[$62>>0] = $60;
    $63 = $8;
    $64 = (($63) + 1)|0;
    $8 = $64;
   }
   STACKTOP = sp;return;
  } else {
   $9 = $37;
   $65 = $9;
   $10 = $65;
   $12 = 0;
   while(1) {
    $66 = $12;
    $67 = $4;
    $68 = ($66>>>0)<($67>>>0);
    if (!($68)) {
     break;
    }
    $69 = $9;
    $70 = ((($69)) + -1|0);
    $9 = $70;
    $71 = HEAP8[$70>>0]|0;
    HEAP8[$11>>0] = $71;
    $72 = $9;
    $73 = ((($72)) + -1|0);
    $9 = $73;
    $74 = HEAP8[$73>>0]|0;
    $75 = ((($11)) + 1|0);
    HEAP8[$75>>0] = $74;
    $76 = $9;
    $77 = ((($76)) + -1|0);
    $9 = $77;
    $78 = HEAP8[$77>>0]|0;
    $79 = $10;
    $80 = ((($79)) + -1|0);
    $10 = $80;
    HEAP8[$80>>0] = $78;
    $81 = $9;
    $82 = ((($81)) + -1|0);
    $9 = $82;
    $83 = HEAP8[$82>>0]|0;
    $84 = $10;
    $85 = ((($84)) + -1|0);
    $10 = $85;
    HEAP8[$85>>0] = $83;
    $86 = $9;
    $87 = ((($86)) + -1|0);
    $9 = $87;
    $88 = HEAP8[$87>>0]|0;
    $89 = $10;
    $90 = ((($89)) + -1|0);
    $10 = $90;
    HEAP8[$90>>0] = $88;
    $91 = $9;
    $92 = ((($91)) + -1|0);
    $9 = $92;
    $93 = HEAP8[$92>>0]|0;
    $94 = $10;
    $95 = ((($94)) + -1|0);
    $10 = $95;
    HEAP8[$95>>0] = $93;
    $96 = $9;
    $97 = ((($96)) + -1|0);
    $9 = $97;
    $98 = HEAP8[$97>>0]|0;
    $99 = $10;
    $100 = ((($99)) + -1|0);
    $10 = $100;
    HEAP8[$100>>0] = $98;
    $101 = $9;
    $102 = ((($101)) + -1|0);
    $9 = $102;
    $103 = HEAP8[$102>>0]|0;
    $104 = $10;
    $105 = ((($104)) + -1|0);
    $10 = $105;
    HEAP8[$105>>0] = $103;
    $106 = HEAP8[$11>>0]|0;
    $107 = $10;
    $108 = ((($107)) + -1|0);
    $10 = $108;
    HEAP8[$108>>0] = $106;
    $109 = ((($11)) + 1|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $10;
    $112 = ((($111)) + -1|0);
    $10 = $112;
    HEAP8[$112>>0] = $110;
    $113 = $12;
    $114 = (($113) + 1)|0;
    $12 = $114;
   }
   STACKTOP = sp;return;
  }
 }
 $115 = ((($28)) + 8|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = ($117|0)==(4);
 if (!($118)) {
  STACKTOP = sp;return;
 }
 $119 = $2;
 $120 = ((($119)) + 9|0);
 $121 = HEAP8[$120>>0]|0;
 $122 = $121&255;
 $123 = ($122|0)==(8);
 $124 = $3;
 $125 = $2;
 $126 = ((($125)) + 4|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($124) + ($127)|0);
 if ($123) {
  $13 = $128;
  $129 = $13;
  $14 = $129;
  $16 = 0;
  while(1) {
   $130 = $16;
   $131 = $4;
   $132 = ($130>>>0)<($131>>>0);
   if (!($132)) {
    break;
   }
   $133 = $13;
   $134 = ((($133)) + -1|0);
   $13 = $134;
   $135 = HEAP8[$134>>0]|0;
   $15 = $135;
   $136 = $13;
   $137 = ((($136)) + -1|0);
   $13 = $137;
   $138 = HEAP8[$137>>0]|0;
   $139 = $14;
   $140 = ((($139)) + -1|0);
   $14 = $140;
   HEAP8[$140>>0] = $138;
   $141 = $15;
   $142 = $14;
   $143 = ((($142)) + -1|0);
   $14 = $143;
   HEAP8[$143>>0] = $141;
   $144 = $16;
   $145 = (($144) + 1)|0;
   $16 = $145;
  }
  STACKTOP = sp;return;
 } else {
  $17 = $128;
  $146 = $17;
  $18 = $146;
  $20 = 0;
  while(1) {
   $147 = $20;
   $148 = $4;
   $149 = ($147>>>0)<($148>>>0);
   if (!($149)) {
    break;
   }
   $150 = $17;
   $151 = ((($150)) + -1|0);
   $17 = $151;
   $152 = HEAP8[$151>>0]|0;
   HEAP8[$19>>0] = $152;
   $153 = $17;
   $154 = ((($153)) + -1|0);
   $17 = $154;
   $155 = HEAP8[$154>>0]|0;
   $156 = ((($19)) + 1|0);
   HEAP8[$156>>0] = $155;
   $157 = $17;
   $158 = ((($157)) + -1|0);
   $17 = $158;
   $159 = HEAP8[$158>>0]|0;
   $160 = $18;
   $161 = ((($160)) + -1|0);
   $18 = $161;
   HEAP8[$161>>0] = $159;
   $162 = $17;
   $163 = ((($162)) + -1|0);
   $17 = $163;
   $164 = HEAP8[$163>>0]|0;
   $165 = $18;
   $166 = ((($165)) + -1|0);
   $18 = $166;
   HEAP8[$166>>0] = $164;
   $167 = HEAP8[$19>>0]|0;
   $168 = $18;
   $169 = ((($168)) + -1|0);
   $18 = $169;
   HEAP8[$169>>0] = $167;
   $170 = ((($19)) + 1|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $18;
   $173 = ((($172)) + -1|0);
   $18 = $173;
   HEAP8[$173>>0] = $171;
   $174 = $20;
   $175 = (($174) + 1)|0;
   $20 = $175;
  }
  STACKTOP = sp;return;
 }
}
function _png_get_uint_31($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 24;
 $9 = $3;
 $10 = ((($9)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 16;
 $14 = (($8) + ($13))|0;
 $15 = $3;
 $16 = ((($15)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 8;
 $20 = (($14) + ($19))|0;
 $21 = $3;
 $22 = ((($21)) + 3|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($20) + ($24))|0;
 $4 = $25;
 $26 = $4;
 $27 = ($26>>>0)>(2147483647);
 if ($27) {
  $28 = $2;
  _png_error($28,15413);
  // unreachable;
 } else {
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _png_read_sig($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 433|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>=(8);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = ((($11)) + 433|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $4 = $14;
 $15 = $4;
 $16 = (8 - ($15))|0;
 $5 = $16;
 $17 = $2;
 $18 = ((($17)) + 768|0);
 HEAP32[$18>>2] = 17;
 $19 = $2;
 $20 = $3;
 $21 = ((($20)) + 32|0);
 $22 = $4;
 $23 = (($21) + ($22)|0);
 $24 = $5;
 _png_read_data($19,$23,$24);
 $25 = $2;
 $26 = ((($25)) + 433|0);
 HEAP8[$26>>0] = 8;
 $27 = $3;
 $28 = ((($27)) + 32|0);
 $29 = $4;
 $30 = $5;
 $31 = (_png_sig_cmp($28,$29,$30)|0);
 $32 = ($31|0)!=(0);
 $33 = $4;
 if (!($32)) {
  $44 = ($33>>>0)<(3);
  if (!($44)) {
   STACKTOP = sp;return;
  }
  $45 = $2;
  $46 = ((($45)) + 208|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47 | 4096;
  HEAP32[$46>>2] = $48;
  STACKTOP = sp;return;
 }
 $34 = ($33>>>0)<(4);
 if (!($34)) {
  $43 = $2;
  _png_error($43,15462);
  // unreachable;
 }
 $35 = $3;
 $36 = ((($35)) + 32|0);
 $37 = $4;
 $38 = $5;
 $39 = (($38) - 4)|0;
 $40 = (_png_sig_cmp($36,$37,$39)|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $2;
  _png_error($42,15447);
  // unreachable;
 } else {
  $43 = $2;
  _png_error($43,15462);
  // unreachable;
 }
}
function _png_read_chunk_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 768|0);
 HEAP32[$5>>2] = 33;
 $6 = $1;
 _png_read_data($6,$2,8);
 $7 = $1;
 $8 = (_png_get_uint_31($7,$2)|0);
 $3 = $8;
 $9 = ((($2)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = 255 & $11;
 $13 = $12 << 24;
 $14 = ((($2)) + 4|0);
 $15 = ((($14)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = 255 & $17;
 $19 = $18 << 16;
 $20 = $13 | $19;
 $21 = ((($2)) + 4|0);
 $22 = ((($21)) + 2|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = 255 & $24;
 $26 = $25 << 8;
 $27 = $20 | $26;
 $28 = ((($2)) + 4|0);
 $29 = ((($28)) + 3|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = 255 & $31;
 $33 = $32 << 0;
 $34 = $27 | $33;
 $35 = $1;
 $36 = ((($35)) + 376|0);
 HEAP32[$36>>2] = $34;
 $37 = $1;
 _png_reset_crc($37);
 $38 = $1;
 $39 = ((($2)) + 4|0);
 _png_calculate_crc($38,$39,4);
 $40 = $1;
 $41 = $1;
 $42 = ((($41)) + 376|0);
 $43 = HEAP32[$42>>2]|0;
 _png_check_chunk_name($40,$43);
 $44 = $1;
 $45 = ((($44)) + 768|0);
 HEAP32[$45>>2] = 65;
 $46 = $3;
 STACKTOP = sp;return ($46|0);
}
function _png_check_chunk_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 while(1) {
  $6 = $4;
  $7 = ($6|0)<=(4);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = $3;
  $9 = $8 & 255;
  $5 = $9;
  $10 = $5;
  $11 = ($10|0)<(65);
  $12 = $5;
  $13 = ($12|0)>(122);
  $or$cond = $11 | $13;
  if ($or$cond) {
   label = 5;
   break;
  }
  $14 = $5;
  $15 = ($14|0)>(90);
  $16 = $5;
  $17 = ($16|0)<(97);
  $or$cond3 = $15 & $17;
  if ($or$cond3) {
   label = 5;
   break;
  }
  $19 = $3;
  $20 = $19 >>> 8;
  $3 = $20;
  $21 = $4;
  $22 = (($21) + 1)|0;
  $4 = $22;
 }
 if ((label|0) == 5) {
  $18 = $2;
  _png_chunk_error($18,15501);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _png_crc_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _png_read_data($8,$9,$10);
 $11 = $3;
 $12 = $4;
 $13 = $5;
 _png_calculate_crc($11,$12,$13);
 STACKTOP = sp;return;
}
function _png_crc_finish($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 while(1) {
  $7 = $4;
  $8 = ($7>>>0)>(0);
  if (!($8)) {
   break;
  }
  $5 = 1024;
  $9 = $5;
  $10 = $4;
  $11 = ($9>>>0)>($10>>>0);
  if ($11) {
   $12 = $4;
   $5 = $12;
  }
  $13 = $5;
  $14 = $4;
  $15 = (($14) - ($13))|0;
  $4 = $15;
  $16 = $3;
  $17 = $5;
  _png_crc_read($16,$6,$17);
 }
 $18 = $3;
 $19 = (_png_crc_error($18)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $2 = 0;
  $36 = $2;
  STACKTOP = sp;return ($36|0);
 }
 $21 = $3;
 $22 = ((($21)) + 376|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 29;
 $25 = 1 & $24;
 $26 = ($25|0)!=(0);
 $27 = $3;
 $28 = ((($27)) + 212|0);
 $29 = HEAP32[$28>>2]|0;
 if ($26) {
  $30 = $29 & 512;
  $31 = ($30|0)==(0);
  if (!($31)) {
   $35 = $3;
   _png_chunk_error($35,15520);
   // unreachable;
  }
 } else {
  $32 = $29 & 1024;
  $33 = ($32|0)!=(0);
  if (!($33)) {
   $35 = $3;
   _png_chunk_error($35,15520);
   // unreachable;
  }
 }
 $34 = $3;
 _png_chunk_warning($34,15520);
 $2 = 1;
 $36 = $2;
 STACKTOP = sp;return ($36|0);
}
function _png_crc_error($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $2 = $0;
 $5 = 1;
 $6 = $2;
 $7 = ((($6)) + 376|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 29;
 $10 = 1 & $9;
 $11 = ($10|0)!=(0);
 $12 = $2;
 $13 = ((($12)) + 212|0);
 $14 = HEAP32[$13>>2]|0;
 if ($11) {
  $15 = $14 & 768;
  $16 = ($15|0)==(768);
  if ($16) {
   $5 = 0;
  }
 } else {
  $17 = $14 & 2048;
  $18 = ($17|0)!=(0);
  if ($18) {
   $5 = 0;
  }
 }
 $19 = $2;
 $20 = ((($19)) + 768|0);
 HEAP32[$20>>2] = 129;
 $21 = $2;
 _png_read_data($21,$3,4);
 $22 = $5;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = HEAP8[$3>>0]|0;
  $25 = $24&255;
  $26 = $25 << 24;
  $27 = ((($3)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 << 16;
  $31 = (($26) + ($30))|0;
  $32 = ((($3)) + 2|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $34 << 8;
  $36 = (($31) + ($35))|0;
  $37 = ((($3)) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($36) + ($39))|0;
  $4 = $40;
  $41 = $4;
  $42 = $2;
  $43 = ((($42)) + 404|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)!=($44|0);
  $46 = $45&1;
  $1 = $46;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 } else {
  $1 = 0;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _png_handle_IHDR($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $3;
 $15 = ((($14)) + 208|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 1;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $3;
  _png_chunk_error($19,15530);
  // unreachable;
 }
 $20 = $5;
 $21 = ($20|0)!=(13);
 $22 = $3;
 if ($21) {
  _png_chunk_error($22,15543);
  // unreachable;
 }
 $23 = ((($22)) + 208|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 | 1;
 HEAP32[$23>>2] = $25;
 $26 = $3;
 _png_crc_read($26,$6,13);
 $27 = $3;
 (_png_crc_finish($27,0)|0);
 $28 = $3;
 $29 = (_png_get_uint_31($28,$6)|0);
 $7 = $29;
 $30 = $3;
 $31 = ((($6)) + 4|0);
 $32 = (_png_get_uint_31($30,$31)|0);
 $8 = $32;
 $33 = ((($6)) + 8|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $9 = $35;
 $36 = ((($6)) + 9|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $10 = $38;
 $39 = ((($6)) + 10|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $11 = $41;
 $42 = ((($6)) + 11|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $12 = $44;
 $45 = ((($6)) + 12|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $13 = $47;
 $48 = $7;
 $49 = $3;
 $50 = ((($49)) + 348|0);
 HEAP32[$50>>2] = $48;
 $51 = $8;
 $52 = $3;
 $53 = ((($52)) + 352|0);
 HEAP32[$53>>2] = $51;
 $54 = $9;
 $55 = $54&255;
 $56 = $3;
 $57 = ((($56)) + 428|0);
 HEAP8[$57>>0] = $55;
 $58 = $13;
 $59 = $58&255;
 $60 = $3;
 $61 = ((($60)) + 424|0);
 HEAP8[$61>>0] = $59;
 $62 = $10;
 $63 = $62&255;
 $64 = $3;
 $65 = ((($64)) + 427|0);
 HEAP8[$65>>0] = $63;
 $66 = $12;
 $67 = $66&255;
 $68 = $3;
 $69 = ((($68)) + 680|0);
 HEAP8[$69>>0] = $67;
 $70 = $11;
 $71 = $70&255;
 $72 = $3;
 $73 = ((($72)) + 712|0);
 HEAP8[$73>>0] = $71;
 $74 = $3;
 $75 = ((($74)) + 427|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 switch ($77|0) {
 case 6:  {
  $81 = $3;
  $$sink = 4;$$sink2 = $81;
  break;
 }
 case 4:  {
  $80 = $3;
  $$sink = 2;$$sink2 = $80;
  break;
 }
 case 2:  {
  $79 = $3;
  $$sink = 3;$$sink2 = $79;
  break;
 }
 default: {
  $78 = $3;
  $$sink = 1;$$sink2 = $78;
 }
 }
 $82 = ((($$sink2)) + 431|0);
 HEAP8[$82>>0] = $$sink;
 $83 = $3;
 $84 = ((($83)) + 428|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = $3;
 $88 = ((($87)) + 431|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = Math_imul($86, $90)|0;
 $92 = $91&255;
 $93 = $3;
 $94 = ((($93)) + 430|0);
 HEAP8[$94>>0] = $92;
 $95 = $3;
 $96 = ((($95)) + 430|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = ($98|0)>=(8);
 $100 = $3;
 $101 = ((($100)) + 348|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $3;
 $104 = ((($103)) + 430|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $105&255;
 if ($99) {
  $107 = $106 >>> 3;
  $108 = Math_imul($102, $107)|0;
  $114 = $108;
  $112 = $3;
  $113 = ((($112)) + 364|0);
  HEAP32[$113>>2] = $114;
  $115 = $3;
  $116 = $4;
  $117 = $7;
  $118 = $8;
  $119 = $9;
  $120 = $10;
  $121 = $13;
  $122 = $11;
  $123 = $12;
  _png_set_IHDR($115,$116,$117,$118,$119,$120,$121,$122,$123);
  STACKTOP = sp;return;
 } else {
  $109 = Math_imul($102, $106)|0;
  $110 = (($109) + 7)|0;
  $111 = $110 >>> 3;
  $114 = $111;
  $112 = $3;
  $113 = ((($112)) + 364|0);
  HEAP32[$113>>2] = $114;
  $115 = $3;
  $116 = $4;
  $117 = $7;
  $118 = $8;
  $119 = $9;
  $120 = $10;
  $121 = $13;
  $122 = $11;
  $123 = $12;
  _png_set_IHDR($115,$116,$117,$118,$119,$120,$121,$122,$123);
  STACKTOP = sp;return;
 }
}
function _png_handle_PLTE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(800|0);
 $6 = sp + 32|0;
 $11 = sp + 28|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $3;
 $13 = ((($12)) + 208|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 $17 = $3;
 if ($16) {
  _png_chunk_error($17,15551);
  // unreachable;
 }
 $18 = ((($17)) + 208|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 2;
 $21 = ($20|0)!=(0);
 $22 = $3;
 if ($21) {
  _png_chunk_error($22,15564);
  // unreachable;
 }
 $23 = ((($22)) + 208|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 4;
 $26 = ($25|0)!=(0);
 $27 = $3;
 if ($26) {
  $28 = $5;
  (_png_crc_finish($27,$28)|0);
  $29 = $3;
  _png_chunk_benign_error($29,15530);
  STACKTOP = sp;return;
 }
 $30 = ((($27)) + 208|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 | 2;
 HEAP32[$30>>2] = $32;
 $33 = $3;
 $34 = ((($33)) + 427|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 2;
 $38 = ($37|0)==(0);
 if ($38) {
  $39 = $3;
  $40 = $5;
  (_png_crc_finish($39,$40)|0);
  $41 = $3;
  _png_chunk_benign_error($41,15574);
  STACKTOP = sp;return;
 }
 $42 = $5;
 $43 = ($42>>>0)>(768);
 if (!($43)) {
  $44 = $5;
  $45 = (($44>>>0) % 3)&-1;
  $46 = ($45|0)!=(0);
  if (!($46)) {
   $55 = $5;
   $56 = (($55|0) / 3)&-1;
   $8 = $56;
   $57 = $3;
   $58 = ((($57)) + 427|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = ($60|0)==(3);
   if ($61) {
    $62 = $3;
    $63 = ((($62)) + 428|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = 1 << $65;
    $7 = $66;
   } else {
    $7 = 256;
   }
   $67 = $8;
   $68 = $7;
   $69 = ($67|0)>($68|0);
   if ($69) {
    $70 = $7;
    $8 = $70;
   }
   $9 = 0;
   $10 = $6;
   while(1) {
    $71 = $9;
    $72 = $8;
    $73 = ($71|0)<($72|0);
    $74 = $3;
    if (!($73)) {
     break;
    }
    _png_crc_read($74,$11,3);
    $75 = HEAP8[$11>>0]|0;
    $76 = $10;
    HEAP8[$76>>0] = $75;
    $77 = ((($11)) + 1|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $10;
    $80 = ((($79)) + 1|0);
    HEAP8[$80>>0] = $78;
    $81 = ((($11)) + 2|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $10;
    $84 = ((($83)) + 2|0);
    HEAP8[$84>>0] = $82;
    $85 = $9;
    $86 = (($85) + 1)|0;
    $9 = $86;
    $87 = $10;
    $88 = ((($87)) + 3|0);
    $10 = $88;
   }
   $89 = $5;
   $90 = $8;
   $91 = ($90*3)|0;
   $92 = (($89) - ($91))|0;
   (_png_crc_finish($74,$92)|0);
   $93 = $3;
   $94 = $4;
   $95 = $8;
   _png_set_PLTE($93,$94,$6,$95);
   $96 = $3;
   $97 = ((($96)) + 420|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = $98&65535;
   $100 = ($99|0)>(0);
   if ($100) {
    label = 25;
   } else {
    $101 = $4;
    $102 = ($101|0)!=(0|0);
    if ($102) {
     $103 = $4;
     $104 = ((($103)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $105 & 16;
     $107 = ($106|0)!=(0);
     if ($107) {
      label = 25;
     }
    }
   }
   if ((label|0) == 25) {
    $108 = $3;
    $109 = ((($108)) + 420|0);
    HEAP16[$109>>1] = 0;
    $110 = $4;
    $111 = ($110|0)!=(0|0);
    if ($111) {
     $112 = $4;
     $113 = ((($112)) + 22|0);
     HEAP16[$113>>1] = 0;
    }
    $114 = $3;
    _png_chunk_benign_error($114,15599);
   }
   $115 = $4;
   $116 = ($115|0)!=(0|0);
   if ($116) {
    $117 = $4;
    $118 = ((($117)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $119 & 64;
    $121 = ($120|0)!=(0);
    if ($121) {
     $122 = $3;
     _png_chunk_benign_error($122,15618);
    }
   }
   $123 = $4;
   $124 = ($123|0)!=(0|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   $125 = $4;
   $126 = ((($125)) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127 & 32;
   $129 = ($128|0)!=(0);
   if (!($129)) {
    STACKTOP = sp;return;
   }
   $130 = $3;
   _png_chunk_benign_error($130,15637);
   STACKTOP = sp;return;
  }
 }
 $47 = $3;
 $48 = $5;
 (_png_crc_finish($47,$48)|0);
 $49 = $3;
 $50 = ((($49)) + 427|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = ($52|0)!=(3);
 $54 = $3;
 if (!($53)) {
  _png_chunk_error($54,15543);
  // unreachable;
 }
 _png_chunk_benign_error($54,15543);
 STACKTOP = sp;return;
}
function _png_handle_IEND($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 208|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $16 = $3;
  _png_chunk_error($16,15530);
  // unreachable;
 }
 $11 = $3;
 $12 = ((($11)) + 208|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 4;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $3;
  _png_chunk_error($16,15530);
  // unreachable;
 }
 $17 = $3;
 $18 = ((($17)) + 208|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 | 24;
 HEAP32[$18>>2] = $20;
 $21 = $3;
 $22 = $5;
 (_png_crc_finish($21,$22)|0);
 $23 = $5;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $3;
 _png_chunk_benign_error($25,15543);
 STACKTOP = sp;return;
}
function _png_handle_gAMA($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 $13 = $3;
 if ($12) {
  _png_chunk_error($13,15551);
  // unreachable;
 }
 $14 = ((($13)) + 208|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 6;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $3;
  $19 = $5;
  (_png_crc_finish($18,$19)|0);
  $20 = $3;
  _png_chunk_benign_error($20,15530);
  STACKTOP = sp;return;
 }
 $21 = $5;
 $22 = ($21|0)!=(4);
 $23 = $3;
 if ($22) {
  $24 = $5;
  (_png_crc_finish($23,$24)|0);
  $25 = $3;
  _png_chunk_benign_error($25,15543);
  STACKTOP = sp;return;
 }
 _png_crc_read($23,$7,4);
 $26 = $3;
 $27 = (_png_crc_finish($26,0)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = (_png_get_fixed_point(0,$7)|0);
 $6 = $29;
 $30 = $3;
 $31 = $3;
 $32 = ((($31)) + 792|0);
 $33 = $6;
 _png_colorspace_set_gamma($30,$32,$33);
 $34 = $3;
 $35 = $4;
 _png_colorspace_sync($34,$35);
 STACKTOP = sp;return;
}
function _png_get_fixed_point($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 24;
 $10 = $4;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 16;
 $15 = (($9) + ($14))|0;
 $16 = $4;
 $17 = ((($16)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 8;
 $21 = (($15) + ($20))|0;
 $22 = $4;
 $23 = ((($22)) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = (($21) + ($25))|0;
 $5 = $26;
 $27 = $5;
 $28 = ($27>>>0)<=(2147483647);
 if ($28) {
  $29 = $5;
  $2 = $29;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 $30 = $3;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $3;
  _png_warning($32,15656);
 }
 $2 = -1;
 $33 = $2;
 STACKTOP = sp;return ($33|0);
}
function _png_handle_sBIT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp + 20|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 208|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 $15 = $3;
 if ($14) {
  _png_chunk_error($15,15551);
  // unreachable;
 }
 $16 = ((($15)) + 208|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 6;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $3;
  $21 = $5;
  (_png_crc_finish($20,$21)|0);
  $22 = $3;
  _png_chunk_benign_error($22,15530);
  STACKTOP = sp;return;
 }
 $23 = $4;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $4;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 2;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $3;
   $31 = $5;
   (_png_crc_finish($30,$31)|0);
   $32 = $3;
   _png_chunk_benign_error($32,15564);
   STACKTOP = sp;return;
  }
 }
 $33 = $3;
 $34 = ((($33)) + 427|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)==(3);
 if ($37) {
  $6 = 3;
  $8 = 8;
 } else {
  $38 = $3;
  $39 = ((($38)) + 431|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $6 = $41;
  $42 = $3;
  $43 = ((($42)) + 428|0);
  $44 = HEAP8[$43>>0]|0;
  $8 = $44;
 }
 $45 = $5;
 $46 = $6;
 $47 = ($45|0)!=($46|0);
 $48 = $5;
 $49 = ($48>>>0)>(4);
 $or$cond = $47 | $49;
 if ($or$cond) {
  $50 = $3;
  _png_chunk_benign_error($50,15543);
  $51 = $3;
  $52 = $5;
  (_png_crc_finish($51,$52)|0);
  STACKTOP = sp;return;
 }
 $53 = $8;
 $54 = ((($9)) + 3|0);
 HEAP8[$54>>0] = $53;
 $55 = ((($9)) + 2|0);
 HEAP8[$55>>0] = $53;
 $56 = ((($9)) + 1|0);
 HEAP8[$56>>0] = $53;
 HEAP8[$9>>0] = $53;
 $57 = $3;
 $58 = $6;
 _png_crc_read($57,$9,$58);
 $59 = $3;
 $60 = (_png_crc_finish($59,0)|0);
 $61 = ($60|0)!=(0);
 if ($61) {
  STACKTOP = sp;return;
 }
 $7 = 0;
 while(1) {
  $62 = $7;
  $63 = $6;
  $64 = ($62>>>0)<($63>>>0);
  if (!($64)) {
   break;
  }
  $65 = $7;
  $66 = (($9) + ($65)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)==(0);
  if ($69) {
   label = 18;
   break;
  }
  $70 = $7;
  $71 = (($9) + ($70)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $8;
  $75 = $74&255;
  $76 = ($73|0)>($75|0);
  if ($76) {
   label = 18;
   break;
  }
  $78 = $7;
  $79 = (($78) + 1)|0;
  $7 = $79;
 }
 if ((label|0) == 18) {
  $77 = $3;
  _png_chunk_benign_error($77,15543);
  STACKTOP = sp;return;
 }
 $80 = $3;
 $81 = ((($80)) + 427|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $83 & 2;
 $85 = ($84|0)!=(0);
 $86 = HEAP8[$9>>0]|0;
 $87 = $3;
 $88 = ((($87)) + 508|0);
 if ($85) {
  HEAP8[$88>>0] = $86;
  $89 = ((($9)) + 1|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $3;
  $92 = ((($91)) + 508|0);
  $93 = ((($92)) + 1|0);
  HEAP8[$93>>0] = $90;
  $94 = ((($9)) + 2|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $3;
  $97 = ((($96)) + 508|0);
  $98 = ((($97)) + 2|0);
  HEAP8[$98>>0] = $95;
  $99 = ((($9)) + 3|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $3;
  $$sink = $100;$$sink4 = $101;
 } else {
  $102 = ((($88)) + 3|0);
  HEAP8[$102>>0] = $86;
  $103 = HEAP8[$9>>0]|0;
  $104 = $3;
  $105 = ((($104)) + 508|0);
  HEAP8[$105>>0] = $103;
  $106 = HEAP8[$9>>0]|0;
  $107 = $3;
  $108 = ((($107)) + 508|0);
  $109 = ((($108)) + 1|0);
  HEAP8[$109>>0] = $106;
  $110 = HEAP8[$9>>0]|0;
  $111 = $3;
  $112 = ((($111)) + 508|0);
  $113 = ((($112)) + 2|0);
  HEAP8[$113>>0] = $110;
  $114 = ((($9)) + 1|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $3;
  $$sink = $115;$$sink4 = $116;
 }
 $117 = ((($$sink4)) + 508|0);
 $118 = ((($117)) + 4|0);
 HEAP8[$118>>0] = $$sink;
 $119 = $3;
 $120 = $4;
 $121 = $3;
 $122 = ((($121)) + 508|0);
 _png_set_sBIT($119,$120,$122);
 STACKTOP = sp;return;
}
function _png_handle_cHRM($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 48|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 $13 = $3;
 if ($12) {
  _png_chunk_error($13,15551);
  // unreachable;
 }
 $14 = ((($13)) + 208|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 6;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $3;
  $19 = $5;
  (_png_crc_finish($18,$19)|0);
  $20 = $3;
  _png_chunk_benign_error($20,15530);
  STACKTOP = sp;return;
 }
 $21 = $5;
 $22 = ($21|0)!=(32);
 $23 = $3;
 if ($22) {
  $24 = $5;
  (_png_crc_finish($23,$24)|0);
  $25 = $3;
  _png_chunk_benign_error($25,15543);
  STACKTOP = sp;return;
 }
 _png_crc_read($23,$6,32);
 $26 = $3;
 $27 = (_png_crc_finish($26,0)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = (_png_get_fixed_point(0,$6)|0);
 $30 = ((($7)) + 24|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($6)) + 4|0);
 $32 = (_png_get_fixed_point(0,$31)|0);
 $33 = ((($7)) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($6)) + 8|0);
 $35 = (_png_get_fixed_point(0,$34)|0);
 HEAP32[$7>>2] = $35;
 $36 = ((($6)) + 12|0);
 $37 = (_png_get_fixed_point(0,$36)|0);
 $38 = ((($7)) + 4|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($6)) + 16|0);
 $40 = (_png_get_fixed_point(0,$39)|0);
 $41 = ((($7)) + 8|0);
 HEAP32[$41>>2] = $40;
 $42 = ((($6)) + 20|0);
 $43 = (_png_get_fixed_point(0,$42)|0);
 $44 = ((($7)) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($6)) + 24|0);
 $46 = (_png_get_fixed_point(0,$45)|0);
 $47 = ((($7)) + 16|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($6)) + 28|0);
 $49 = (_png_get_fixed_point(0,$48)|0);
 $50 = ((($7)) + 20|0);
 HEAP32[$50>>2] = $49;
 $51 = ((($7)) + 24|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(-1);
 if (!($53)) {
  $54 = ((($7)) + 28|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(-1);
  if (!($56)) {
   $57 = HEAP32[$7>>2]|0;
   $58 = ($57|0)==(-1);
   if (!($58)) {
    $59 = ((($7)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(-1);
    if (!($61)) {
     $62 = ((($7)) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)==(-1);
     if (!($64)) {
      $65 = ((($7)) + 12|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(-1);
      if (!($67)) {
       $68 = ((($7)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($69|0)==(-1);
       if (!($70)) {
        $71 = ((($7)) + 20|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = ($72|0)==(-1);
        if (!($73)) {
         $75 = $3;
         $76 = ((($75)) + 792|0);
         $77 = ((($76)) + 74|0);
         $78 = HEAP16[$77>>1]|0;
         $79 = $78&65535;
         $80 = $79 & 32768;
         $81 = ($80|0)!=(0);
         if ($81) {
          STACKTOP = sp;return;
         }
         $82 = $3;
         $83 = ((($82)) + 792|0);
         $84 = ((($83)) + 74|0);
         $85 = HEAP16[$84>>1]|0;
         $86 = $85&65535;
         $87 = $86 & 16;
         $88 = ($87|0)!=(0);
         $89 = $3;
         $90 = ((($89)) + 792|0);
         $91 = ((($90)) + 74|0);
         $92 = HEAP16[$91>>1]|0;
         $93 = $92&65535;
         if ($88) {
          $94 = $93 | 32768;
          $95 = $94&65535;
          HEAP16[$91>>1] = $95;
          $96 = $3;
          $97 = $4;
          _png_colorspace_sync($96,$97);
          $98 = $3;
          _png_chunk_benign_error($98,15564);
          STACKTOP = sp;return;
         } else {
          $99 = $93 | 16;
          $100 = $99&65535;
          HEAP16[$91>>1] = $100;
          $101 = $3;
          $102 = $3;
          $103 = ((($102)) + 792|0);
          (_png_colorspace_set_chromaticities($101,$103,$7,1)|0);
          $104 = $3;
          $105 = $4;
          _png_colorspace_sync($104,$105);
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $74 = $3;
 _png_chunk_benign_error($74,15693);
 STACKTOP = sp;return;
}
function _png_handle_sRGB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 208|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 $12 = $3;
 if ($11) {
  _png_chunk_error($12,15551);
  // unreachable;
 }
 $13 = ((($12)) + 208|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 6;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $3;
  $18 = $5;
  (_png_crc_finish($17,$18)|0);
  $19 = $3;
  _png_chunk_benign_error($19,15530);
  STACKTOP = sp;return;
 }
 $20 = $5;
 $21 = ($20|0)!=(1);
 $22 = $3;
 if ($21) {
  $23 = $5;
  (_png_crc_finish($22,$23)|0);
  $24 = $3;
  _png_chunk_benign_error($24,15543);
  STACKTOP = sp;return;
 }
 _png_crc_read($22,$6,1);
 $25 = $3;
 $26 = (_png_crc_finish($25,0)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $3;
 $29 = ((($28)) + 792|0);
 $30 = ((($29)) + 74|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = $32 & 32768;
 $34 = ($33|0)!=(0);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = $3;
 $36 = ((($35)) + 792|0);
 $37 = ((($36)) + 74|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = $39 & 4;
 $41 = ($40|0)!=(0);
 $42 = $3;
 if ($41) {
  $43 = ((($42)) + 792|0);
  $44 = ((($43)) + 74|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $47 = $46 | 32768;
  $48 = $47&65535;
  HEAP16[$44>>1] = $48;
  $49 = $3;
  $50 = $4;
  _png_colorspace_sync($49,$50);
  $51 = $3;
  _png_chunk_benign_error($51,15708);
  STACKTOP = sp;return;
 } else {
  $52 = $3;
  $53 = ((($52)) + 792|0);
  $54 = HEAP8[$6>>0]|0;
  $55 = $54&255;
  (_png_colorspace_set_sRGB($42,$53,$55)|0);
  $56 = $3;
  $57 = $4;
  _png_colorspace_sync($56,$57);
  STACKTOP = sp;return;
 }
}
function _png_handle_iCCP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1296|0);
 $5 = sp + 32|0;
 $10 = sp + 1204|0;
 $11 = sp + 1072|0;
 $12 = sp + 48|0;
 $13 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$5>>2] = $2;
 $6 = 0;
 $7 = 0;
 $17 = $3;
 $18 = ((($17)) + 208|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 1;
 $21 = ($20|0)==(0);
 $22 = $3;
 if ($21) {
  _png_chunk_error($22,15551);
  // unreachable;
 }
 $23 = ((($22)) + 208|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 6;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $3;
  $28 = HEAP32[$5>>2]|0;
  (_png_crc_finish($27,$28)|0);
  $29 = $3;
  _png_chunk_benign_error($29,15530);
  STACKTOP = sp;return;
 }
 $30 = HEAP32[$5>>2]|0;
 $31 = ($30>>>0)<(9);
 $32 = $3;
 if ($31) {
  $33 = HEAP32[$5>>2]|0;
  (_png_crc_finish($32,$33)|0);
  $34 = $3;
  _png_chunk_benign_error($34,15726);
  STACKTOP = sp;return;
 }
 $35 = ((($32)) + 792|0);
 $36 = ((($35)) + 74|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = $38 & 32768;
 $40 = ($39|0)!=(0);
 $41 = $3;
 if ($40) {
  $42 = HEAP32[$5>>2]|0;
  (_png_crc_finish($41,$42)|0);
  STACKTOP = sp;return;
 }
 $43 = ((($41)) + 792|0);
 $44 = ((($43)) + 74|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = $46 & 4;
 $48 = ($47|0)==(0);
 do {
  if ($48) {
   $8 = 81;
   $49 = $8;
   $50 = HEAP32[$5>>2]|0;
   $51 = ($49>>>0)>($50>>>0);
   if ($51) {
    $52 = HEAP32[$5>>2]|0;
    $8 = $52;
   }
   $53 = $3;
   $54 = $8;
   _png_crc_read($53,$10,$54);
   $55 = $8;
   $56 = HEAP32[$5>>2]|0;
   $57 = (($56) - ($55))|0;
   HEAP32[$5>>2] = $57;
   $9 = 0;
   while(1) {
    $58 = $9;
    $59 = ($58>>>0)<(80);
    if ($59) {
     $60 = $9;
     $61 = $8;
     $62 = ($60>>>0)<($61>>>0);
     if ($62) {
      $63 = $9;
      $64 = (($10) + ($63)|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = $65 << 24 >> 24;
      $67 = ($66|0)!=(0);
      $295 = $67;
     } else {
      $295 = 0;
     }
    } else {
     $295 = 0;
    }
    $68 = $9;
    if (!($295)) {
     break;
    }
    $69 = (($68) + 1)|0;
    $9 = $69;
   }
   $70 = ($68>>>0)>=(1);
   $71 = $9;
   $72 = ($71>>>0)<=(79);
   $or$cond = $70 & $72;
   if (!($or$cond)) {
    $6 = 15805;
    break;
   }
   $73 = $9;
   $74 = (($73) + 1)|0;
   $75 = $8;
   $76 = ($74>>>0)<($75>>>0);
   if ($76) {
    $77 = $9;
    $78 = (($77) + 1)|0;
    $79 = (($10) + ($78)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80 << 24 >> 24;
    $82 = ($81|0)==(0);
    if ($82) {
     $83 = $9;
     $84 = (($83) + 2)|0;
     $85 = $8;
     $86 = (($85) - ($84))|0;
     $8 = $86;
     $87 = $3;
     $88 = (_png_inflate_claim($87,1766015824)|0);
     $89 = ($88|0)==(0);
     if (!($89)) {
      $274 = $3;
      $275 = ((($274)) + 224|0);
      $276 = ((($275)) + 24|0);
      $277 = HEAP32[$276>>2]|0;
      $6 = $277;
      break;
     }
     HEAP32[$13>>2] = 132;
     $90 = $9;
     $91 = (($90) + 2)|0;
     $92 = (($10) + ($91)|0);
     $93 = $3;
     $94 = ((($93)) + 224|0);
     HEAP32[$94>>2] = $92;
     $95 = $8;
     $96 = $3;
     $97 = ((($96)) + 224|0);
     $98 = ((($97)) + 4|0);
     HEAP32[$98>>2] = $95;
     $99 = $3;
     (_png_inflate_read($99,$12,1024,$5,$11,$13,0)|0);
     $100 = HEAP32[$13>>2]|0;
     $101 = ($100|0)==(0);
     L38: do {
      if ($101) {
       $102 = HEAP8[$11>>0]|0;
       $103 = $102&255;
       $104 = $103 << 24;
       $105 = ((($11)) + 1|0);
       $106 = HEAP8[$105>>0]|0;
       $107 = $106&255;
       $108 = $107 << 16;
       $109 = (($104) + ($108))|0;
       $110 = ((($11)) + 2|0);
       $111 = HEAP8[$110>>0]|0;
       $112 = $111&255;
       $113 = $112 << 8;
       $114 = (($109) + ($113))|0;
       $115 = ((($11)) + 3|0);
       $116 = HEAP8[$115>>0]|0;
       $117 = $116&255;
       $118 = (($114) + ($117))|0;
       $14 = $118;
       $119 = $3;
       $120 = $3;
       $121 = ((($120)) + 792|0);
       $122 = $14;
       $123 = (_png_icc_check_length($119,$121,$10,$122)|0);
       $124 = ($123|0)!=(0);
       if ($124) {
        $125 = $3;
        $126 = $3;
        $127 = ((($126)) + 792|0);
        $128 = $14;
        $129 = $3;
        $130 = ((($129)) + 427|0);
        $131 = HEAP8[$130>>0]|0;
        $132 = $131&255;
        $133 = (_png_icc_check_header($125,$127,$10,$128,$11,$132)|0);
        $134 = ($133|0)!=(0);
        if ($134) {
         $135 = ((($11)) + 128|0);
         $136 = HEAP8[$135>>0]|0;
         $137 = $136&255;
         $138 = $137 << 24;
         $139 = ((($11)) + 128|0);
         $140 = ((($139)) + 1|0);
         $141 = HEAP8[$140>>0]|0;
         $142 = $141&255;
         $143 = $142 << 16;
         $144 = (($138) + ($143))|0;
         $145 = ((($11)) + 128|0);
         $146 = ((($145)) + 2|0);
         $147 = HEAP8[$146>>0]|0;
         $148 = $147&255;
         $149 = $148 << 8;
         $150 = (($144) + ($149))|0;
         $151 = ((($11)) + 128|0);
         $152 = ((($151)) + 3|0);
         $153 = HEAP8[$152>>0]|0;
         $154 = $153&255;
         $155 = (($150) + ($154))|0;
         $15 = $155;
         $156 = $3;
         $157 = $14;
         $158 = (_png_read_buffer($156,$157,2)|0);
         $16 = $158;
         $159 = $16;
         $160 = ($159|0)!=(0|0);
         if (!($160)) {
          $6 = 15758;
          break;
         }
         $161 = $16;
         _memcpy(($161|0),($11|0),132)|0;
         $162 = $15;
         $163 = ($162*12)|0;
         HEAP32[$13>>2] = $163;
         $164 = $3;
         $165 = $16;
         $166 = ((($165)) + 132|0);
         (_png_inflate_read($164,$12,1024,$5,$166,$13,0)|0);
         $167 = HEAP32[$13>>2]|0;
         $168 = ($167|0)==(0);
         $169 = $3;
         if (!($168)) {
          $265 = ((($169)) + 224|0);
          $266 = ((($265)) + 24|0);
          $267 = HEAP32[$266>>2]|0;
          $6 = $267;
          break;
         }
         $170 = $3;
         $171 = ((($170)) + 792|0);
         $172 = $14;
         $173 = $16;
         $174 = (_png_icc_check_tag_table($169,$171,$10,$172,$173)|0);
         $175 = ($174|0)!=(0);
         if ($175) {
          $176 = $14;
          $177 = (($176) - 132)|0;
          $178 = $15;
          $179 = ($178*12)|0;
          $180 = (($177) - ($179))|0;
          HEAP32[$13>>2] = $180;
          $181 = $3;
          $182 = $16;
          $183 = ((($182)) + 132|0);
          $184 = $15;
          $185 = ($184*12)|0;
          $186 = (($183) + ($185)|0);
          (_png_inflate_read($181,$12,1024,$5,$186,$13,1)|0);
          $187 = HEAP32[$5>>2]|0;
          $188 = ($187>>>0)>(0);
          do {
           if ($188) {
            $189 = $3;
            $190 = ((($189)) + 212|0);
            $191 = HEAP32[$190>>2]|0;
            $192 = $191 & 1048576;
            $193 = ($192|0)!=(0);
            if ($193) {
             break;
            }
            $6 = 15736;
            break L38;
           }
          } while(0);
          $194 = HEAP32[$13>>2]|0;
          $195 = ($194|0)==(0);
          if (!($195)) {
           $259 = HEAP32[$13>>2]|0;
           $260 = ($259>>>0)>(0);
           if ($260) {
            $6 = 15772;
            break;
           } else {
            $261 = $3;
            $262 = ((($261)) + 224|0);
            $263 = ((($262)) + 24|0);
            $264 = HEAP32[$263>>2]|0;
            $6 = $264;
            break;
           }
          }
          $196 = HEAP32[$5>>2]|0;
          $197 = ($196>>>0)>(0);
          if ($197) {
           $198 = $3;
           _png_chunk_warning($198,15736);
          }
          $199 = $3;
          $200 = HEAP32[$5>>2]|0;
          (_png_crc_finish($199,$200)|0);
          $7 = 1;
          $201 = $3;
          $202 = $3;
          $203 = ((($202)) + 792|0);
          $204 = $16;
          $205 = $3;
          $206 = ((($205)) + 224|0);
          $207 = ((($206)) + 48|0);
          $208 = HEAP32[$207>>2]|0;
          _png_icc_set_sRGB($201,$203,$204,$208);
          $209 = $4;
          $210 = ($209|0)!=(0|0);
          do {
           if ($210) {
            $211 = $3;
            $212 = $4;
            _png_free_data($211,$212,16,0);
            $213 = $3;
            $214 = $9;
            $215 = (($214) + 1)|0;
            $216 = (_png_malloc_base($213,$215)|0);
            $217 = $4;
            $218 = ((($217)) + 116|0);
            HEAP32[$218>>2] = $216;
            $219 = $4;
            $220 = ((($219)) + 116|0);
            $221 = HEAP32[$220>>2]|0;
            $222 = ($221|0)!=(0|0);
            if ($222) {
             $223 = $4;
             $224 = ((($223)) + 116|0);
             $225 = HEAP32[$224>>2]|0;
             $226 = $9;
             $227 = (($226) + 1)|0;
             _memcpy(($225|0),($10|0),($227|0))|0;
             $228 = $14;
             $229 = $4;
             $230 = ((($229)) + 124|0);
             HEAP32[$230>>2] = $228;
             $231 = $16;
             $232 = $4;
             $233 = ((($232)) + 120|0);
             HEAP32[$233>>2] = $231;
             $234 = $3;
             $235 = ((($234)) + 756|0);
             HEAP32[$235>>2] = 0;
             $236 = $4;
             $237 = ((($236)) + 232|0);
             $238 = HEAP32[$237>>2]|0;
             $239 = $238 | 16;
             HEAP32[$237>>2] = $239;
             $240 = $4;
             $241 = ((($240)) + 8|0);
             $242 = HEAP32[$241>>2]|0;
             $243 = $242 | 4096;
             HEAP32[$241>>2] = $243;
             break;
            } else {
             $244 = $3;
             $245 = ((($244)) + 792|0);
             $246 = ((($245)) + 74|0);
             $247 = HEAP16[$246>>1]|0;
             $248 = $247&65535;
             $249 = $248 | 32768;
             $250 = $249&65535;
             HEAP16[$246>>1] = $250;
             $6 = 15758;
             break;
            }
           }
          } while(0);
          $251 = $4;
          $252 = ($251|0)!=(0|0);
          if ($252) {
           $253 = $3;
           $254 = $4;
           _png_colorspace_sync($253,$254);
          }
          $255 = $6;
          $256 = ($255|0)==(0|0);
          if (!($256)) {
           break;
          }
          $257 = $3;
          $258 = ((($257)) + 220|0);
          HEAP32[$258>>2] = 0;
          STACKTOP = sp;return;
         }
        }
       }
      } else {
       $268 = $3;
       $269 = ((($268)) + 224|0);
       $270 = ((($269)) + 24|0);
       $271 = HEAP32[$270>>2]|0;
       $6 = $271;
      }
     } while(0);
     $272 = $3;
     $273 = ((($272)) + 220|0);
     HEAP32[$273>>2] = 0;
     break;
    }
   }
   $6 = 15782;
  } else {
   $6 = 15708;
  }
 } while(0);
 $278 = $7;
 $279 = ($278|0)==(0);
 if ($279) {
  $280 = $3;
  $281 = HEAP32[$5>>2]|0;
  (_png_crc_finish($280,$281)|0);
 }
 $282 = $3;
 $283 = ((($282)) + 792|0);
 $284 = ((($283)) + 74|0);
 $285 = HEAP16[$284>>1]|0;
 $286 = $285&65535;
 $287 = $286 | 32768;
 $288 = $287&65535;
 HEAP16[$284>>1] = $288;
 $289 = $3;
 $290 = $4;
 _png_colorspace_sync($289,$290);
 $291 = $6;
 $292 = ($291|0)!=(0|0);
 if (!($292)) {
  STACKTOP = sp;return;
 }
 $293 = $3;
 $294 = $6;
 _png_chunk_benign_error($293,$294);
 STACKTOP = sp;return;
}
function _png_inflate_claim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 220|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 220|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 >>> 24;
  $14 = $13 & 255;
  $15 = $14&255;
  HEAP8[$4>>0] = $15;
  $16 = $2;
  $17 = ((($16)) + 220|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >>> 16;
  $20 = $19 & 255;
  $21 = $20&255;
  $22 = ((($4)) + 1|0);
  HEAP8[$22>>0] = $21;
  $23 = $2;
  $24 = ((($23)) + 220|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 >>> 8;
  $27 = $26 & 255;
  $28 = $27&255;
  $29 = ((($4)) + 2|0);
  HEAP8[$29>>0] = $28;
  $30 = $2;
  $31 = ((($30)) + 220|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 & 255;
  $34 = $33&255;
  $35 = ((($4)) + 3|0);
  HEAP8[$35>>0] = $34;
  (_png_safecat($4,64,4,15869)|0);
  $36 = $2;
  _png_chunk_warning($36,$4);
  $37 = $2;
  $38 = ((($37)) + 220|0);
  HEAP32[$38>>2] = 0;
 }
 $39 = $2;
 $40 = ((($39)) + 224|0);
 HEAP32[$40>>2] = 0;
 $41 = $2;
 $42 = ((($41)) + 224|0);
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = 0;
 $44 = $2;
 $45 = ((($44)) + 224|0);
 $46 = ((($45)) + 12|0);
 HEAP32[$46>>2] = 0;
 $47 = $2;
 $48 = ((($47)) + 224|0);
 $49 = ((($48)) + 16|0);
 HEAP32[$49>>2] = 0;
 $50 = $2;
 $51 = ((($50)) + 212|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 & 2;
 $54 = ($53|0)!=(0);
 $55 = $2;
 $56 = ((($55)) + 224|0);
 if ($54) {
  $57 = (_inflateReset($56)|0);
  $5 = $57;
 } else {
  $58 = (_inflateInit_($56,18393,56)|0);
  $5 = $58;
  $59 = $5;
  $60 = ($59|0)==(0);
  if ($60) {
   $61 = $2;
   $62 = ((($61)) + 212|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 2;
   HEAP32[$62>>2] = $64;
  }
 }
 $65 = $5;
 $66 = ($65|0)==(0);
 if ($66) {
  $67 = $3;
  $68 = $2;
  $69 = ((($68)) + 220|0);
  HEAP32[$69>>2] = $67;
  $72 = $5;
  STACKTOP = sp;return ($72|0);
 } else {
  $70 = $2;
  $71 = $5;
  _png_zstream_error($70,$71);
  $72 = $5;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _png_inflate_read($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = $8;
 $18 = ((($17)) + 220|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $8;
 $21 = ((($20)) + 376|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)==($22|0);
 if (!($23)) {
  $110 = $8;
  $111 = ((($110)) + 224|0);
  $112 = ((($111)) + 24|0);
  HEAP32[$112>>2] = 15851;
  $7 = -2;
  $113 = $7;
  STACKTOP = sp;return ($113|0);
 }
 $24 = $12;
 $25 = $8;
 $26 = ((($25)) + 224|0);
 $27 = ((($26)) + 12|0);
 HEAP32[$27>>2] = $24;
 $28 = $8;
 $29 = ((($28)) + 224|0);
 $30 = ((($29)) + 16|0);
 HEAP32[$30>>2] = 0;
 while(1) {
  $31 = $8;
  $32 = ((($31)) + 224|0);
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = $10;
   $37 = $11;
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36>>>0)>($38>>>0);
   if ($39) {
    $40 = $11;
    $41 = HEAP32[$40>>2]|0;
    $10 = $41;
   }
   $42 = $10;
   $43 = $11;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) - ($42))|0;
   HEAP32[$43>>2] = $45;
   $46 = $10;
   $47 = ($46>>>0)>(0);
   if ($47) {
    $48 = $8;
    $49 = $9;
    $50 = $10;
    _png_crc_read($48,$49,$50);
   }
   $51 = $9;
   $52 = $8;
   $53 = ((($52)) + 224|0);
   HEAP32[$53>>2] = $51;
   $54 = $10;
   $55 = $8;
   $56 = ((($55)) + 224|0);
   $57 = ((($56)) + 4|0);
   HEAP32[$57>>2] = $54;
  }
  $58 = $8;
  $59 = ((($58)) + 224|0);
  $60 = ((($59)) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(0);
  if ($62) {
   $16 = -1;
   $63 = $16;
   $64 = $13;
   $65 = HEAP32[$64>>2]|0;
   $66 = ($63>>>0)>($65>>>0);
   if ($66) {
    $67 = $13;
    $68 = HEAP32[$67>>2]|0;
    $16 = $68;
   }
   $69 = $16;
   $70 = $13;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) - ($69))|0;
   HEAP32[$70>>2] = $72;
   $73 = $16;
   $74 = $8;
   $75 = ((($74)) + 224|0);
   $76 = ((($75)) + 16|0);
   HEAP32[$76>>2] = $73;
  }
  $77 = $8;
  $78 = ((($77)) + 224|0);
  $79 = $11;
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80>>>0)>(0);
  if ($81) {
   $85 = 0;
  } else {
   $82 = $14;
   $83 = ($82|0)!=(0);
   $84 = $83 ? 4 : 2;
   $85 = $84;
  }
  $86 = (_inflate($78,$85)|0);
  $15 = $86;
  $87 = $15;
  $88 = ($87|0)==(0);
  if (!($88)) {
   break;
  }
  $89 = $13;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90>>>0)>(0);
  if ($91) {
   continue;
  }
  $92 = $8;
  $93 = ((($92)) + 224|0);
  $94 = ((($93)) + 16|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95>>>0)>(0);
  if (!($96)) {
   break;
  }
 }
 $97 = $8;
 $98 = ((($97)) + 224|0);
 $99 = ((($98)) + 16|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $13;
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + ($100))|0;
 HEAP32[$101>>2] = $103;
 $104 = $8;
 $105 = ((($104)) + 224|0);
 $106 = ((($105)) + 16|0);
 HEAP32[$106>>2] = 0;
 $107 = $8;
 $108 = $15;
 _png_zstream_error($107,$108);
 $109 = $15;
 $7 = $109;
 $113 = $7;
 STACKTOP = sp;return ($113|0);
}
function _png_read_buffer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 756|0);
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $4;
  $13 = $3;
  $14 = ((($13)) + 760|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12>>>0)>($15>>>0);
  if ($16) {
   $17 = $3;
   $18 = ((($17)) + 756|0);
   HEAP32[$18>>2] = 0;
   $19 = $3;
   $20 = ((($19)) + 756|0);
   HEAP32[$20>>2] = 0;
   $21 = $3;
   $22 = ((($21)) + 760|0);
   HEAP32[$22>>2] = 0;
   $23 = $3;
   $24 = $6;
   _png_free($23,$24);
   $6 = 0;
  }
 }
 $25 = $6;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  $43 = $6;
  STACKTOP = sp;return ($43|0);
 }
 $27 = $3;
 $28 = $4;
 $29 = (_png_malloc_base($27,$28)|0);
 $6 = $29;
 $30 = $6;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $6;
  $33 = $3;
  $34 = ((($33)) + 756|0);
  HEAP32[$34>>2] = $32;
  $35 = $4;
  $36 = $3;
  $37 = ((($36)) + 760|0);
  HEAP32[$37>>2] = $35;
  $43 = $6;
  STACKTOP = sp;return ($43|0);
 }
 $38 = $5;
 $39 = ($38|0)<(2);
 if (!($39)) {
  $43 = $6;
  STACKTOP = sp;return ($43|0);
 }
 $40 = $5;
 $41 = ($40|0)!=(0);
 $42 = $3;
 if (!($41)) {
  _png_chunk_error($42,15817);
  // unreachable;
 }
 _png_chunk_warning($42,15817);
 $43 = $6;
 STACKTOP = sp;return ($43|0);
}
function _png_handle_sPLT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $13 = 0;
 $16 = $3;
 $17 = ((($16)) + 724|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $3;
  $21 = ((($20)) + 724|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(1);
  $24 = $3;
  if ($23) {
   $25 = $5;
   (_png_crc_finish($24,$25)|0);
   STACKTOP = sp;return;
  }
  $26 = ((($24)) + 724|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$26>>2] = $28;
  $29 = ($28|0)==(1);
  if ($29) {
   $30 = $3;
   _png_warning($30,15884);
   $31 = $3;
   $32 = $5;
   (_png_crc_finish($31,$32)|0);
   STACKTOP = sp;return;
  }
 }
 $33 = $3;
 $34 = ((($33)) + 208|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 1;
 $37 = ($36|0)==(0);
 $38 = $3;
 if ($37) {
  _png_chunk_error($38,15551);
  // unreachable;
 }
 $39 = ((($38)) + 208|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 & 4;
 $42 = ($41|0)!=(0);
 $43 = $3;
 $44 = $5;
 if ($42) {
  (_png_crc_finish($43,$44)|0);
  $45 = $3;
  _png_chunk_benign_error($45,15530);
  STACKTOP = sp;return;
 }
 $46 = (($44) + 1)|0;
 $47 = (_png_read_buffer($43,$46,2)|0);
 $7 = $47;
 $48 = $7;
 $49 = ($48|0)==(0|0);
 $50 = $3;
 if ($49) {
  $51 = $5;
  (_png_crc_finish($50,$51)|0);
  $52 = $3;
  _png_chunk_benign_error($52,15758);
  STACKTOP = sp;return;
 }
 $53 = $7;
 $54 = $5;
 _png_crc_read($50,$53,$54);
 $55 = $3;
 $56 = $13;
 $57 = (_png_crc_finish($55,$56)|0);
 $58 = ($57|0)!=(0);
 if ($58) {
  STACKTOP = sp;return;
 }
 $59 = $7;
 $60 = $5;
 $61 = (($59) + ($60)|0);
 HEAP8[$61>>0] = 0;
 $62 = $7;
 $6 = $62;
 while(1) {
  $63 = $6;
  $64 = HEAP8[$63>>0]|0;
  $65 = ($64<<24>>24)!=(0);
  $66 = $6;
  $67 = ((($66)) + 1|0);
  $6 = $67;
  if (!($65)) {
   break;
  }
 }
 $68 = $5;
 $69 = ($68>>>0)<(2);
 if (!($69)) {
  $70 = $6;
  $71 = $7;
  $72 = $5;
  $73 = (($72) - 2)|0;
  $74 = (($71) + ($73)|0);
  $75 = ($70>>>0)>($74>>>0);
  if (!($75)) {
   $77 = $6;
   $78 = ((($77)) + 1|0);
   $6 = $78;
   $79 = HEAP8[$77>>0]|0;
   $80 = ((($8)) + 4|0);
   HEAP8[$80>>0] = $79;
   $81 = ((($8)) + 4|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = ($83|0)==(8);
   $85 = $84 ? 6 : 10;
   $11 = $85;
   $86 = $5;
   $87 = $6;
   $88 = $7;
   $89 = $87;
   $90 = $88;
   $91 = (($89) - ($90))|0;
   $92 = (($86) - ($91))|0;
   $10 = $92;
   $93 = $10;
   $94 = $11;
   $95 = (($93>>>0) % ($94>>>0))&-1;
   $96 = ($95|0)!=(0);
   if ($96) {
    $97 = $3;
    _png_warning($97,15938);
    STACKTOP = sp;return;
   }
   $98 = $10;
   $99 = $11;
   $100 = (($98>>>0) / ($99>>>0))&-1;
   $14 = $100;
   $15 = 429496729;
   $101 = $14;
   $102 = $15;
   $103 = ($101>>>0)>($102>>>0);
   if ($103) {
    $104 = $3;
    _png_warning($104,15964);
    STACKTOP = sp;return;
   }
   $105 = $10;
   $106 = $11;
   $107 = (($105>>>0) / ($106>>>0))&-1;
   $108 = ((($8)) + 12|0);
   HEAP32[$108>>2] = $107;
   $109 = $3;
   $110 = ((($8)) + 12|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111*10)|0;
   $113 = (_png_malloc_warn($109,$112)|0);
   $114 = ((($8)) + 8|0);
   HEAP32[$114>>2] = $113;
   $115 = ((($8)) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($116|0)==(0|0);
   if ($117) {
    $118 = $3;
    _png_warning($118,15984);
    STACKTOP = sp;return;
   }
   $12 = 0;
   while(1) {
    $119 = $12;
    $120 = ((($8)) + 12|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($119|0)<($121|0);
    if (!($122)) {
     break;
    }
    $123 = ((($8)) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $12;
    $126 = (($124) + (($125*10)|0)|0);
    $9 = $126;
    $127 = ((($8)) + 4|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129|0)==(8);
    $131 = $6;
    if ($130) {
     $132 = ((($131)) + 1|0);
     $6 = $132;
     $133 = HEAP8[$131>>0]|0;
     $134 = $133&255;
     $135 = $9;
     HEAP16[$135>>1] = $134;
     $136 = $6;
     $137 = ((($136)) + 1|0);
     $6 = $137;
     $138 = HEAP8[$136>>0]|0;
     $139 = $138&255;
     $140 = $9;
     $141 = ((($140)) + 2|0);
     HEAP16[$141>>1] = $139;
     $142 = $6;
     $143 = ((($142)) + 1|0);
     $6 = $143;
     $144 = HEAP8[$142>>0]|0;
     $145 = $144&255;
     $146 = $9;
     $147 = ((($146)) + 4|0);
     HEAP16[$147>>1] = $145;
     $148 = $6;
     $149 = ((($148)) + 1|0);
     $6 = $149;
     $150 = HEAP8[$148>>0]|0;
     $151 = $150&255;
     $152 = $9;
     $153 = ((($152)) + 6|0);
     HEAP16[$153>>1] = $151;
    } else {
     $154 = HEAP8[$131>>0]|0;
     $155 = $154&255;
     $156 = $155 << 8;
     $157 = $6;
     $158 = ((($157)) + 1|0);
     $159 = HEAP8[$158>>0]|0;
     $160 = $159&255;
     $161 = (($156) + ($160))|0;
     $162 = $161&65535;
     $163 = $9;
     HEAP16[$163>>1] = $162;
     $164 = $6;
     $165 = ((($164)) + 2|0);
     $6 = $165;
     $166 = $6;
     $167 = HEAP8[$166>>0]|0;
     $168 = $167&255;
     $169 = $168 << 8;
     $170 = $6;
     $171 = ((($170)) + 1|0);
     $172 = HEAP8[$171>>0]|0;
     $173 = $172&255;
     $174 = (($169) + ($173))|0;
     $175 = $174&65535;
     $176 = $9;
     $177 = ((($176)) + 2|0);
     HEAP16[$177>>1] = $175;
     $178 = $6;
     $179 = ((($178)) + 2|0);
     $6 = $179;
     $180 = $6;
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = $182 << 8;
     $184 = $6;
     $185 = ((($184)) + 1|0);
     $186 = HEAP8[$185>>0]|0;
     $187 = $186&255;
     $188 = (($183) + ($187))|0;
     $189 = $188&65535;
     $190 = $9;
     $191 = ((($190)) + 4|0);
     HEAP16[$191>>1] = $189;
     $192 = $6;
     $193 = ((($192)) + 2|0);
     $6 = $193;
     $194 = $6;
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = $196 << 8;
     $198 = $6;
     $199 = ((($198)) + 1|0);
     $200 = HEAP8[$199>>0]|0;
     $201 = $200&255;
     $202 = (($197) + ($201))|0;
     $203 = $202&65535;
     $204 = $9;
     $205 = ((($204)) + 6|0);
     HEAP16[$205>>1] = $203;
     $206 = $6;
     $207 = ((($206)) + 2|0);
     $6 = $207;
    }
    $208 = $6;
    $209 = HEAP8[$208>>0]|0;
    $210 = $209&255;
    $211 = $210 << 8;
    $212 = $6;
    $213 = ((($212)) + 1|0);
    $214 = HEAP8[$213>>0]|0;
    $215 = $214&255;
    $216 = (($211) + ($215))|0;
    $217 = $216&65535;
    $218 = $9;
    $219 = ((($218)) + 8|0);
    HEAP16[$219>>1] = $217;
    $220 = $6;
    $221 = ((($220)) + 2|0);
    $6 = $221;
    $222 = $12;
    $223 = (($222) + 1)|0;
    $12 = $223;
   }
   $224 = $7;
   HEAP32[$8>>2] = $224;
   $225 = $3;
   $226 = $4;
   _png_set_sPLT($225,$226,$8,1);
   $227 = $3;
   $228 = ((($8)) + 8|0);
   $229 = HEAP32[$228>>2]|0;
   _png_free($227,$229);
   STACKTOP = sp;return;
  }
 }
 $76 = $3;
 _png_warning($76,15917);
 STACKTOP = sp;return;
}
function _png_handle_tRNS($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $6 = sp + 24|0;
 $7 = sp + 18|0;
 $8 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ((($9)) + 208|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1;
 $13 = ($12|0)==(0);
 $14 = $3;
 if ($13) {
  _png_chunk_error($14,15551);
  // unreachable;
 }
 $15 = ((($14)) + 208|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 4;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $3;
  $20 = $5;
  (_png_crc_finish($19,$20)|0);
  $21 = $3;
  _png_chunk_benign_error($21,15530);
  STACKTOP = sp;return;
 }
 $22 = $4;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $4;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 16;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $3;
   $30 = $5;
   (_png_crc_finish($29,$30)|0);
   $31 = $3;
   _png_chunk_benign_error($31,15564);
   STACKTOP = sp;return;
  }
 }
 $32 = $3;
 $33 = ((($32)) + 427|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ($35|0)==(0);
 do {
  if ($36) {
   $37 = $5;
   $38 = ($37|0)!=(2);
   $39 = $3;
   if (!($38)) {
    _png_crc_read($39,$7,2);
    $42 = $3;
    $43 = ((($42)) + 420|0);
    HEAP16[$43>>1] = 1;
    $44 = HEAP8[$7>>0]|0;
    $45 = $44&255;
    $46 = $45 << 8;
    $47 = ((($7)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = (($46) + ($49))|0;
    $51 = $50&65535;
    $52 = $3;
    $53 = ((($52)) + 524|0);
    $54 = ((($53)) + 8|0);
    HEAP16[$54>>1] = $51;
    break;
   }
   $40 = $5;
   (_png_crc_finish($39,$40)|0);
   $41 = $3;
   _png_chunk_benign_error($41,15543);
   STACKTOP = sp;return;
  } else {
   $55 = $3;
   $56 = ((($55)) + 427|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = ($58|0)==(2);
   if ($59) {
    $60 = $5;
    $61 = ($60|0)!=(6);
    $62 = $3;
    if (!($61)) {
     $65 = $5;
     _png_crc_read($62,$8,$65);
     $66 = $3;
     $67 = ((($66)) + 420|0);
     HEAP16[$67>>1] = 1;
     $68 = HEAP8[$8>>0]|0;
     $69 = $68&255;
     $70 = $69 << 8;
     $71 = ((($8)) + 1|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = (($70) + ($73))|0;
     $75 = $74&65535;
     $76 = $3;
     $77 = ((($76)) + 524|0);
     $78 = ((($77)) + 2|0);
     HEAP16[$78>>1] = $75;
     $79 = ((($8)) + 2|0);
     $80 = HEAP8[$79>>0]|0;
     $81 = $80&255;
     $82 = $81 << 8;
     $83 = ((($8)) + 2|0);
     $84 = ((($83)) + 1|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = (($82) + ($86))|0;
     $88 = $87&65535;
     $89 = $3;
     $90 = ((($89)) + 524|0);
     $91 = ((($90)) + 4|0);
     HEAP16[$91>>1] = $88;
     $92 = ((($8)) + 4|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93&255;
     $95 = $94 << 8;
     $96 = ((($8)) + 4|0);
     $97 = ((($96)) + 1|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98&255;
     $100 = (($95) + ($99))|0;
     $101 = $100&65535;
     $102 = $3;
     $103 = ((($102)) + 524|0);
     $104 = ((($103)) + 6|0);
     HEAP16[$104>>1] = $101;
     break;
    }
    $63 = $5;
    (_png_crc_finish($62,$63)|0);
    $64 = $3;
    _png_chunk_benign_error($64,15543);
    STACKTOP = sp;return;
   }
   $105 = $3;
   $106 = ((($105)) + 427|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = ($108|0)==(3);
   $110 = $3;
   if (!($109)) {
    $136 = $5;
    (_png_crc_finish($110,$136)|0);
    $137 = $3;
    _png_chunk_benign_error($137,16020);
    STACKTOP = sp;return;
   }
   $111 = ((($110)) + 208|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $112 & 2;
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = $3;
    $116 = $5;
    (_png_crc_finish($115,$116)|0);
    $117 = $3;
    _png_chunk_benign_error($117,15530);
    STACKTOP = sp;return;
   }
   $118 = $5;
   $119 = $3;
   $120 = ((($119)) + 412|0);
   $121 = HEAP16[$120>>1]|0;
   $122 = $121&65535;
   $123 = ($118>>>0)>($122>>>0);
   $124 = $5;
   $125 = ($124>>>0)>(256);
   $or$cond = $123 | $125;
   $126 = $5;
   $127 = ($126|0)==(0);
   $or$cond3 = $or$cond | $127;
   $128 = $3;
   if (!($or$cond3)) {
    $131 = $5;
    _png_crc_read($128,$6,$131);
    $132 = $5;
    $133 = $132&65535;
    $134 = $3;
    $135 = ((($134)) + 420|0);
    HEAP16[$135>>1] = $133;
    break;
   }
   $129 = $5;
   (_png_crc_finish($128,$129)|0);
   $130 = $3;
   _png_chunk_benign_error($130,15543);
   STACKTOP = sp;return;
  }
 } while(0);
 $138 = $3;
 $139 = (_png_crc_finish($138,0)|0);
 $140 = ($139|0)!=(0);
 $141 = $3;
 if ($140) {
  $142 = ((($141)) + 420|0);
  HEAP16[$142>>1] = 0;
  STACKTOP = sp;return;
 } else {
  $143 = $4;
  $144 = $3;
  $145 = ((($144)) + 420|0);
  $146 = HEAP16[$145>>1]|0;
  $147 = $146&65535;
  $148 = $3;
  $149 = ((($148)) + 524|0);
  _png_set_tRNS($141,$143,$6,$147,$149);
  STACKTOP = sp;return;
 }
}
function _png_handle_bKGD($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 26|0;
 $8 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ((($9)) + 208|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1;
 $13 = ($12|0)==(0);
 $14 = $3;
 if ($13) {
  _png_chunk_error($14,15551);
  // unreachable;
 }
 $15 = ((($14)) + 208|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 4;
 $18 = ($17|0)!=(0);
 do {
  if (!($18)) {
   $19 = $3;
   $20 = ((($19)) + 427|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)==(3);
   if ($23) {
    $24 = $3;
    $25 = ((($24)) + 208|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26 & 2;
    $28 = ($27|0)==(0);
    if ($28) {
     break;
    }
   }
   $32 = $4;
   $33 = ($32|0)!=(0|0);
   if ($33) {
    $34 = $4;
    $35 = ((($34)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $36 & 32;
    $38 = ($37|0)!=(0);
    if ($38) {
     $39 = $3;
     $40 = $5;
     (_png_crc_finish($39,$40)|0);
     $41 = $3;
     _png_chunk_benign_error($41,15564);
     STACKTOP = sp;return;
    }
   }
   $42 = $3;
   $43 = ((($42)) + 427|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = ($45|0)==(3);
   do {
    if ($46) {
     $6 = 1;
    } else {
     $47 = $3;
     $48 = ((($47)) + 427|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = $50 & 2;
     $52 = ($51|0)!=(0);
     if ($52) {
      $6 = 6;
      break;
     } else {
      $6 = 2;
      break;
     }
    }
   } while(0);
   $53 = $5;
   $54 = $6;
   $55 = ($53|0)!=($54|0);
   $56 = $3;
   if ($55) {
    $57 = $5;
    (_png_crc_finish($56,$57)|0);
    $58 = $3;
    _png_chunk_benign_error($58,15543);
    STACKTOP = sp;return;
   }
   $59 = $6;
   _png_crc_read($56,$7,$59);
   $60 = $3;
   $61 = (_png_crc_finish($60,0)|0);
   $62 = ($61|0)!=(0);
   if ($62) {
    STACKTOP = sp;return;
   }
   $63 = $3;
   $64 = ((($63)) + 427|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = ($66|0)==(3);
   do {
    if ($67) {
     $68 = HEAP8[$7>>0]|0;
     HEAP8[$8>>0] = $68;
     $69 = $4;
     $70 = ($69|0)!=(0|0);
     do {
      if ($70) {
       $71 = $4;
       $72 = ((($71)) + 20|0);
       $73 = HEAP16[$72>>1]|0;
       $74 = $73&65535;
       $75 = ($74|0)!=(0);
       if ($75) {
        $76 = HEAP8[$7>>0]|0;
        $77 = $76&255;
        $78 = $4;
        $79 = ((($78)) + 20|0);
        $80 = HEAP16[$79>>1]|0;
        $81 = $80&65535;
        $82 = ($77|0)>=($81|0);
        $83 = $3;
        if (!($82)) {
         $84 = ((($83)) + 408|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = HEAP8[$7>>0]|0;
         $87 = $86&255;
         $88 = (($85) + (($87*3)|0)|0);
         $89 = HEAP8[$88>>0]|0;
         $90 = $89&255;
         $91 = ((($8)) + 2|0);
         HEAP16[$91>>1] = $90;
         $92 = $3;
         $93 = ((($92)) + 408|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = HEAP8[$7>>0]|0;
         $96 = $95&255;
         $97 = (($94) + (($96*3)|0)|0);
         $98 = ((($97)) + 1|0);
         $99 = HEAP8[$98>>0]|0;
         $100 = $99&255;
         $101 = ((($8)) + 4|0);
         HEAP16[$101>>1] = $100;
         $102 = $3;
         $103 = ((($102)) + 408|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = HEAP8[$7>>0]|0;
         $106 = $105&255;
         $107 = (($104) + (($106*3)|0)|0);
         $108 = ((($107)) + 2|0);
         $109 = HEAP8[$108>>0]|0;
         $110 = $109&255;
         $111 = ((($8)) + 6|0);
         HEAP16[$111>>1] = $110;
         break;
        }
        _png_chunk_benign_error($83,16047);
        STACKTOP = sp;return;
       } else {
        label = 24;
       }
      } else {
       label = 24;
      }
     } while(0);
     if ((label|0) == 24) {
      $112 = ((($8)) + 6|0);
      HEAP16[$112>>1] = 0;
      $113 = ((($8)) + 4|0);
      HEAP16[$113>>1] = 0;
      $114 = ((($8)) + 2|0);
      HEAP16[$114>>1] = 0;
     }
     $115 = ((($8)) + 8|0);
     HEAP16[$115>>1] = 0;
    } else {
     $116 = $3;
     $117 = ((($116)) + 427|0);
     $118 = HEAP8[$117>>0]|0;
     $119 = $118&255;
     $120 = $119 & 2;
     $121 = ($120|0)==(0);
     HEAP8[$8>>0] = 0;
     $122 = HEAP8[$7>>0]|0;
     $123 = $122&255;
     $124 = $123 << 8;
     $125 = ((($7)) + 1|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = $126&255;
     $128 = (($124) + ($127))|0;
     $129 = $128&65535;
     if ($121) {
      $130 = ((($8)) + 8|0);
      HEAP16[$130>>1] = $129;
      $131 = ((($8)) + 6|0);
      HEAP16[$131>>1] = $129;
      $132 = ((($8)) + 4|0);
      HEAP16[$132>>1] = $129;
      $133 = ((($8)) + 2|0);
      HEAP16[$133>>1] = $129;
      break;
     } else {
      $134 = ((($8)) + 2|0);
      HEAP16[$134>>1] = $129;
      $135 = ((($7)) + 2|0);
      $136 = HEAP8[$135>>0]|0;
      $137 = $136&255;
      $138 = $137 << 8;
      $139 = ((($7)) + 2|0);
      $140 = ((($139)) + 1|0);
      $141 = HEAP8[$140>>0]|0;
      $142 = $141&255;
      $143 = (($138) + ($142))|0;
      $144 = $143&65535;
      $145 = ((($8)) + 4|0);
      HEAP16[$145>>1] = $144;
      $146 = ((($7)) + 4|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = $147&255;
      $149 = $148 << 8;
      $150 = ((($7)) + 4|0);
      $151 = ((($150)) + 1|0);
      $152 = HEAP8[$151>>0]|0;
      $153 = $152&255;
      $154 = (($149) + ($153))|0;
      $155 = $154&65535;
      $156 = ((($8)) + 6|0);
      HEAP16[$156>>1] = $155;
      $157 = ((($8)) + 8|0);
      HEAP16[$157>>1] = 0;
      break;
     }
    }
   } while(0);
   $158 = $3;
   $159 = $4;
   _png_set_bKGD($158,$159,$8);
   STACKTOP = sp;return;
  }
 } while(0);
 $29 = $3;
 $30 = $5;
 (_png_crc_finish($29,$30)|0);
 $31 = $3;
 _png_chunk_benign_error($31,15530);
 STACKTOP = sp;return;
}
function _png_handle_hIST($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $8 = sp + 24|0;
 $9 = sp + 536|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 208|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 $15 = $3;
 if ($14) {
  _png_chunk_error($15,15551);
  // unreachable;
 }
 $16 = ((($15)) + 208|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 4;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = $3;
  $21 = ((($20)) + 208|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2;
  $24 = ($23|0)==(0);
  if (!($24)) {
   $28 = $4;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $30 = $4;
    $31 = ((($30)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 & 64;
    $34 = ($33|0)!=(0);
    if ($34) {
     $35 = $3;
     $36 = $5;
     (_png_crc_finish($35,$36)|0);
     $37 = $3;
     _png_chunk_benign_error($37,15564);
     STACKTOP = sp;return;
    }
   }
   $38 = $5;
   $39 = (($38>>>0) / 2)&-1;
   $6 = $39;
   $40 = $6;
   $41 = $3;
   $42 = ((($41)) + 412|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43&65535;
   $45 = ($40|0)!=($44|0);
   $46 = $6;
   $47 = ($46>>>0)>(256);
   $or$cond = $45 | $47;
   if ($or$cond) {
    $48 = $3;
    $49 = $5;
    (_png_crc_finish($48,$49)|0);
    $50 = $3;
    _png_chunk_benign_error($50,15543);
    STACKTOP = sp;return;
   }
   $7 = 0;
   while(1) {
    $51 = $7;
    $52 = $6;
    $53 = ($51>>>0)<($52>>>0);
    $54 = $3;
    if (!($53)) {
     break;
    }
    _png_crc_read($54,$9,2);
    $55 = HEAP8[$9>>0]|0;
    $56 = $55&255;
    $57 = $56 << 8;
    $58 = ((($9)) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = (($57) + ($60))|0;
    $62 = $61&65535;
    $63 = $7;
    $64 = (($8) + ($63<<1)|0);
    HEAP16[$64>>1] = $62;
    $65 = $7;
    $66 = (($65) + 1)|0;
    $7 = $66;
   }
   $67 = (_png_crc_finish($54,0)|0);
   $68 = ($67|0)!=(0);
   if ($68) {
    STACKTOP = sp;return;
   }
   $69 = $3;
   $70 = $4;
   _png_set_hIST($69,$70,$8);
   STACKTOP = sp;return;
  }
 }
 $25 = $3;
 $26 = $5;
 (_png_crc_finish($25,$26)|0);
 $27 = $3;
 _png_chunk_benign_error($27,15530);
 STACKTOP = sp;return;
}
function _png_handle_pHYs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 208|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 $15 = $3;
 if ($14) {
  _png_chunk_error($15,15551);
  // unreachable;
 }
 $16 = ((($15)) + 208|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 4;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $3;
  $21 = $5;
  (_png_crc_finish($20,$21)|0);
  $22 = $3;
  _png_chunk_benign_error($22,15530);
  STACKTOP = sp;return;
 }
 $23 = $4;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $4;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 128;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $3;
   $31 = $5;
   (_png_crc_finish($30,$31)|0);
   $32 = $3;
   _png_chunk_benign_error($32,15564);
   STACKTOP = sp;return;
  }
 }
 $33 = $5;
 $34 = ($33|0)!=(9);
 $35 = $3;
 if ($34) {
  $36 = $5;
  (_png_crc_finish($35,$36)|0);
  $37 = $3;
  _png_chunk_benign_error($37,15543);
  STACKTOP = sp;return;
 }
 _png_crc_read($35,$6,9);
 $38 = $3;
 $39 = (_png_crc_finish($38,0)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = HEAP8[$6>>0]|0;
 $42 = $41&255;
 $43 = $42 << 24;
 $44 = ((($6)) + 1|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = $46 << 16;
 $48 = (($43) + ($47))|0;
 $49 = ((($6)) + 2|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 << 8;
 $53 = (($48) + ($52))|0;
 $54 = ((($6)) + 3|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = (($53) + ($56))|0;
 $7 = $57;
 $58 = ((($6)) + 4|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 << 24;
 $62 = ((($6)) + 4|0);
 $63 = ((($62)) + 1|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $65 << 16;
 $67 = (($61) + ($66))|0;
 $68 = ((($6)) + 4|0);
 $69 = ((($68)) + 2|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $71 << 8;
 $73 = (($67) + ($72))|0;
 $74 = ((($6)) + 4|0);
 $75 = ((($74)) + 3|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = (($73) + ($77))|0;
 $8 = $78;
 $79 = ((($6)) + 8|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $9 = $81;
 $82 = $3;
 $83 = $4;
 $84 = $7;
 $85 = $8;
 $86 = $9;
 _png_set_pHYs($82,$83,$84,$85,$86);
 STACKTOP = sp;return;
}
function _png_handle_oFFs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 208|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 $15 = $3;
 if ($14) {
  _png_chunk_error($15,15551);
  // unreachable;
 }
 $16 = ((($15)) + 208|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 4;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $3;
  $21 = $5;
  (_png_crc_finish($20,$21)|0);
  $22 = $3;
  _png_chunk_benign_error($22,15530);
  STACKTOP = sp;return;
 }
 $23 = $4;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $4;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 256;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $3;
   $31 = $5;
   (_png_crc_finish($30,$31)|0);
   $32 = $3;
   _png_chunk_benign_error($32,15564);
   STACKTOP = sp;return;
  }
 }
 $33 = $5;
 $34 = ($33|0)!=(9);
 $35 = $3;
 if ($34) {
  $36 = $5;
  (_png_crc_finish($35,$36)|0);
  $37 = $3;
  _png_chunk_benign_error($37,15543);
  STACKTOP = sp;return;
 }
 _png_crc_read($35,$6,9);
 $38 = $3;
 $39 = (_png_crc_finish($38,0)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = HEAP8[$6>>0]|0;
 $42 = $41&255;
 $43 = $42 & 128;
 $44 = ($43|0)!=(0);
 $45 = HEAP8[$6>>0]|0;
 $46 = $45&255;
 $47 = $46 << 24;
 $48 = ((($6)) + 1|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = $50 << 16;
 $52 = (($47) + ($51))|0;
 $53 = ((($6)) + 2|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 << 8;
 $57 = (($52) + ($56))|0;
 $58 = ((($6)) + 3|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($57) + ($60))|0;
 if ($44) {
  $62 = $61 ^ -1;
  $63 = (($62) + 1)|0;
  $64 = $63 & 2147483647;
  $65 = (0 - ($64))|0;
  $66 = $65;
 } else {
  $66 = $61;
 }
 $7 = $66;
 $67 = ((($6)) + 4|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $69 & 128;
 $71 = ($70|0)!=(0);
 $72 = ((($6)) + 4|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 << 24;
 $76 = ((($6)) + 4|0);
 $77 = ((($76)) + 1|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 << 16;
 $81 = (($75) + ($80))|0;
 $82 = ((($6)) + 4|0);
 $83 = ((($82)) + 2|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = $85 << 8;
 $87 = (($81) + ($86))|0;
 $88 = ((($6)) + 4|0);
 $89 = ((($88)) + 3|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = (($87) + ($91))|0;
 if ($71) {
  $93 = $92 ^ -1;
  $94 = (($93) + 1)|0;
  $95 = $94 & 2147483647;
  $96 = (0 - ($95))|0;
  $97 = $96;
 } else {
  $97 = $92;
 }
 $8 = $97;
 $98 = ((($6)) + 8|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $9 = $100;
 $101 = $3;
 $102 = $4;
 $103 = $7;
 $104 = $8;
 $105 = $9;
 _png_set_oFFs($101,$102,$103,$104,$105);
 STACKTOP = sp;return;
}
function _png_handle_pCAL($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $16 = $3;
 $17 = ((($16)) + 208|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 1;
 $20 = ($19|0)==(0);
 $21 = $3;
 if ($20) {
  _png_chunk_error($21,15551);
  // unreachable;
 }
 $22 = ((($21)) + 208|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & 4;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $3;
  $27 = $5;
  (_png_crc_finish($26,$27)|0);
  $28 = $3;
  _png_chunk_benign_error($28,15530);
  STACKTOP = sp;return;
 }
 $29 = $4;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $4;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 & 1024;
  $35 = ($34|0)!=(0);
  if ($35) {
   $36 = $3;
   $37 = $5;
   (_png_crc_finish($36,$37)|0);
   $38 = $3;
   _png_chunk_benign_error($38,15564);
   STACKTOP = sp;return;
  }
 }
 $39 = $3;
 $40 = $5;
 $41 = (($40) + 1)|0;
 $42 = (_png_read_buffer($39,$41,2)|0);
 $10 = $42;
 $43 = $10;
 $44 = ($43|0)==(0|0);
 $45 = $3;
 if ($44) {
  $46 = $5;
  (_png_crc_finish($45,$46)|0);
  $47 = $3;
  _png_chunk_benign_error($47,15758);
  STACKTOP = sp;return;
 }
 $48 = $10;
 $49 = $5;
 _png_crc_read($45,$48,$49);
 $50 = $3;
 $51 = (_png_crc_finish($50,0)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  STACKTOP = sp;return;
 }
 $53 = $10;
 $54 = $5;
 $55 = (($53) + ($54)|0);
 HEAP8[$55>>0] = 0;
 $56 = $10;
 $11 = $56;
 while(1) {
  $57 = $11;
  $58 = HEAP8[$57>>0]|0;
  $59 = ($58<<24>>24)!=(0);
  if (!($59)) {
   break;
  }
  $60 = $11;
  $61 = ((($60)) + 1|0);
  $11 = $61;
 }
 $62 = $10;
 $63 = $5;
 $64 = (($62) + ($63)|0);
 $13 = $64;
 $65 = $13;
 $66 = $11;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = ($69|0)<=(12);
 if ($70) {
  $71 = $3;
  _png_chunk_benign_error($71,15543);
  STACKTOP = sp;return;
 }
 $72 = $11;
 $73 = ((($72)) + 1|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = $75 & 128;
 $77 = ($76|0)!=(0);
 $78 = $11;
 $79 = ((($78)) + 1|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = $81 << 24;
 $83 = $11;
 $84 = ((($83)) + 1|0);
 $85 = ((($84)) + 1|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&255;
 $88 = $87 << 16;
 $89 = (($82) + ($88))|0;
 $90 = $11;
 $91 = ((($90)) + 1|0);
 $92 = ((($91)) + 2|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $94 << 8;
 $96 = (($89) + ($95))|0;
 $97 = $11;
 $98 = ((($97)) + 1|0);
 $99 = ((($98)) + 3|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&255;
 $102 = (($96) + ($101))|0;
 if ($77) {
  $103 = $102 ^ -1;
  $104 = (($103) + 1)|0;
  $105 = $104 & 2147483647;
  $106 = (0 - ($105))|0;
  $107 = $106;
 } else {
  $107 = $102;
 }
 $6 = $107;
 $108 = $11;
 $109 = ((($108)) + 5|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110&255;
 $112 = $111 & 128;
 $113 = ($112|0)!=(0);
 $114 = $11;
 $115 = ((($114)) + 5|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $117 << 24;
 $119 = $11;
 $120 = ((($119)) + 5|0);
 $121 = ((($120)) + 1|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122&255;
 $124 = $123 << 16;
 $125 = (($118) + ($124))|0;
 $126 = $11;
 $127 = ((($126)) + 5|0);
 $128 = ((($127)) + 2|0);
 $129 = HEAP8[$128>>0]|0;
 $130 = $129&255;
 $131 = $130 << 8;
 $132 = (($125) + ($131))|0;
 $133 = $11;
 $134 = ((($133)) + 5|0);
 $135 = ((($134)) + 3|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136&255;
 $138 = (($132) + ($137))|0;
 if ($113) {
  $139 = $138 ^ -1;
  $140 = (($139) + 1)|0;
  $141 = $140 & 2147483647;
  $142 = (0 - ($141))|0;
  $143 = $142;
 } else {
  $143 = $138;
 }
 $7 = $143;
 $144 = $11;
 $145 = ((($144)) + 9|0);
 $146 = HEAP8[$145>>0]|0;
 $8 = $146;
 $147 = $11;
 $148 = ((($147)) + 10|0);
 $149 = HEAP8[$148>>0]|0;
 $9 = $149;
 $150 = $11;
 $151 = ((($150)) + 11|0);
 $12 = $151;
 $152 = $8;
 $153 = $152&255;
 $154 = ($153|0)==(0);
 if ($154) {
  $155 = $9;
  $156 = $155&255;
  $157 = ($156|0)!=(2);
  if (!($157)) {
   label = 22;
  }
 } else {
  label = 22;
 }
 do {
  if ((label|0) == 22) {
   $158 = $8;
   $159 = $158&255;
   $160 = ($159|0)==(1);
   if ($160) {
    $161 = $9;
    $162 = $161&255;
    $163 = ($162|0)!=(3);
    if ($163) {
     break;
    }
   }
   $164 = $8;
   $165 = $164&255;
   $166 = ($165|0)==(2);
   if ($166) {
    $167 = $9;
    $168 = $167&255;
    $169 = ($168|0)!=(3);
    if ($169) {
     break;
    }
   }
   $170 = $8;
   $171 = $170&255;
   $172 = ($171|0)==(3);
   if ($172) {
    $173 = $9;
    $174 = $173&255;
    $175 = ($174|0)!=(4);
    if ($175) {
     break;
    }
   }
   $177 = $8;
   $178 = $177&255;
   $179 = ($178|0)>=(4);
   if ($179) {
    $180 = $3;
    _png_chunk_benign_error($180,16085);
   }
   $181 = $12;
   $11 = $181;
   while(1) {
    $182 = $11;
    $183 = HEAP8[$182>>0]|0;
    $184 = ($183<<24>>24)!=(0);
    if (!($184)) {
     break;
    }
    $185 = $11;
    $186 = ((($185)) + 1|0);
    $11 = $186;
   }
   $187 = $3;
   $188 = $9;
   $189 = $188&255;
   $190 = $189<<2;
   $191 = (_png_malloc_warn($187,$190)|0);
   $14 = $191;
   $192 = $14;
   $193 = ($192|0)==(0|0);
   if ($193) {
    $194 = $3;
    _png_chunk_benign_error($194,15758);
    STACKTOP = sp;return;
   }
   $15 = 0;
   while(1) {
    $195 = $15;
    $196 = $9;
    $197 = $196&255;
    $198 = ($195|0)<($197|0);
    if (!($198)) {
     label = 45;
     break;
    }
    $199 = $11;
    $200 = ((($199)) + 1|0);
    $11 = $200;
    $201 = $11;
    $202 = $14;
    $203 = $15;
    $204 = (($202) + ($203<<2)|0);
    HEAP32[$204>>2] = $201;
    while(1) {
     $205 = $11;
     $206 = $13;
     $207 = ($205>>>0)<=($206>>>0);
     if (!($207)) {
      break;
     }
     $208 = $11;
     $209 = HEAP8[$208>>0]|0;
     $210 = $209&255;
     $211 = ($210|0)!=(0);
     if (!($211)) {
      break;
     }
     $212 = $11;
     $213 = ((($212)) + 1|0);
     $11 = $213;
    }
    $214 = $11;
    $215 = $13;
    $216 = ($214>>>0)>($215>>>0);
    if ($216) {
     label = 43;
     break;
    }
    $220 = $15;
    $221 = (($220) + 1)|0;
    $15 = $221;
   }
   if ((label|0) == 43) {
    $217 = $3;
    $218 = $14;
    _png_free($217,$218);
    $219 = $3;
    _png_chunk_benign_error($219,16112);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 45) {
    $222 = $3;
    $223 = $4;
    $224 = $10;
    $225 = $6;
    $226 = $7;
    $227 = $8;
    $228 = $227&255;
    $229 = $9;
    $230 = $229&255;
    $231 = $12;
    $232 = $14;
    _png_set_pCAL($222,$223,$224,$225,$226,$228,$230,$231,$232);
    $233 = $3;
    $234 = $14;
    _png_free($233,$234);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $176 = $3;
 _png_chunk_benign_error($176,16061);
 STACKTOP = sp;return;
}
function _png_handle_sCAL($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 208|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 $15 = $3;
 if ($14) {
  _png_chunk_error($15,15551);
  // unreachable;
 }
 $16 = ((($15)) + 208|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 4;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $3;
  $21 = $5;
  (_png_crc_finish($20,$21)|0);
  $22 = $3;
  _png_chunk_benign_error($22,15530);
  STACKTOP = sp;return;
 }
 $23 = $4;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $4;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 16384;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $3;
   $31 = $5;
   (_png_crc_finish($30,$31)|0);
   $32 = $3;
   _png_chunk_benign_error($32,15564);
   STACKTOP = sp;return;
  }
 }
 $33 = $5;
 $34 = ($33>>>0)<(4);
 $35 = $3;
 $36 = $5;
 if ($34) {
  (_png_crc_finish($35,$36)|0);
  $37 = $3;
  _png_chunk_benign_error($37,15543);
  STACKTOP = sp;return;
 }
 $38 = (($36) + 1)|0;
 $39 = (_png_read_buffer($35,$38,2)|0);
 $6 = $39;
 $40 = $6;
 $41 = ($40|0)==(0|0);
 $42 = $3;
 if ($41) {
  _png_chunk_benign_error($42,15758);
  $43 = $3;
  $44 = $5;
  (_png_crc_finish($43,$44)|0);
  STACKTOP = sp;return;
 }
 $45 = $6;
 $46 = $5;
 _png_crc_read($42,$45,$46);
 $47 = $6;
 $48 = $5;
 $49 = (($47) + ($48)|0);
 HEAP8[$49>>0] = 0;
 $50 = $3;
 $51 = (_png_crc_finish($50,0)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  STACKTOP = sp;return;
 }
 $53 = $6;
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = ($55|0)!=(1);
 if ($56) {
  $57 = $6;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)!=(2);
  if ($60) {
   $61 = $3;
   _png_chunk_benign_error($61,16125);
   STACKTOP = sp;return;
  }
 }
 HEAP32[$7>>2] = 1;
 HEAP32[$8>>2] = 0;
 $62 = $6;
 $63 = $5;
 $64 = (_png_check_fp_number($62,$63,$8,$7)|0);
 $65 = ($64|0)==(0);
 if (!($65)) {
  $66 = HEAP32[$7>>2]|0;
  $67 = $5;
  $68 = ($66>>>0)>=($67>>>0);
  if (!($68)) {
   $69 = $6;
   $70 = HEAP32[$7>>2]|0;
   $71 = (($70) + 1)|0;
   HEAP32[$7>>2] = $71;
   $72 = (($69) + ($70)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73&255;
   $75 = ($74|0)!=(0);
   if (!($75)) {
    $77 = HEAP32[$8>>2]|0;
    $78 = $77 & 392;
    $79 = ($78|0)==(264);
    $80 = $79&1;
    $81 = ($80|0)==(0);
    if ($81) {
     $82 = $3;
     _png_chunk_benign_error($82,16155);
     STACKTOP = sp;return;
    }
    $83 = HEAP32[$7>>2]|0;
    $9 = $83;
    HEAP32[$8>>2] = 0;
    $84 = $6;
    $85 = $5;
    $86 = (_png_check_fp_number($84,$85,$8,$7)|0);
    $87 = ($86|0)==(0);
    if (!($87)) {
     $88 = HEAP32[$7>>2]|0;
     $89 = $5;
     $90 = ($88|0)!=($89|0);
     if (!($90)) {
      $92 = HEAP32[$8>>2]|0;
      $93 = $92 & 392;
      $94 = ($93|0)==(264);
      $95 = $94&1;
      $96 = ($95|0)==(0);
      $97 = $3;
      if ($96) {
       _png_chunk_benign_error($97,16192);
       STACKTOP = sp;return;
      } else {
       $98 = $4;
       $99 = $6;
       $100 = HEAP8[$99>>0]|0;
       $101 = $100&255;
       $102 = $6;
       $103 = ((($102)) + 1|0);
       $104 = $6;
       $105 = $9;
       $106 = (($104) + ($105)|0);
       _png_set_sCAL_s($97,$98,$101,$103,$106);
       STACKTOP = sp;return;
      }
     }
    }
    $91 = $3;
    _png_chunk_benign_error($91,16174);
    STACKTOP = sp;return;
   }
  }
 }
 $76 = $3;
 _png_chunk_benign_error($76,16138);
 STACKTOP = sp;return;
}
function _png_handle_tIME($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $3;
  _png_chunk_error($13,15551);
  // unreachable;
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 512;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $3;
   $22 = $5;
   (_png_crc_finish($21,$22)|0);
   $23 = $3;
   _png_chunk_benign_error($23,15564);
   STACKTOP = sp;return;
  }
 }
 $24 = $3;
 $25 = ((($24)) + 208|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 4;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $3;
  $30 = ((($29)) + 208|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 | 8;
  HEAP32[$30>>2] = $32;
 }
 $33 = $5;
 $34 = ($33|0)!=(7);
 $35 = $3;
 if ($34) {
  $36 = $5;
  (_png_crc_finish($35,$36)|0);
  $37 = $3;
  _png_chunk_benign_error($37,15543);
  STACKTOP = sp;return;
 }
 _png_crc_read($35,$6,7);
 $38 = $3;
 $39 = (_png_crc_finish($38,0)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = ((($6)) + 6|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ((($7)) + 6|0);
 HEAP8[$43>>0] = $42;
 $44 = ((($6)) + 5|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = ((($7)) + 5|0);
 HEAP8[$46>>0] = $45;
 $47 = ((($6)) + 4|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = ((($7)) + 4|0);
 HEAP8[$49>>0] = $48;
 $50 = ((($6)) + 3|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = ((($7)) + 3|0);
 HEAP8[$52>>0] = $51;
 $53 = ((($6)) + 2|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = ((($7)) + 2|0);
 HEAP8[$55>>0] = $54;
 $56 = HEAP8[$6>>0]|0;
 $57 = $56&255;
 $58 = $57 << 8;
 $59 = ((($6)) + 1|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = (($58) + ($61))|0;
 $63 = $62&65535;
 HEAP16[$7>>1] = $63;
 $64 = $3;
 $65 = $4;
 _png_set_tIME($64,$65,$7);
 STACKTOP = sp;return;
}
function _png_handle_tEXt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = 0;
 $11 = $3;
 $12 = ((($11)) + 724|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $3;
  $16 = ((($15)) + 724|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(1);
  $19 = $3;
  if ($18) {
   $20 = $5;
   (_png_crc_finish($19,$20)|0);
   STACKTOP = sp;return;
  }
  $21 = ((($19)) + 724|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + -1)|0;
  HEAP32[$21>>2] = $23;
  $24 = ($23|0)==(1);
  if ($24) {
   $25 = $3;
   $26 = $5;
   (_png_crc_finish($25,$26)|0);
   $27 = $3;
   _png_chunk_benign_error($27,16212);
   STACKTOP = sp;return;
  }
 }
 $28 = $3;
 $29 = ((($28)) + 208|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 1;
 $32 = ($31|0)==(0);
 $33 = $3;
 if ($32) {
  _png_chunk_error($33,15551);
  // unreachable;
 }
 $34 = ((($33)) + 208|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 4;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $3;
  $39 = ((($38)) + 208|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 | 8;
  HEAP32[$39>>2] = $41;
 }
 $42 = $3;
 $43 = $5;
 $44 = (($43) + 1)|0;
 $45 = (_png_read_buffer($42,$44,1)|0);
 $7 = $45;
 $46 = $7;
 $47 = ($46|0)==(0|0);
 $48 = $3;
 if ($47) {
  _png_chunk_benign_error($48,15758);
  STACKTOP = sp;return;
 }
 $49 = $7;
 $50 = $5;
 _png_crc_read($48,$49,$50);
 $51 = $3;
 $52 = $10;
 $53 = (_png_crc_finish($51,$52)|0);
 $54 = ($53|0)!=(0);
 if ($54) {
  STACKTOP = sp;return;
 }
 $55 = $7;
 $8 = $55;
 $56 = $8;
 $57 = $5;
 $58 = (($56) + ($57)|0);
 HEAP8[$58>>0] = 0;
 $59 = $8;
 $9 = $59;
 while(1) {
  $60 = $9;
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)!=(0);
  $63 = $9;
  if (!($62)) {
   break;
  }
  $64 = ((($63)) + 1|0);
  $9 = $64;
 }
 $65 = $8;
 $66 = $5;
 $67 = (($65) + ($66)|0);
 $68 = ($63|0)!=($67|0);
 if ($68) {
  $69 = $9;
  $70 = ((($69)) + 1|0);
  $9 = $70;
 }
 HEAP32[$6>>2] = -1;
 $71 = $8;
 $72 = ((($6)) + 4|0);
 HEAP32[$72>>2] = $71;
 $73 = ((($6)) + 20|0);
 HEAP32[$73>>2] = 0;
 $74 = ((($6)) + 24|0);
 HEAP32[$74>>2] = 0;
 $75 = ((($6)) + 16|0);
 HEAP32[$75>>2] = 0;
 $76 = $9;
 $77 = ((($6)) + 8|0);
 HEAP32[$77>>2] = $76;
 $78 = $9;
 $79 = (_strlen($78)|0);
 $80 = ((($6)) + 12|0);
 HEAP32[$80>>2] = $79;
 $81 = $3;
 $82 = $4;
 $83 = (_png_set_text_2($81,$82,$6,1)|0);
 $84 = ($83|0)!=(0);
 if (!($84)) {
  STACKTOP = sp;return;
 }
 $85 = $3;
 _png_warning($85,16236);
 STACKTOP = sp;return;
}
function _png_handle_zTXt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp + 28|0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $11 = $3;
 $12 = ((($11)) + 724|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $3;
  $16 = ((($15)) + 724|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(1);
  $19 = $3;
  if ($18) {
   $20 = $5;
   (_png_crc_finish($19,$20)|0);
   STACKTOP = sp;return;
  }
  $21 = ((($19)) + 724|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + -1)|0;
  HEAP32[$21>>2] = $23;
  $24 = ($23|0)==(1);
  if ($24) {
   $25 = $3;
   $26 = $5;
   (_png_crc_finish($25,$26)|0);
   $27 = $3;
   _png_chunk_benign_error($27,16212);
   STACKTOP = sp;return;
  }
 }
 $28 = $3;
 $29 = ((($28)) + 208|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 1;
 $32 = ($31|0)==(0);
 $33 = $3;
 if ($32) {
  _png_chunk_error($33,15551);
  // unreachable;
 }
 $34 = ((($33)) + 208|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 4;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $3;
  $39 = ((($38)) + 208|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 | 8;
  HEAP32[$39>>2] = $41;
 }
 $42 = $3;
 $43 = $5;
 $44 = (_png_read_buffer($42,$43,2)|0);
 $7 = $44;
 $45 = $7;
 $46 = ($45|0)==(0|0);
 $47 = $3;
 if ($46) {
  $48 = $5;
  (_png_crc_finish($47,$48)|0);
  $49 = $3;
  _png_chunk_benign_error($49,15758);
  STACKTOP = sp;return;
 }
 $50 = $7;
 $51 = $5;
 _png_crc_read($47,$50,$51);
 $52 = $3;
 $53 = (_png_crc_finish($52,0)|0);
 $54 = ($53|0)!=(0);
 if ($54) {
  STACKTOP = sp;return;
 }
 $8 = 0;
 while(1) {
  $55 = $8;
  $56 = $5;
  $57 = ($55>>>0)<($56>>>0);
  if (!($57)) {
   break;
  }
  $58 = $7;
  $59 = $8;
  $60 = (($58) + ($59)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = ($62|0)!=(0);
  if (!($63)) {
   break;
  }
  $64 = $8;
  $65 = (($64) + 1)|0;
  $8 = $65;
 }
 $66 = $8;
 $67 = ($66>>>0)>(79);
 $68 = $8;
 $69 = ($68>>>0)<(1);
 $or$cond = $67 | $69;
 do {
  if ($or$cond) {
   $6 = 15805;
  } else {
   $70 = $8;
   $71 = (($70) + 3)|0;
   $72 = $5;
   $73 = ($71>>>0)>($72>>>0);
   if ($73) {
    $6 = 15772;
    break;
   }
   $74 = $7;
   $75 = $8;
   $76 = (($75) + 1)|0;
   $77 = (($74) + ($76)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = ($79|0)!=(0);
   if ($80) {
    $6 = 16278;
    break;
   }
   HEAP32[$9>>2] = -1;
   $81 = $3;
   $82 = $5;
   $83 = $8;
   $84 = (($83) + 2)|0;
   $85 = (_png_decompress_chunk($81,$82,$84,$9,1)|0);
   $86 = ($85|0)==(1);
   $87 = $3;
   if (!($86)) {
    $112 = ((($87)) + 224|0);
    $113 = ((($112)) + 24|0);
    $114 = HEAP32[$113>>2]|0;
    $6 = $114;
    break;
   }
   $88 = ((($87)) + 756|0);
   $89 = HEAP32[$88>>2]|0;
   $7 = $89;
   $90 = $7;
   $91 = HEAP32[$9>>2]|0;
   $92 = $8;
   $93 = (($92) + 2)|0;
   $94 = (($91) + ($93))|0;
   $95 = (($90) + ($94)|0);
   HEAP8[$95>>0] = 0;
   HEAP32[$10>>2] = 0;
   $96 = $7;
   $97 = ((($10)) + 4|0);
   HEAP32[$97>>2] = $96;
   $98 = $7;
   $99 = $8;
   $100 = (($98) + ($99)|0);
   $101 = ((($100)) + 2|0);
   $102 = ((($10)) + 8|0);
   HEAP32[$102>>2] = $101;
   $103 = HEAP32[$9>>2]|0;
   $104 = ((($10)) + 12|0);
   HEAP32[$104>>2] = $103;
   $105 = ((($10)) + 16|0);
   HEAP32[$105>>2] = 0;
   $106 = ((($10)) + 20|0);
   HEAP32[$106>>2] = 0;
   $107 = ((($10)) + 24|0);
   HEAP32[$107>>2] = 0;
   $108 = $3;
   $109 = $4;
   $110 = (_png_set_text_2($108,$109,$10,1)|0);
   $111 = ($110|0)!=(0);
   if ($111) {
    $6 = 16303;
   }
  }
 } while(0);
 $115 = $6;
 $116 = ($115|0)!=(0|0);
 if (!($116)) {
  STACKTOP = sp;return;
 }
 $117 = $3;
 $118 = $6;
 _png_chunk_benign_error($117,$118);
 STACKTOP = sp;return;
}
function _png_decompress_chunk($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = -1;
 $18 = $6;
 $19 = ((($18)) + 728|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)>(0);
 if ($21) {
  $22 = $6;
  $23 = ((($22)) + 728|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $11;
  $26 = ($24>>>0)<($25>>>0);
  if ($26) {
   $27 = $6;
   $28 = ((($27)) + 728|0);
   $29 = HEAP32[$28>>2]|0;
   $11 = $29;
  }
 }
 $30 = $11;
 $31 = $8;
 $32 = $10;
 $33 = ($32|0)!=(0);
 $34 = $33&1;
 $35 = (($31) + ($34))|0;
 $36 = ($30>>>0)>=($35>>>0);
 if (!($36)) {
  $160 = $6;
  _png_zstream_error($160,-4);
  $5 = -4;
  $161 = $5;
  STACKTOP = sp;return ($161|0);
 }
 $37 = $8;
 $38 = $10;
 $39 = ($38|0)!=(0);
 $40 = $39&1;
 $41 = (($37) + ($40))|0;
 $42 = $11;
 $43 = (($42) - ($41))|0;
 $11 = $43;
 $44 = $11;
 $45 = $9;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($44>>>0)<($46>>>0);
 if ($47) {
  $48 = $11;
  $49 = $9;
  HEAP32[$49>>2] = $48;
 }
 $50 = $6;
 $51 = $6;
 $52 = ((($51)) + 376|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (_png_inflate_claim($50,$53)|0);
 $12 = $54;
 $55 = $12;
 $56 = ($55|0)==(0);
 if ($56) {
  $57 = $7;
  $58 = $8;
  $59 = (($57) - ($58))|0;
  HEAP32[$13>>2] = $59;
  $60 = $6;
  $61 = $6;
  $62 = ((($61)) + 376|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $6;
  $65 = ((($64)) + 756|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $8;
  $68 = (($66) + ($67)|0);
  $69 = $9;
  $70 = (_png_inflate($60,$63,1,$68,$13,0,$69)|0);
  $12 = $70;
  $71 = $12;
  $72 = ($71|0)==(1);
  do {
   if ($72) {
    $73 = $6;
    $74 = ((($73)) + 224|0);
    $75 = (_inflateReset($74)|0);
    $76 = ($75|0)==(0);
    if (!($76)) {
     $149 = $6;
     $150 = $12;
     _png_zstream_error($149,$150);
     $151 = $12;
     $152 = ($151|0)==(1);
     if (!($152)) {
      break;
     }
     $12 = -7;
     break;
    }
    $77 = $9;
    $78 = HEAP32[$77>>2]|0;
    $14 = $78;
    $79 = $8;
    $80 = $14;
    $81 = (($79) + ($80))|0;
    $82 = $10;
    $83 = ($82|0)!=(0);
    $84 = $83&1;
    $85 = (($81) + ($84))|0;
    $15 = $85;
    $86 = $6;
    $87 = $15;
    $88 = (_png_malloc_base($86,$87)|0);
    $16 = $88;
    $89 = $16;
    $90 = ($89|0)!=(0|0);
    if (!($90)) {
     $12 = -4;
     $148 = $6;
     _png_zstream_error($148,-4);
     break;
    }
    $91 = $6;
    $92 = $6;
    $93 = ((($92)) + 376|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $6;
    $96 = ((($95)) + 756|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $8;
    $99 = (($97) + ($98)|0);
    $100 = $16;
    $101 = $8;
    $102 = (($100) + ($101)|0);
    $103 = $9;
    $104 = (_png_inflate($91,$94,1,$99,$13,$102,$103)|0);
    $12 = $104;
    $105 = $12;
    $106 = ($105|0)==(1);
    do {
     if ($106) {
      $107 = $14;
      $108 = $9;
      $109 = HEAP32[$108>>2]|0;
      $110 = ($107|0)==($109|0);
      if (!($110)) {
       $12 = -7;
       break;
      }
      $111 = $10;
      $112 = ($111|0)!=(0);
      if ($112) {
       $113 = $16;
       $114 = $8;
       $115 = $9;
       $116 = HEAP32[$115>>2]|0;
       $117 = (($114) + ($116))|0;
       $118 = (($113) + ($117)|0);
       HEAP8[$118>>0] = 0;
      }
      $119 = $8;
      $120 = ($119>>>0)>(0);
      if ($120) {
       $121 = $16;
       $122 = $6;
       $123 = ((($122)) + 756|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = $8;
       _memcpy(($121|0),($124|0),($125|0))|0;
      }
      $126 = $6;
      $127 = ((($126)) + 756|0);
      $128 = HEAP32[$127>>2]|0;
      $17 = $128;
      $129 = $16;
      $130 = $6;
      $131 = ((($130)) + 756|0);
      HEAP32[$131>>2] = $129;
      $132 = $15;
      $133 = $6;
      $134 = ((($133)) + 760|0);
      HEAP32[$134>>2] = $132;
      $135 = $17;
      $16 = $135;
     } else {
      $136 = $12;
      $137 = ($136|0)==(0);
      if ($137) {
       $12 = -7;
      }
     }
    } while(0);
    $138 = $6;
    $139 = $16;
    _png_free($138,$139);
    $140 = $12;
    $141 = ($140|0)==(1);
    if ($141) {
     $142 = $7;
     $143 = $8;
     $144 = (($142) - ($143))|0;
     $145 = HEAP32[$13>>2]|0;
     $146 = ($144|0)!=($145|0);
     if ($146) {
      $147 = $6;
      _png_chunk_benign_error($147,15736);
     }
    }
   } else {
    $153 = $12;
    $154 = ($153|0)==(0);
    if ($154) {
     $12 = -7;
    }
   }
  } while(0);
  $155 = $6;
  $156 = ((($155)) + 220|0);
  HEAP32[$156>>2] = 0;
 } else {
  $157 = $12;
  $158 = ($157|0)==(1);
  if ($158) {
   $12 = -7;
  }
 }
 $159 = $12;
 $5 = $159;
 $161 = $5;
 STACKTOP = sp;return ($161|0);
}
function _png_inflate($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $19 = sp + 48|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $20 = $8;
 $21 = ((($20)) + 220|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $9;
 $24 = ($22|0)==($23|0);
 if (!($24)) {
  $128 = $8;
  $129 = ((($128)) + 224|0);
  $130 = ((($129)) + 24|0);
  HEAP32[$130>>2] = 15851;
  $7 = -2;
  $131 = $7;
  STACKTOP = sp;return ($131|0);
 }
 $25 = $14;
 $26 = HEAP32[$25>>2]|0;
 $16 = $26;
 $27 = $12;
 $28 = HEAP32[$27>>2]|0;
 $17 = $28;
 $29 = $11;
 $30 = $8;
 $31 = ((($30)) + 224|0);
 HEAP32[$31>>2] = $29;
 $32 = $8;
 $33 = ((($32)) + 224|0);
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = $8;
 $36 = ((($35)) + 224|0);
 $37 = ((($36)) + 16|0);
 HEAP32[$37>>2] = 0;
 $38 = $13;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $13;
  $41 = $8;
  $42 = ((($41)) + 224|0);
  $43 = ((($42)) + 12|0);
  HEAP32[$43>>2] = $40;
 }
 while(1) {
  $44 = $8;
  $45 = ((($44)) + 224|0);
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $17;
  $49 = (($48) + ($47))|0;
  $17 = $49;
  $18 = -1;
  $50 = $17;
  $51 = $18;
  $52 = ($50>>>0)<($51>>>0);
  if ($52) {
   $53 = $17;
   $18 = $53;
  }
  $54 = $18;
  $55 = $17;
  $56 = (($55) - ($54))|0;
  $17 = $56;
  $57 = $18;
  $58 = $8;
  $59 = ((($58)) + 224|0);
  $60 = ((($59)) + 4|0);
  HEAP32[$60>>2] = $57;
  $61 = $8;
  $62 = ((($61)) + 224|0);
  $63 = ((($62)) + 16|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $16;
  $66 = (($65) + ($64))|0;
  $16 = $66;
  $18 = -1;
  $67 = $13;
  $68 = ($67|0)==(0|0);
  if ($68) {
   $69 = $8;
   $70 = ((($69)) + 224|0);
   $71 = ((($70)) + 12|0);
   HEAP32[$71>>2] = $19;
   $72 = $18;
   $73 = (1024)<($72>>>0);
   if ($73) {
    $18 = 1024;
   }
  }
  $74 = $16;
  $75 = $18;
  $76 = ($74>>>0)<($75>>>0);
  if ($76) {
   $77 = $16;
   $18 = $77;
  }
  $78 = $18;
  $79 = $8;
  $80 = ((($79)) + 224|0);
  $81 = ((($80)) + 16|0);
  HEAP32[$81>>2] = $78;
  $82 = $18;
  $83 = $16;
  $84 = (($83) - ($82))|0;
  $16 = $84;
  $85 = $8;
  $86 = ((($85)) + 224|0);
  $87 = $16;
  $88 = ($87>>>0)>(0);
  if ($88) {
   $92 = 0;
  } else {
   $89 = $10;
   $90 = ($89|0)!=(0);
   $91 = $90 ? 4 : 2;
   $92 = $91;
  }
  $93 = (_inflate($86,$92)|0);
  $15 = $93;
  $94 = $15;
  $95 = ($94|0)==(0);
  if (!($95)) {
   break;
  }
 }
 $96 = $13;
 $97 = ($96|0)==(0|0);
 if ($97) {
  $98 = $8;
  $99 = ((($98)) + 224|0);
  $100 = ((($99)) + 12|0);
  HEAP32[$100>>2] = 0;
 }
 $101 = $8;
 $102 = ((($101)) + 224|0);
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $17;
 $106 = (($105) + ($104))|0;
 $17 = $106;
 $107 = $8;
 $108 = ((($107)) + 224|0);
 $109 = ((($108)) + 16|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $16;
 $112 = (($111) + ($110))|0;
 $16 = $112;
 $113 = $16;
 $114 = ($113>>>0)>(0);
 if ($114) {
  $115 = $16;
  $116 = $14;
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) - ($115))|0;
  HEAP32[$116>>2] = $118;
 }
 $119 = $17;
 $120 = ($119>>>0)>(0);
 if ($120) {
  $121 = $17;
  $122 = $12;
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) - ($121))|0;
  HEAP32[$122>>2] = $124;
 }
 $125 = $8;
 $126 = $15;
 _png_zstream_error($125,$126);
 $127 = $15;
 $7 = $127;
 $131 = $7;
 STACKTOP = sp;return ($131|0);
}
function _png_handle_iTXt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $12 = sp + 28|0;
 $13 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $14 = $3;
 $15 = ((($14)) + 724|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $3;
  $19 = ((($18)) + 724|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(1);
  $22 = $3;
  if ($21) {
   $23 = $5;
   (_png_crc_finish($22,$23)|0);
   STACKTOP = sp;return;
  }
  $24 = ((($22)) + 724|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + -1)|0;
  HEAP32[$24>>2] = $26;
  $27 = ($26|0)==(1);
  if ($27) {
   $28 = $3;
   $29 = $5;
   (_png_crc_finish($28,$29)|0);
   $30 = $3;
   _png_chunk_benign_error($30,16212);
   STACKTOP = sp;return;
  }
 }
 $31 = $3;
 $32 = ((($31)) + 208|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 & 1;
 $35 = ($34|0)==(0);
 $36 = $3;
 if ($35) {
  _png_chunk_error($36,15551);
  // unreachable;
 }
 $37 = ((($36)) + 208|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & 4;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $3;
  $42 = ((($41)) + 208|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 | 8;
  HEAP32[$42>>2] = $44;
 }
 $45 = $3;
 $46 = $5;
 $47 = (($46) + 1)|0;
 $48 = (_png_read_buffer($45,$47,1)|0);
 $7 = $48;
 $49 = $7;
 $50 = ($49|0)==(0|0);
 $51 = $3;
 if ($50) {
  $52 = $5;
  (_png_crc_finish($51,$52)|0);
  $53 = $3;
  _png_chunk_benign_error($53,15758);
  STACKTOP = sp;return;
 }
 $54 = $7;
 $55 = $5;
 _png_crc_read($51,$54,$55);
 $56 = $3;
 $57 = (_png_crc_finish($56,0)|0);
 $58 = ($57|0)!=(0);
 if ($58) {
  STACKTOP = sp;return;
 }
 $8 = 0;
 while(1) {
  $59 = $8;
  $60 = $5;
  $61 = ($59>>>0)<($60>>>0);
  if (!($61)) {
   break;
  }
  $62 = $7;
  $63 = $8;
  $64 = (($62) + ($63)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = ($66|0)!=(0);
  if (!($67)) {
   break;
  }
  $68 = $8;
  $69 = (($68) + 1)|0;
  $8 = $69;
 }
 $70 = $8;
 $71 = ($70>>>0)>(79);
 $72 = $8;
 $73 = ($72>>>0)<(1);
 $or$cond = $71 | $73;
 L28: do {
  if ($or$cond) {
   $6 = 15805;
  } else {
   $74 = $8;
   $75 = (($74) + 5)|0;
   $76 = $5;
   $77 = ($75>>>0)>($76>>>0);
   if ($77) {
    $6 = 15772;
    break;
   }
   $78 = $7;
   $79 = $8;
   $80 = (($79) + 1)|0;
   $81 = (($78) + ($80)|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = ($83|0)==(0);
   do {
    if (!($84)) {
     $85 = $7;
     $86 = $8;
     $87 = (($86) + 1)|0;
     $88 = (($85) + ($87)|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $89&255;
     $91 = ($90|0)==(1);
     if ($91) {
      $92 = $7;
      $93 = $8;
      $94 = (($93) + 2)|0;
      $95 = (($92) + ($94)|0);
      $96 = HEAP8[$95>>0]|0;
      $97 = $96&255;
      $98 = ($97|0)==(0);
      if ($98) {
       break;
      }
     }
     $6 = 16323;
     break L28;
    }
   } while(0);
   $99 = $7;
   $100 = $8;
   $101 = (($100) + 1)|0;
   $102 = (($99) + ($101)|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = ($104|0)!=(0);
   $106 = $105&1;
   $9 = $106;
   HEAP32[$12>>2] = 0;
   $107 = $8;
   $108 = (($107) + 3)|0;
   $8 = $108;
   $109 = $8;
   $10 = $109;
   while(1) {
    $110 = $8;
    $111 = $5;
    $112 = ($110>>>0)<($111>>>0);
    if (!($112)) {
     break;
    }
    $113 = $7;
    $114 = $8;
    $115 = (($113) + ($114)|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = ($117|0)!=(0);
    if (!($118)) {
     break;
    }
    $119 = $8;
    $120 = (($119) + 1)|0;
    $8 = $120;
   }
   $121 = $8;
   $122 = (($121) + 1)|0;
   $8 = $122;
   $11 = $122;
   while(1) {
    $123 = $8;
    $124 = $5;
    $125 = ($123>>>0)<($124>>>0);
    if (!($125)) {
     break;
    }
    $126 = $7;
    $127 = $8;
    $128 = (($126) + ($127)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130|0)!=(0);
    if (!($131)) {
     break;
    }
    $132 = $8;
    $133 = (($132) + 1)|0;
    $8 = $133;
   }
   $134 = $8;
   $135 = (($134) + 1)|0;
   $8 = $135;
   $136 = $9;
   $137 = ($136|0)==(0);
   if ($137) {
    $138 = $8;
    $139 = $5;
    $140 = ($138>>>0)<=($139>>>0);
    if ($140) {
     $141 = $5;
     $142 = $8;
     $143 = (($141) - ($142))|0;
     HEAP32[$12>>2] = $143;
    } else {
     label = 35;
    }
   } else {
    label = 35;
   }
   do {
    if ((label|0) == 35) {
     $144 = $9;
     $145 = ($144|0)!=(0);
     if ($145) {
      $146 = $8;
      $147 = $5;
      $148 = ($146>>>0)<($147>>>0);
      if ($148) {
       HEAP32[$12>>2] = -1;
       $149 = $3;
       $150 = $5;
       $151 = $8;
       $152 = (_png_decompress_chunk($149,$150,$151,$12,1)|0);
       $153 = ($152|0)==(1);
       $154 = $3;
       if ($153) {
        $155 = ((($154)) + 756|0);
        $156 = HEAP32[$155>>2]|0;
        $7 = $156;
        break;
       } else {
        $157 = ((($154)) + 224|0);
        $158 = ((($157)) + 24|0);
        $159 = HEAP32[$158>>2]|0;
        $6 = $159;
        break;
       }
      }
     }
     $6 = 15772;
    }
   } while(0);
   $160 = $6;
   $161 = ($160|0)==(0|0);
   if ($161) {
    $162 = $7;
    $163 = HEAP32[$12>>2]|0;
    $164 = $8;
    $165 = (($163) + ($164))|0;
    $166 = (($162) + ($165)|0);
    HEAP8[$166>>0] = 0;
    $167 = $9;
    $168 = ($167|0)==(0);
    $$sink = $168 ? 1 : 2;
    HEAP32[$13>>2] = $$sink;
    $169 = $7;
    $170 = ((($13)) + 4|0);
    HEAP32[$170>>2] = $169;
    $171 = $7;
    $172 = $10;
    $173 = (($171) + ($172)|0);
    $174 = ((($13)) + 20|0);
    HEAP32[$174>>2] = $173;
    $175 = $7;
    $176 = $11;
    $177 = (($175) + ($176)|0);
    $178 = ((($13)) + 24|0);
    HEAP32[$178>>2] = $177;
    $179 = $7;
    $180 = $8;
    $181 = (($179) + ($180)|0);
    $182 = ((($13)) + 8|0);
    HEAP32[$182>>2] = $181;
    $183 = ((($13)) + 12|0);
    HEAP32[$183>>2] = 0;
    $184 = HEAP32[$12>>2]|0;
    $185 = ((($13)) + 16|0);
    HEAP32[$185>>2] = $184;
    $186 = $3;
    $187 = $4;
    $188 = (_png_set_text_2($186,$187,$13,1)|0);
    $189 = ($188|0)!=(0);
    if ($189) {
     $6 = 16303;
    }
   }
  }
 } while(0);
 $190 = $6;
 $191 = ($190|0)!=(0|0);
 if (!($191)) {
  STACKTOP = sp;return;
 }
 $192 = $3;
 $193 = $6;
 _png_chunk_benign_error($192,$193);
 STACKTOP = sp;return;
}
function _png_handle_unknown($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $10 = $4;
 $11 = ((($10)) + 652|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 L1: do {
  if ($13) {
   $14 = $4;
   $15 = $6;
   $16 = (_png_cache_unknown_chunk($14,$15)|0);
   $17 = ($16|0)!=(0);
   if (!($17)) {
    $7 = 1;
    break;
   }
   $18 = $4;
   $19 = ((($18)) + 652|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $4;
   $22 = $4;
   $23 = ((($22)) + 732|0);
   $24 = (FUNCTION_TABLE_iii[$20 & 63]($21,$23)|0);
   $9 = $24;
   $25 = $9;
   $26 = ($25|0)<(0);
   if ($26) {
    $27 = $4;
    _png_chunk_error($27,16344);
    // unreachable;
   }
   $28 = $9;
   $29 = ($28|0)==(0);
   if (!($29)) {
    $8 = 1;
    $7 = 1;
    break;
   }
   $30 = $7;
   $31 = ($30|0)<(2);
   if ($31) {
    $32 = $4;
    $33 = ((($32)) + 656|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)<(2);
    if ($35) {
     $36 = $4;
     _png_chunk_warning($36,16364);
     $37 = $4;
     _png_app_warning($37,16386);
    }
    $7 = 2;
   }
  } else {
   $38 = $7;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = $4;
    $41 = ((($40)) + 656|0);
    $42 = HEAP32[$41>>2]|0;
    $7 = $42;
   }
   $43 = $7;
   $44 = ($43|0)==(3);
   do {
    if (!($44)) {
     $45 = $7;
     $46 = ($45|0)==(2);
     if ($46) {
      $47 = $4;
      $48 = ((($47)) + 376|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = $49 >>> 29;
      $51 = 1 & $50;
      $52 = ($51|0)!=(0);
      if ($52) {
       break;
      }
     }
     $57 = $4;
     $58 = $6;
     (_png_crc_finish($57,$58)|0);
     break L1;
    }
   } while(0);
   $53 = $4;
   $54 = $6;
   $55 = (_png_cache_unknown_chunk($53,$54)|0);
   $56 = ($55|0)==(0);
   if ($56) {
    $7 = 1;
   }
  }
 } while(0);
 $59 = $7;
 $60 = ($59|0)==(3);
 if ($60) {
  label = 23;
 } else {
  $61 = $7;
  $62 = ($61|0)==(2);
  if ($62) {
   $63 = $4;
   $64 = ((($63)) + 376|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 >>> 29;
   $67 = 1 & $66;
   $68 = ($67|0)!=(0);
   if ($68) {
    label = 23;
   }
  }
 }
 L31: do {
  if ((label|0) == 23) {
   $69 = $4;
   $70 = ((($69)) + 724|0);
   $71 = HEAP32[$70>>2]|0;
   switch ($71|0) {
   case 1:  {
    break L31;
    break;
   }
   case 2:  {
    $72 = $4;
    $73 = ((($72)) + 724|0);
    HEAP32[$73>>2] = 1;
    $74 = $4;
    _png_chunk_benign_error($74,16212);
    break L31;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    $75 = $4;
    $76 = ((($75)) + 724|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + -1)|0;
    HEAP32[$76>>2] = $78;
   }
   }
   $79 = $4;
   $80 = $5;
   $81 = $4;
   $82 = ((($81)) + 732|0);
   _png_set_unknown_chunks($79,$80,$82,1);
   $8 = 1;
  }
 } while(0);
 $83 = $4;
 $84 = ((($83)) + 732|0);
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)!=(0|0);
 if ($87) {
  $88 = $4;
  $89 = $4;
  $90 = ((($89)) + 732|0);
  $91 = ((($90)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  _png_free($88,$92);
 }
 $93 = $4;
 $94 = ((($93)) + 732|0);
 $95 = ((($94)) + 8|0);
 HEAP32[$95>>2] = 0;
 $96 = $8;
 $97 = ($96|0)==(0);
 if (!($97)) {
  STACKTOP = sp;return;
 }
 $98 = $4;
 $99 = ((($98)) + 376|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $100 >>> 29;
 $102 = 1 & $101;
 $103 = ($102|0)!=(0);
 if ($103) {
  STACKTOP = sp;return;
 } else {
  $104 = $4;
  _png_chunk_error($104,16462);
  // unreachable;
 }
}
function _png_cache_unknown_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = -1;
 $6 = $3;
 $7 = ((($6)) + 732|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $3;
  $12 = $3;
  $13 = ((($12)) + 732|0);
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  _png_free($11,$15);
  $16 = $3;
  $17 = ((($16)) + 732|0);
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = 0;
 }
 $19 = $3;
 $20 = ((($19)) + 728|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21>>>0)>(0);
 if ($22) {
  $23 = $3;
  $24 = ((($23)) + 728|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $5;
  $27 = ($25>>>0)<($26>>>0);
  if ($27) {
   $28 = $3;
   $29 = ((($28)) + 728|0);
   $30 = HEAP32[$29>>2]|0;
   $5 = $30;
  }
 }
 $31 = $4;
 $32 = $5;
 $33 = ($31>>>0)<=($32>>>0);
 if ($33) {
  $34 = $3;
  $35 = ((($34)) + 376|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 >>> 24;
  $38 = $37 & 255;
  $39 = $38&255;
  $40 = $3;
  $41 = ((($40)) + 732|0);
  HEAP8[$41>>0] = $39;
  $42 = $3;
  $43 = ((($42)) + 376|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 >>> 16;
  $46 = $45 & 255;
  $47 = $46&255;
  $48 = $3;
  $49 = ((($48)) + 732|0);
  $50 = ((($49)) + 1|0);
  HEAP8[$50>>0] = $47;
  $51 = $3;
  $52 = ((($51)) + 376|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53 >>> 8;
  $55 = $54 & 255;
  $56 = $55&255;
  $57 = $3;
  $58 = ((($57)) + 732|0);
  $59 = ((($58)) + 2|0);
  HEAP8[$59>>0] = $56;
  $60 = $3;
  $61 = ((($60)) + 376|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $62 & 255;
  $64 = $63&255;
  $65 = $3;
  $66 = ((($65)) + 732|0);
  $67 = ((($66)) + 3|0);
  HEAP8[$67>>0] = $64;
  $68 = $3;
  $69 = ((($68)) + 732|0);
  $70 = ((($69)) + 4|0);
  HEAP8[$70>>0] = 0;
  $71 = $4;
  $72 = $3;
  $73 = ((($72)) + 732|0);
  $74 = ((($73)) + 12|0);
  HEAP32[$74>>2] = $71;
  $75 = $3;
  $76 = ((($75)) + 208|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77&255;
  $79 = $3;
  $80 = ((($79)) + 732|0);
  $81 = ((($80)) + 16|0);
  HEAP8[$81>>0] = $78;
  $82 = $4;
  $83 = ($82|0)==(0);
  $84 = $3;
  if ($83) {
   $$sink = 0;$$sink3 = $84;
  } else {
   $85 = $4;
   $86 = (_png_malloc_warn($84,$85)|0);
   $87 = $3;
   $$sink = $86;$$sink3 = $87;
  }
  $88 = ((($$sink3)) + 732|0);
  $89 = ((($88)) + 8|0);
  HEAP32[$89>>2] = $$sink;
 }
 $90 = $3;
 $91 = ((($90)) + 732|0);
 $92 = ((($91)) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(0|0);
 $95 = $4;
 $96 = ($95>>>0)>(0);
 $or$cond = $94 & $96;
 if ($or$cond) {
  $97 = $3;
  $98 = $4;
  (_png_crc_finish($97,$98)|0);
  $99 = $3;
  _png_chunk_benign_error($99,16487);
  $2 = 0;
  $109 = $2;
  STACKTOP = sp;return ($109|0);
 }
 $100 = $4;
 $101 = ($100>>>0)>(0);
 if ($101) {
  $102 = $3;
  $103 = $3;
  $104 = ((($103)) + 732|0);
  $105 = ((($104)) + 8|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $4;
  _png_crc_read($102,$106,$107);
 }
 $108 = $3;
 (_png_crc_finish($108,0)|0);
 $2 = 1;
 $109 = $2;
 STACKTOP = sp;return ($109|0);
}
function _png_combine_row($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $27 = $3;
 $28 = ((($27)) + 435|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $6 = $30;
 $31 = $3;
 $32 = ((($31)) + 384|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 1|0);
 $7 = $34;
 $35 = $3;
 $36 = ((($35)) + 348|0);
 $37 = HEAP32[$36>>2]|0;
 $8 = $37;
 $38 = $3;
 $39 = ((($38)) + 425|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $9 = $41;
 $10 = 0;
 $11 = 0;
 $42 = $6;
 $43 = ($42|0)==(0);
 $44 = $3;
 if ($43) {
  _png_error($44,16523);
  // unreachable;
 }
 $45 = ((($44)) + 396|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $3;
  $49 = ((($48)) + 396|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $6;
  $52 = ($51>>>0)>=(8);
  $53 = $8;
  $54 = $6;
  if ($52) {
   $55 = $54 >>> 3;
   $56 = Math_imul($53, $55)|0;
   $61 = $56;
  } else {
   $57 = Math_imul($53, $54)|0;
   $58 = (($57) + 7)|0;
   $59 = $58 >>> 3;
   $61 = $59;
  }
  $60 = ($50|0)!=($61|0);
  if ($60) {
   $62 = $3;
   _png_error($62,16548);
   // unreachable;
  }
 }
 $63 = $8;
 $64 = ($63|0)==(0);
 if ($64) {
  $65 = $3;
  _png_error($65,16584);
  // unreachable;
 }
 $66 = $6;
 $67 = $8;
 $68 = Math_imul($66, $67)|0;
 $69 = $68 & 7;
 $12 = $69;
 $70 = $12;
 $71 = ($70|0)!=(0);
 do {
  if ($71) {
   $72 = $4;
   $73 = $6;
   $74 = ($73>>>0)>=(8);
   $75 = $8;
   $76 = $6;
   if ($74) {
    $77 = $76 >>> 3;
    $78 = Math_imul($75, $77)|0;
    $83 = $78;
   } else {
    $79 = Math_imul($75, $76)|0;
    $80 = (($79) + 7)|0;
    $81 = $80 >>> 3;
    $83 = $81;
   }
   $82 = (($72) + ($83)|0);
   $84 = ((($82)) + -1|0);
   $10 = $84;
   $85 = $10;
   $86 = HEAP8[$85>>0]|0;
   $11 = $86;
   $87 = $3;
   $88 = ((($87)) + 216|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $89 & 65536;
   $91 = ($90|0)!=(0);
   $92 = $12;
   if ($91) {
    $93 = 255 << $92;
    $12 = $93;
    break;
   } else {
    $94 = 255 >> $92;
    $12 = $94;
    break;
   }
  }
 } while(0);
 $95 = $3;
 $96 = ((($95)) + 424|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = ($98|0)!=(0);
 L25: do {
  if ($99) {
   $100 = $3;
   $101 = ((($100)) + 216|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $102 & 2;
   $104 = ($103|0)!=(0);
   $105 = $9;
   $106 = ($105>>>0)<(6);
   $or$cond = $104 & $106;
   if ($or$cond) {
    $107 = $5;
    $108 = ($107|0)==(0);
    if (!($108)) {
     $109 = $5;
     $110 = ($109|0)==(1);
     if (!($110)) {
      label = 88;
      break;
     }
     $111 = $9;
     $112 = $111 & 1;
     $113 = ($112|0)!=(0);
     if (!($113)) {
      label = 88;
      break;
     }
    }
    $114 = $8;
    $115 = $9;
    $116 = 1 & $115;
    $117 = $9;
    $118 = (($117) + 1)|0;
    $119 = $118 >>> 1;
    $120 = (3 - ($119))|0;
    $121 = $116 << $120;
    $122 = $121 & 7;
    $123 = ($114>>>0)<=($122>>>0);
    if ($123) {
     STACKTOP = sp;return;
    }
    $124 = $6;
    $125 = ($124>>>0)<(8);
    $126 = $6;
    if ($125) {
     $127 = (8 / ($126>>>0))&-1;
     $13 = $127;
     $128 = $3;
     $129 = ((($128)) + 216|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $130 & 65536;
     $132 = ($131|0)!=(0);
     $133 = $5;
     $134 = ($133|0)!=(0);
     $135 = $6;
     $136 = ($135|0)==(1);
     if ($132) {
      if ($134) {
       if ($136) {
        $141 = 0;
       } else {
        $137 = $6;
        $138 = ($137|0)==(2);
        $139 = $138 ? 1 : 2;
        $141 = $139;
       }
       $140 = (740 + (($141*12)|0)|0);
       $142 = $9;
       $143 = $142 >>> 1;
       $144 = (($140) + ($143<<2)|0);
       $$sink = $144;
      } else {
       if ($136) {
        $149 = 0;
       } else {
        $145 = $6;
        $146 = ($145|0)==(2);
        $147 = $146 ? 1 : 2;
        $149 = $147;
       }
       $148 = (812 + (($149*24)|0)|0);
       $150 = $9;
       $151 = (($148) + ($150<<2)|0);
       $$sink = $151;
      }
      $152 = HEAP32[$$sink>>2]|0;
      $14 = $152;
     } else {
      if ($134) {
       if ($136) {
        $157 = 0;
       } else {
        $153 = $6;
        $154 = ($153|0)==(2);
        $155 = $154 ? 1 : 2;
        $157 = $155;
       }
       $156 = ((776) + (($157*12)|0)|0);
       $158 = $9;
       $159 = $158 >>> 1;
       $160 = (($156) + ($159<<2)|0);
       $$sink2 = $160;
      } else {
       if ($136) {
        $165 = 0;
       } else {
        $161 = $6;
        $162 = ($161|0)==(2);
        $163 = $162 ? 1 : 2;
        $165 = $163;
       }
       $164 = ((884) + (($165*24)|0)|0);
       $166 = $9;
       $167 = (($164) + ($166<<2)|0);
       $$sink2 = $167;
      }
      $168 = HEAP32[$$sink2>>2]|0;
      $14 = $168;
     }
     while(1) {
      $169 = $14;
      $15 = $169;
      $170 = $15;
      $171 = $170 >>> 8;
      $172 = $15;
      $173 = $172 << 24;
      $174 = $171 | $173;
      $14 = $174;
      $175 = $15;
      $176 = $175 & 255;
      $15 = $176;
      $177 = $15;
      $178 = ($177|0)!=(0);
      do {
       if ($178) {
        $179 = $15;
        $180 = ($179|0)!=(255);
        if ($180) {
         $181 = $4;
         $182 = HEAP8[$181>>0]|0;
         $183 = $182&255;
         $184 = $15;
         $185 = $184 ^ -1;
         $186 = $183 & $185;
         $187 = $7;
         $188 = HEAP8[$187>>0]|0;
         $189 = $188&255;
         $190 = $15;
         $191 = $189 & $190;
         $192 = $186 | $191;
         $193 = $192&255;
         $194 = $4;
         HEAP8[$194>>0] = $193;
         break;
        } else {
         $195 = $7;
         $196 = HEAP8[$195>>0]|0;
         $197 = $4;
         HEAP8[$197>>0] = $196;
         break;
        }
       }
      } while(0);
      $198 = $8;
      $199 = $13;
      $200 = ($198>>>0)<=($199>>>0);
      if ($200) {
       break L25;
      }
      $201 = $13;
      $202 = $8;
      $203 = (($202) - ($201))|0;
      $8 = $203;
      $204 = $4;
      $205 = ((($204)) + 1|0);
      $4 = $205;
      $206 = $7;
      $207 = ((($206)) + 1|0);
      $7 = $207;
     }
    }
    $208 = $126 & 7;
    $209 = ($208|0)!=(0);
    if ($209) {
     $210 = $3;
     _png_error($210,16609);
     // unreachable;
    }
    $211 = $6;
    $212 = $211 >>> 3;
    $6 = $212;
    $213 = $6;
    $214 = $8;
    $215 = Math_imul($214, $213)|0;
    $8 = $215;
    $216 = $9;
    $217 = 1 & $216;
    $218 = $9;
    $219 = (($218) + 1)|0;
    $220 = $219 >>> 1;
    $221 = (3 - ($220))|0;
    $222 = $217 << $221;
    $223 = $222 & 7;
    $224 = $6;
    $225 = Math_imul($223, $224)|0;
    $18 = $225;
    $226 = $18;
    $227 = $8;
    $228 = (($227) - ($226))|0;
    $8 = $228;
    $229 = $18;
    $230 = $4;
    $231 = (($230) + ($229)|0);
    $4 = $231;
    $232 = $18;
    $233 = $7;
    $234 = (($233) + ($232)|0);
    $7 = $234;
    $235 = $5;
    $236 = ($235|0)!=(0);
    if ($236) {
     $237 = $9;
     $238 = (6 - ($237))|0;
     $239 = $238 >>> 1;
     $240 = 1 << $239;
     $241 = $6;
     $242 = Math_imul($240, $241)|0;
     $16 = $242;
     $243 = $16;
     $244 = $8;
     $245 = ($243>>>0)>($244>>>0);
     if ($245) {
      $246 = $8;
      $16 = $246;
     }
    } else {
     $247 = $6;
     $16 = $247;
    }
    $248 = $9;
    $249 = (7 - ($248))|0;
    $250 = $249 >>> 1;
    $251 = 1 << $250;
    $252 = $6;
    $253 = Math_imul($251, $252)|0;
    $17 = $253;
    $254 = $16;
    switch ($254|0) {
    case 1:  {
     while(1) {
      $255 = $7;
      $256 = HEAP8[$255>>0]|0;
      $257 = $4;
      HEAP8[$257>>0] = $256;
      $258 = $8;
      $259 = $17;
      $260 = ($258>>>0)<=($259>>>0);
      if ($260) {
       break;
      }
      $261 = $17;
      $262 = $4;
      $263 = (($262) + ($261)|0);
      $4 = $263;
      $264 = $17;
      $265 = $7;
      $266 = (($265) + ($264)|0);
      $7 = $266;
      $267 = $17;
      $268 = $8;
      $269 = (($268) - ($267))|0;
      $8 = $269;
     }
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     while(1) {
      $270 = $7;
      $271 = HEAP8[$270>>0]|0;
      $272 = $4;
      HEAP8[$272>>0] = $271;
      $273 = $7;
      $274 = ((($273)) + 1|0);
      $275 = HEAP8[$274>>0]|0;
      $276 = $4;
      $277 = ((($276)) + 1|0);
      HEAP8[$277>>0] = $275;
      $278 = $8;
      $279 = $17;
      $280 = ($278>>>0)<=($279>>>0);
      if ($280) {
       label = 94;
       break;
      }
      $281 = $17;
      $282 = $7;
      $283 = (($282) + ($281)|0);
      $7 = $283;
      $284 = $17;
      $285 = $4;
      $286 = (($285) + ($284)|0);
      $4 = $286;
      $287 = $17;
      $288 = $8;
      $289 = (($288) - ($287))|0;
      $8 = $289;
      $290 = $8;
      $291 = ($290>>>0)>(1);
      if (!($291)) {
       break;
      }
     }
     if ((label|0) == 94) {
      STACKTOP = sp;return;
     }
     $292 = $7;
     $293 = HEAP8[$292>>0]|0;
     $294 = $4;
     HEAP8[$294>>0] = $293;
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     while(1) {
      $295 = $7;
      $296 = HEAP8[$295>>0]|0;
      $297 = $4;
      HEAP8[$297>>0] = $296;
      $298 = $7;
      $299 = ((($298)) + 1|0);
      $300 = HEAP8[$299>>0]|0;
      $301 = $4;
      $302 = ((($301)) + 1|0);
      HEAP8[$302>>0] = $300;
      $303 = $7;
      $304 = ((($303)) + 2|0);
      $305 = HEAP8[$304>>0]|0;
      $306 = $4;
      $307 = ((($306)) + 2|0);
      HEAP8[$307>>0] = $305;
      $308 = $8;
      $309 = $17;
      $310 = ($308>>>0)<=($309>>>0);
      if ($310) {
       break;
      }
      $311 = $17;
      $312 = $7;
      $313 = (($312) + ($311)|0);
      $7 = $313;
      $314 = $17;
      $315 = $4;
      $316 = (($315) + ($314)|0);
      $4 = $316;
      $317 = $17;
      $318 = $8;
      $319 = (($318) - ($317))|0;
      $8 = $319;
     }
     STACKTOP = sp;return;
     break;
    }
    default: {
     $320 = $16;
     $321 = ($320>>>0)<(16);
     if ($321) {
      $322 = $4;
      $323 = $322;
      $324 = (($323) - 0)|0;
      $325 = $324 & 1;
      $326 = ($325|0)==(0);
      if ($326) {
       $327 = $7;
       $328 = $327;
       $329 = (($328) - 0)|0;
       $330 = $329 & 1;
       $331 = ($330|0)==(0);
       if ($331) {
        $332 = $16;
        $333 = (($332>>>0) % 2)&-1;
        $334 = ($333|0)==(0);
        if ($334) {
         $335 = $17;
         $336 = (($335>>>0) % 2)&-1;
         $337 = ($336|0)==(0);
         if ($337) {
          $338 = $4;
          $339 = $338;
          $340 = (($339) - 0)|0;
          $341 = $340 & 3;
          $342 = ($341|0)==(0);
          $343 = $342&1;
          $344 = ($343|0)!=(0);
          do {
           if ($344) {
            $345 = $7;
            $346 = $345;
            $347 = (($346) - 0)|0;
            $348 = $347 & 3;
            $349 = ($348|0)==(0);
            $350 = $349&1;
            $351 = ($350|0)!=(0);
            if (!($351)) {
             break;
            }
            $352 = $16;
            $353 = (($352>>>0) % 4)&-1;
            $354 = ($353|0)==(0);
            if (!($354)) {
             break;
            }
            $355 = $17;
            $356 = (($355>>>0) % 4)&-1;
            $357 = ($356|0)==(0);
            if (!($357)) {
             break;
            }
            $358 = $4;
            $19 = $358;
            $359 = $7;
            $20 = $359;
            $360 = $17;
            $361 = $16;
            $362 = (($360) - ($361))|0;
            $363 = (($362>>>0) / 4)&-1;
            $21 = $363;
            while(1) {
             $364 = $16;
             $22 = $364;
             while(1) {
              $365 = $20;
              $366 = ((($365)) + 4|0);
              $20 = $366;
              $367 = HEAP32[$365>>2]|0;
              $368 = $19;
              $369 = ((($368)) + 4|0);
              $19 = $369;
              HEAP32[$368>>2] = $367;
              $370 = $22;
              $371 = (($370) - 4)|0;
              $22 = $371;
              $372 = $22;
              $373 = ($372>>>0)>(0);
              if (!($373)) {
               break;
              }
             }
             $374 = $8;
             $375 = $17;
             $376 = ($374>>>0)<=($375>>>0);
             if ($376) {
              label = 94;
              break;
             }
             $377 = $21;
             $378 = $19;
             $379 = (($378) + ($377<<2)|0);
             $19 = $379;
             $380 = $21;
             $381 = $20;
             $382 = (($381) + ($380<<2)|0);
             $20 = $382;
             $383 = $17;
             $384 = $8;
             $385 = (($384) - ($383))|0;
             $8 = $385;
             $386 = $16;
             $387 = $8;
             $388 = ($386>>>0)<=($387>>>0);
             if (!($388)) {
              break;
             }
            }
            if ((label|0) == 94) {
             STACKTOP = sp;return;
            }
            $389 = $19;
            $4 = $389;
            $390 = $20;
            $7 = $390;
            while(1) {
             $391 = $7;
             $392 = ((($391)) + 1|0);
             $7 = $392;
             $393 = HEAP8[$391>>0]|0;
             $394 = $4;
             $395 = ((($394)) + 1|0);
             $4 = $395;
             HEAP8[$394>>0] = $393;
             $396 = $8;
             $397 = (($396) + -1)|0;
             $8 = $397;
             $398 = ($397>>>0)>(0);
             if (!($398)) {
              break;
             }
            }
            STACKTOP = sp;return;
           }
          } while(0);
          $399 = $4;
          $23 = $399;
          $400 = $7;
          $24 = $400;
          $401 = $17;
          $402 = $16;
          $403 = (($401) - ($402))|0;
          $404 = (($403>>>0) / 2)&-1;
          $25 = $404;
          while(1) {
           $405 = $16;
           $26 = $405;
           while(1) {
            $406 = $24;
            $407 = ((($406)) + 2|0);
            $24 = $407;
            $408 = HEAP16[$406>>1]|0;
            $409 = $23;
            $410 = ((($409)) + 2|0);
            $23 = $410;
            HEAP16[$409>>1] = $408;
            $411 = $26;
            $412 = (($411) - 2)|0;
            $26 = $412;
            $413 = $26;
            $414 = ($413>>>0)>(0);
            if (!($414)) {
             break;
            }
           }
           $415 = $8;
           $416 = $17;
           $417 = ($415>>>0)<=($416>>>0);
           if ($417) {
            label = 94;
            break;
           }
           $418 = $25;
           $419 = $23;
           $420 = (($419) + ($418<<1)|0);
           $23 = $420;
           $421 = $25;
           $422 = $24;
           $423 = (($422) + ($421<<1)|0);
           $24 = $423;
           $424 = $17;
           $425 = $8;
           $426 = (($425) - ($424))|0;
           $8 = $426;
           $427 = $16;
           $428 = $8;
           $429 = ($427>>>0)<=($428>>>0);
           if (!($429)) {
            break;
           }
          }
          if ((label|0) == 94) {
           STACKTOP = sp;return;
          }
          $430 = $23;
          $4 = $430;
          $431 = $24;
          $7 = $431;
          while(1) {
           $432 = $7;
           $433 = ((($432)) + 1|0);
           $7 = $433;
           $434 = HEAP8[$432>>0]|0;
           $435 = $4;
           $436 = ((($435)) + 1|0);
           $4 = $436;
           HEAP8[$435>>0] = $434;
           $437 = $8;
           $438 = (($437) + -1)|0;
           $8 = $438;
           $439 = ($438>>>0)>(0);
           if (!($439)) {
            break;
           }
          }
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
     while(1) {
      $440 = $4;
      $441 = $7;
      $442 = $16;
      _memcpy(($440|0),($441|0),($442|0))|0;
      $443 = $8;
      $444 = $17;
      $445 = ($443>>>0)<=($444>>>0);
      if ($445) {
       break;
      }
      $446 = $17;
      $447 = $7;
      $448 = (($447) + ($446)|0);
      $7 = $448;
      $449 = $17;
      $450 = $4;
      $451 = (($450) + ($449)|0);
      $4 = $451;
      $452 = $17;
      $453 = $8;
      $454 = (($453) - ($452))|0;
      $8 = $454;
      $455 = $16;
      $456 = $8;
      $457 = ($455>>>0)>($456>>>0);
      if (!($457)) {
       continue;
      }
      $458 = $8;
      $16 = $458;
     }
     STACKTOP = sp;return;
    }
    }
   } else {
    label = 88;
   }
  } else {
   label = 88;
  }
 } while(0);
 if ((label|0) == 88) {
  $459 = $4;
  $460 = $7;
  $461 = $6;
  $462 = ($461>>>0)>=(8);
  $463 = $8;
  $464 = $6;
  if ($462) {
   $465 = $464 >>> 3;
   $466 = Math_imul($463, $465)|0;
   $470 = $466;
  } else {
   $467 = Math_imul($463, $464)|0;
   $468 = (($467) + 7)|0;
   $469 = $468 >>> 3;
   $470 = $469;
  }
  _memcpy(($459|0),($460|0),($470|0))|0;
 }
 $471 = $10;
 $472 = ($471|0)!=(0|0);
 if (!($472)) {
  STACKTOP = sp;return;
 }
 $473 = $11;
 $474 = $473&255;
 $475 = $12;
 $476 = $474 & $475;
 $477 = $10;
 $478 = HEAP8[$477>>0]|0;
 $479 = $478&255;
 $480 = $12;
 $481 = $480 ^ -1;
 $482 = $479 & $481;
 $483 = $476 | $482;
 $484 = $483&255;
 $485 = $10;
 HEAP8[$485>>0] = $484;
 STACKTOP = sp;return;
}
function _png_do_read_interlace($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $50 = sp + 176|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $52 = $5;
 $53 = ($52|0)!=(0|0);
 $54 = $4;
 $55 = ($54|0)!=(0|0);
 $or$cond = $53 & $55;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $56 = $4;
 $57 = HEAP32[$56>>2]|0;
 $58 = $6;
 $59 = (956 + ($58<<2)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = Math_imul($57, $60)|0;
 $8 = $61;
 $62 = $4;
 $63 = ((($62)) + 11|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 L4: do {
  switch ($65|0) {
  case 1:  {
   $66 = $5;
   $67 = $4;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) - 1)|0;
   $70 = $69 >>> 3;
   $71 = (($66) + ($70)|0);
   $9 = $71;
   $72 = $5;
   $73 = $8;
   $74 = (($73) - 1)|0;
   $75 = $74 >>> 3;
   $76 = (($72) + ($75)|0);
   $10 = $76;
   $77 = $6;
   $78 = (956 + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $16 = $79;
   $80 = $7;
   $81 = $80 & 65536;
   $82 = ($81|0)!=(0);
   $83 = $4;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + 7)|0;
   $86 = $85 & 7;
   if ($82) {
    $11 = $86;
    $87 = $8;
    $88 = (($87) + 7)|0;
    $89 = $88 & 7;
    $12 = $89;
    $13 = 7;
    $14 = 0;
    $15 = -1;
   } else {
    $90 = (7 - ($86))|0;
    $11 = $90;
    $91 = $8;
    $92 = (($91) + 7)|0;
    $93 = $92 & 7;
    $94 = (7 - ($93))|0;
    $12 = $94;
    $13 = 0;
    $14 = 7;
    $15 = 1;
   }
   $18 = 0;
   while(1) {
    $95 = $18;
    $96 = $4;
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95>>>0)<($97>>>0);
    if (!($98)) {
     break L4;
    }
    $99 = $9;
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = $11;
    $103 = $101 >> $102;
    $104 = $103 & 1;
    $105 = $104&255;
    $17 = $105;
    $19 = 0;
    while(1) {
     $106 = $19;
     $107 = $16;
     $108 = ($106|0)<($107|0);
     if (!($108)) {
      break;
     }
     $109 = $10;
     $110 = HEAP8[$109>>0]|0;
     $111 = $110&255;
     $112 = $12;
     $113 = (7 - ($112))|0;
     $114 = 32639 >> $113;
     $115 = $111 & $114;
     $20 = $115;
     $116 = $17;
     $117 = $116&255;
     $118 = $12;
     $119 = $117 << $118;
     $120 = $20;
     $121 = $120 | $119;
     $20 = $121;
     $122 = $20;
     $123 = $122 & 255;
     $124 = $123&255;
     $125 = $10;
     HEAP8[$125>>0] = $124;
     $126 = $12;
     $127 = $14;
     $128 = ($126|0)==($127|0);
     if ($128) {
      $129 = $13;
      $12 = $129;
      $130 = $10;
      $131 = ((($130)) + -1|0);
      $10 = $131;
     } else {
      $132 = $15;
      $133 = $12;
      $134 = (($133) + ($132))|0;
      $12 = $134;
     }
     $135 = $19;
     $136 = (($135) + 1)|0;
     $19 = $136;
    }
    $137 = $11;
    $138 = $14;
    $139 = ($137|0)==($138|0);
    if ($139) {
     $140 = $13;
     $11 = $140;
     $141 = $9;
     $142 = ((($141)) + -1|0);
     $9 = $142;
    } else {
     $143 = $15;
     $144 = $11;
     $145 = (($144) + ($143))|0;
     $11 = $145;
    }
    $146 = $18;
    $147 = (($146) + 1)|0;
    $18 = $147;
   }
   break;
  }
  case 2:  {
   $148 = $5;
   $149 = $4;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) - 1)|0;
   $152 = $151 >>> 2;
   $153 = (($148) + ($152)|0);
   $21 = $153;
   $154 = $5;
   $155 = $8;
   $156 = (($155) - 1)|0;
   $157 = $156 >>> 2;
   $158 = (($154) + ($157)|0);
   $22 = $158;
   $159 = $6;
   $160 = (956 + ($159<<2)|0);
   $161 = HEAP32[$160>>2]|0;
   $28 = $161;
   $162 = $7;
   $163 = $162 & 65536;
   $164 = ($163|0)!=(0);
   $165 = $4;
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + 3)|0;
   $168 = $167 & 3;
   if ($164) {
    $169 = $168 << 1;
    $23 = $169;
    $170 = $8;
    $171 = (($170) + 3)|0;
    $172 = $171 & 3;
    $173 = $172 << 1;
    $24 = $173;
    $25 = 6;
    $26 = 0;
    $27 = -2;
   } else {
    $174 = (3 - ($168))|0;
    $175 = $174 << 1;
    $23 = $175;
    $176 = $8;
    $177 = (($176) + 3)|0;
    $178 = $177 & 3;
    $179 = (3 - ($178))|0;
    $180 = $179 << 1;
    $24 = $180;
    $25 = 0;
    $26 = 6;
    $27 = 2;
   }
   $29 = 0;
   while(1) {
    $181 = $29;
    $182 = $4;
    $183 = HEAP32[$182>>2]|0;
    $184 = ($181>>>0)<($183>>>0);
    if (!($184)) {
     break L4;
    }
    $185 = $21;
    $186 = HEAP8[$185>>0]|0;
    $187 = $186&255;
    $188 = $23;
    $189 = $187 >> $188;
    $190 = $189 & 3;
    $191 = $190&255;
    $30 = $191;
    $31 = 0;
    while(1) {
     $192 = $31;
     $193 = $28;
     $194 = ($192|0)<($193|0);
     if (!($194)) {
      break;
     }
     $195 = $22;
     $196 = HEAP8[$195>>0]|0;
     $197 = $196&255;
     $198 = $24;
     $199 = (6 - ($198))|0;
     $200 = 16191 >> $199;
     $201 = $197 & $200;
     $32 = $201;
     $202 = $30;
     $203 = $202&255;
     $204 = $24;
     $205 = $203 << $204;
     $206 = $32;
     $207 = $206 | $205;
     $32 = $207;
     $208 = $32;
     $209 = $208 & 255;
     $210 = $209&255;
     $211 = $22;
     HEAP8[$211>>0] = $210;
     $212 = $24;
     $213 = $26;
     $214 = ($212|0)==($213|0);
     if ($214) {
      $215 = $25;
      $24 = $215;
      $216 = $22;
      $217 = ((($216)) + -1|0);
      $22 = $217;
     } else {
      $218 = $27;
      $219 = $24;
      $220 = (($219) + ($218))|0;
      $24 = $220;
     }
     $221 = $31;
     $222 = (($221) + 1)|0;
     $31 = $222;
    }
    $223 = $23;
    $224 = $26;
    $225 = ($223|0)==($224|0);
    if ($225) {
     $226 = $25;
     $23 = $226;
     $227 = $21;
     $228 = ((($227)) + -1|0);
     $21 = $228;
    } else {
     $229 = $27;
     $230 = $23;
     $231 = (($230) + ($229))|0;
     $23 = $231;
    }
    $232 = $29;
    $233 = (($232) + 1)|0;
    $29 = $233;
   }
   break;
  }
  case 4:  {
   $234 = $5;
   $235 = $4;
   $236 = HEAP32[$235>>2]|0;
   $237 = (($236) - 1)|0;
   $238 = $237 >>> 1;
   $239 = (($234) + ($238)|0);
   $33 = $239;
   $240 = $5;
   $241 = $8;
   $242 = (($241) - 1)|0;
   $243 = $242 >>> 1;
   $244 = (($240) + ($243)|0);
   $34 = $244;
   $245 = $6;
   $246 = (956 + ($245<<2)|0);
   $247 = HEAP32[$246>>2]|0;
   $41 = $247;
   $248 = $7;
   $249 = $248 & 65536;
   $250 = ($249|0)!=(0);
   $251 = $4;
   $252 = HEAP32[$251>>2]|0;
   $253 = (($252) + 1)|0;
   $254 = $253 & 1;
   if ($250) {
    $255 = $254 << 2;
    $35 = $255;
    $256 = $8;
    $257 = (($256) + 1)|0;
    $258 = $257 & 1;
    $259 = $258 << 2;
    $36 = $259;
    $37 = 4;
    $38 = 0;
    $39 = -4;
   } else {
    $260 = (1 - ($254))|0;
    $261 = $260 << 2;
    $35 = $261;
    $262 = $8;
    $263 = (($262) + 1)|0;
    $264 = $263 & 1;
    $265 = (1 - ($264))|0;
    $266 = $265 << 2;
    $36 = $266;
    $37 = 0;
    $38 = 4;
    $39 = 4;
   }
   $40 = 0;
   while(1) {
    $267 = $40;
    $268 = $4;
    $269 = HEAP32[$268>>2]|0;
    $270 = ($267>>>0)<($269>>>0);
    if (!($270)) {
     break L4;
    }
    $271 = $33;
    $272 = HEAP8[$271>>0]|0;
    $273 = $272&255;
    $274 = $35;
    $275 = $273 >> $274;
    $276 = $275 & 15;
    $277 = $276&255;
    $42 = $277;
    $43 = 0;
    while(1) {
     $278 = $43;
     $279 = $41;
     $280 = ($278|0)<($279|0);
     if (!($280)) {
      break;
     }
     $281 = $34;
     $282 = HEAP8[$281>>0]|0;
     $283 = $282&255;
     $284 = $36;
     $285 = (4 - ($284))|0;
     $286 = 3855 >> $285;
     $287 = $283 & $286;
     $44 = $287;
     $288 = $42;
     $289 = $288&255;
     $290 = $36;
     $291 = $289 << $290;
     $292 = $44;
     $293 = $292 | $291;
     $44 = $293;
     $294 = $44;
     $295 = $294 & 255;
     $296 = $295&255;
     $297 = $34;
     HEAP8[$297>>0] = $296;
     $298 = $36;
     $299 = $38;
     $300 = ($298|0)==($299|0);
     if ($300) {
      $301 = $37;
      $36 = $301;
      $302 = $34;
      $303 = ((($302)) + -1|0);
      $34 = $303;
     } else {
      $304 = $39;
      $305 = $36;
      $306 = (($305) + ($304))|0;
      $36 = $306;
     }
     $307 = $43;
     $308 = (($307) + 1)|0;
     $43 = $308;
    }
    $309 = $35;
    $310 = $38;
    $311 = ($309|0)==($310|0);
    if ($311) {
     $312 = $37;
     $35 = $312;
     $313 = $33;
     $314 = ((($313)) + -1|0);
     $33 = $314;
    } else {
     $315 = $39;
     $316 = $35;
     $317 = (($316) + ($315))|0;
     $35 = $317;
    }
    $318 = $40;
    $319 = (($318) + 1)|0;
    $40 = $319;
   }
   break;
  }
  default: {
   $320 = $4;
   $321 = ((($320)) + 11|0);
   $322 = HEAP8[$321>>0]|0;
   $323 = $322&255;
   $324 = $323 >> 3;
   $45 = $324;
   $325 = $5;
   $326 = $4;
   $327 = HEAP32[$326>>2]|0;
   $328 = (($327) - 1)|0;
   $329 = $45;
   $330 = Math_imul($328, $329)|0;
   $331 = (($325) + ($330)|0);
   $46 = $331;
   $332 = $5;
   $333 = $8;
   $334 = (($333) - 1)|0;
   $335 = $45;
   $336 = Math_imul($334, $335)|0;
   $337 = (($332) + ($336)|0);
   $47 = $337;
   $338 = $6;
   $339 = (956 + ($338<<2)|0);
   $340 = HEAP32[$339>>2]|0;
   $48 = $340;
   $49 = 0;
   while(1) {
    $341 = $49;
    $342 = $4;
    $343 = HEAP32[$342>>2]|0;
    $344 = ($341>>>0)<($343>>>0);
    if (!($344)) {
     break L4;
    }
    $345 = $46;
    $346 = $45;
    _memcpy(($50|0),($345|0),($346|0))|0;
    $51 = 0;
    while(1) {
     $347 = $51;
     $348 = $48;
     $349 = ($347|0)<($348|0);
     if (!($349)) {
      break;
     }
     $350 = $47;
     $351 = $45;
     _memcpy(($350|0),($50|0),($351|0))|0;
     $352 = $45;
     $353 = $47;
     $354 = (0 - ($352))|0;
     $355 = (($353) + ($354)|0);
     $47 = $355;
     $356 = $51;
     $357 = (($356) + 1)|0;
     $51 = $357;
    }
    $358 = $45;
    $359 = $46;
    $360 = (0 - ($358))|0;
    $361 = (($359) + ($360)|0);
    $46 = $361;
    $362 = $49;
    $363 = (($362) + 1)|0;
    $49 = $363;
   }
  }
  }
 } while(0);
 $364 = $8;
 $365 = $4;
 HEAP32[$365>>2] = $364;
 $366 = $4;
 $367 = ((($366)) + 11|0);
 $368 = HEAP8[$367>>0]|0;
 $369 = $368&255;
 $370 = ($369|0)>=(8);
 $371 = $8;
 $372 = $4;
 $373 = ((($372)) + 11|0);
 $374 = HEAP8[$373>>0]|0;
 $375 = $374&255;
 if ($370) {
  $376 = $375 >>> 3;
  $377 = Math_imul($371, $376)|0;
  $383 = $377;
 } else {
  $378 = Math_imul($371, $375)|0;
  $379 = (($378) + 7)|0;
  $380 = $379 >>> 3;
  $383 = $380;
 }
 $381 = $4;
 $382 = ((($381)) + 4|0);
 HEAP32[$382>>2] = $383;
 STACKTOP = sp;return;
}
function _png_read_filter_row($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $9;
 $11 = ($10|0)>(0);
 $12 = $9;
 $13 = ($12|0)<(5);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $14 = $5;
 $15 = ((($14)) + 776|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $5;
  _png_init_filter_functions($18);
 }
 $19 = $5;
 $20 = ((($19)) + 776|0);
 $21 = $9;
 $22 = (($21) - 1)|0;
 $23 = (($20) + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $6;
 $26 = $7;
 $27 = $8;
 FUNCTION_TABLE_viii[$24 & 127]($25,$26,$27);
 STACKTOP = sp;return;
}
function _png_init_filter_functions($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $png_read_filter_row_paeth_multibyte_pixel$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 430|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($6) + 7)|0;
 $8 = $7 >> 3;
 $2 = $8;
 $9 = $1;
 $10 = ((($9)) + 776|0);
 HEAP32[$10>>2] = 64;
 $11 = $1;
 $12 = ((($11)) + 776|0);
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 65;
 $14 = $1;
 $15 = ((($14)) + 776|0);
 $16 = ((($15)) + 8|0);
 HEAP32[$16>>2] = 66;
 $17 = $2;
 $18 = ($17|0)==(1);
 $19 = $1;
 $20 = ((($19)) + 776|0);
 $21 = ((($20)) + 12|0);
 $png_read_filter_row_paeth_multibyte_pixel$sink = $18 ? 68 : 67;
 HEAP32[$21>>2] = $png_read_filter_row_paeth_multibyte_pixel$sink;
 STACKTOP = sp;return;
}
function _png_read_filter_row_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $7 = $12;
 $13 = $3;
 $14 = ((($13)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($16) + 7)|0;
 $18 = $17 >> 3;
 $8 = $18;
 $19 = $4;
 $20 = $8;
 $21 = (($19) + ($20)|0);
 $9 = $21;
 $22 = $8;
 $6 = $22;
 while(1) {
  $23 = $6;
  $24 = $7;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $9;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $9;
  $30 = $8;
  $31 = (0 - ($30))|0;
  $32 = (($29) + ($31)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($28) + ($34))|0;
  $36 = $35 & 255;
  $37 = $36&255;
  $38 = $9;
  HEAP8[$38>>0] = $37;
  $39 = $9;
  $40 = ((($39)) + 1|0);
  $9 = $40;
  $41 = $6;
  $42 = (($41) + 1)|0;
  $6 = $42;
 }
 STACKTOP = sp;return;
}
function _png_read_filter_row_up($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $7 = $12;
 $13 = $4;
 $8 = $13;
 $14 = $5;
 $9 = $14;
 $6 = 0;
 while(1) {
  $15 = $6;
  $16 = $7;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $8;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $9;
  $22 = ((($21)) + 1|0);
  $9 = $22;
  $23 = HEAP8[$21>>0]|0;
  $24 = $23&255;
  $25 = (($20) + ($24))|0;
  $26 = $25 & 255;
  $27 = $26&255;
  $28 = $8;
  HEAP8[$28>>0] = $27;
  $29 = $8;
  $30 = ((($29)) + 1|0);
  $8 = $30;
  $31 = $6;
  $32 = (($31) + 1)|0;
  $6 = $32;
 }
 STACKTOP = sp;return;
}
function _png_read_filter_row_avg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 $7 = $11;
 $12 = $5;
 $8 = $12;
 $13 = $3;
 $14 = ((($13)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($16) + 7)|0;
 $18 = $17 >> 3;
 $9 = $18;
 $19 = $3;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $9;
 $23 = (($21) - ($22))|0;
 $10 = $23;
 $6 = 0;
 while(1) {
  $24 = $6;
  $25 = $9;
  $26 = ($24>>>0)<($25>>>0);
  if (!($26)) {
   break;
  }
  $27 = $7;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $8;
  $31 = ((($30)) + 1|0);
  $8 = $31;
  $32 = HEAP8[$30>>0]|0;
  $33 = $32&255;
  $34 = (($33|0) / 2)&-1;
  $35 = (($29) + ($34))|0;
  $36 = $35 & 255;
  $37 = $36&255;
  $38 = $7;
  HEAP8[$38>>0] = $37;
  $39 = $7;
  $40 = ((($39)) + 1|0);
  $7 = $40;
  $41 = $6;
  $42 = (($41) + 1)|0;
  $6 = $42;
 }
 $6 = 0;
 while(1) {
  $43 = $6;
  $44 = $10;
  $45 = ($43>>>0)<($44>>>0);
  if (!($45)) {
   break;
  }
  $46 = $7;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $8;
  $50 = ((($49)) + 1|0);
  $8 = $50;
  $51 = HEAP8[$49>>0]|0;
  $52 = $51&255;
  $53 = $7;
  $54 = $9;
  $55 = (0 - ($54))|0;
  $56 = (($53) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = (($52) + ($58))|0;
  $60 = (($59|0) / 2)&-1;
  $61 = (($48) + ($60))|0;
  $62 = $61 & 255;
  $63 = $62&255;
  $64 = $7;
  HEAP8[$64>>0] = $63;
  $65 = $7;
  $66 = ((($65)) + 1|0);
  $7 = $66;
  $67 = $6;
  $68 = (($67) + 1)|0;
  $6 = $68;
 }
 STACKTOP = sp;return;
}
function _png_read_filter_row_paeth_1byte_pixel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $4;
 $15 = $3;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) + ($17)|0);
 $6 = $18;
 $19 = $5;
 $20 = ((($19)) + 1|0);
 $5 = $20;
 $21 = HEAP8[$19>>0]|0;
 $22 = $21&255;
 $8 = $22;
 $23 = $4;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $8;
 $27 = (($25) + ($26))|0;
 $7 = $27;
 $28 = $7;
 $29 = $28&255;
 $30 = $4;
 $31 = ((($30)) + 1|0);
 $4 = $31;
 HEAP8[$30>>0] = $29;
 while(1) {
  $32 = $4;
  $33 = $6;
  $34 = ($32>>>0)<($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $7;
  $36 = $35 & 255;
  $7 = $36;
  $37 = $5;
  $38 = ((($37)) + 1|0);
  $5 = $38;
  $39 = HEAP8[$37>>0]|0;
  $40 = $39&255;
  $9 = $40;
  $41 = $9;
  $42 = $8;
  $43 = (($41) - ($42))|0;
  $13 = $43;
  $44 = $7;
  $45 = $8;
  $46 = (($44) - ($45))|0;
  $12 = $46;
  $47 = $13;
  $48 = ($47|0)<(0);
  $49 = $13;
  $50 = (0 - ($49))|0;
  $51 = $48 ? $50 : $49;
  $10 = $51;
  $52 = $12;
  $53 = ($52|0)<(0);
  $54 = $12;
  $55 = (0 - ($54))|0;
  $56 = $53 ? $55 : $54;
  $11 = $56;
  $57 = $13;
  $58 = $12;
  $59 = (($57) + ($58))|0;
  $60 = ($59|0)<(0);
  $61 = $13;
  $62 = $12;
  $63 = (($61) + ($62))|0;
  $64 = (0 - ($63))|0;
  $65 = $60 ? $64 : $63;
  $12 = $65;
  $66 = $11;
  $67 = $10;
  $68 = ($66|0)<($67|0);
  if ($68) {
   $69 = $11;
   $10 = $69;
   $70 = $9;
   $7 = $70;
  }
  $71 = $12;
  $72 = $10;
  $73 = ($71|0)<($72|0);
  if ($73) {
   $74 = $8;
   $7 = $74;
  }
  $75 = $9;
  $8 = $75;
  $76 = $4;
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $7;
  $80 = (($79) + ($78))|0;
  $7 = $80;
  $81 = $7;
  $82 = $81&255;
  $83 = $4;
  $84 = ((($83)) + 1|0);
  $4 = $84;
  HEAP8[$83>>0] = $82;
 }
 STACKTOP = sp;return;
}
function _png_read_filter_row_paeth_multibyte_pixel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $16 = $3;
 $17 = ((($16)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = (($19) + 7)|0;
 $21 = $20 >> 3;
 $6 = $21;
 $22 = $4;
 $23 = $6;
 $24 = (($22) + ($23)|0);
 $7 = $24;
 while(1) {
  $25 = $4;
  $26 = $7;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $4;
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $5;
  $32 = ((($31)) + 1|0);
  $5 = $32;
  $33 = HEAP8[$31>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $8 = $35;
  $36 = $8;
  $37 = $36&255;
  $38 = $4;
  $39 = ((($38)) + 1|0);
  $4 = $39;
  HEAP8[$38>>0] = $37;
 }
 $40 = $3;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $6;
 $44 = (($42) - ($43))|0;
 $45 = $7;
 $46 = (($45) + ($44)|0);
 $7 = $46;
 while(1) {
  $47 = $4;
  $48 = $7;
  $49 = ($47>>>0)<($48>>>0);
  if (!($49)) {
   break;
  }
  $50 = $5;
  $51 = $6;
  $52 = (0 - ($51))|0;
  $53 = (($50) + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $11 = $55;
  $56 = $4;
  $57 = $6;
  $58 = (0 - ($57))|0;
  $59 = (($56) + ($58)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $9 = $61;
  $62 = $5;
  $63 = ((($62)) + 1|0);
  $5 = $63;
  $64 = HEAP8[$62>>0]|0;
  $65 = $64&255;
  $10 = $65;
  $66 = $10;
  $67 = $11;
  $68 = (($66) - ($67))|0;
  $15 = $68;
  $69 = $9;
  $70 = $11;
  $71 = (($69) - ($70))|0;
  $14 = $71;
  $72 = $15;
  $73 = ($72|0)<(0);
  $74 = $15;
  $75 = (0 - ($74))|0;
  $76 = $73 ? $75 : $74;
  $12 = $76;
  $77 = $14;
  $78 = ($77|0)<(0);
  $79 = $14;
  $80 = (0 - ($79))|0;
  $81 = $78 ? $80 : $79;
  $13 = $81;
  $82 = $15;
  $83 = $14;
  $84 = (($82) + ($83))|0;
  $85 = ($84|0)<(0);
  $86 = $15;
  $87 = $14;
  $88 = (($86) + ($87))|0;
  $89 = (0 - ($88))|0;
  $90 = $85 ? $89 : $88;
  $14 = $90;
  $91 = $13;
  $92 = $12;
  $93 = ($91|0)<($92|0);
  if ($93) {
   $94 = $13;
   $12 = $94;
   $95 = $10;
   $9 = $95;
  }
  $96 = $14;
  $97 = $12;
  $98 = ($96|0)<($97|0);
  if ($98) {
   $99 = $11;
   $9 = $99;
  }
  $100 = $4;
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = $9;
  $104 = (($103) + ($102))|0;
  $9 = $104;
  $105 = $9;
  $106 = $105&255;
  $107 = $4;
  $108 = ((($107)) + 1|0);
  $4 = $108;
  HEAP8[$107>>0] = $106;
 }
 STACKTOP = sp;return;
}
function _png_read_IDAT_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $7 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 $12 = $3;
 $13 = ((($12)) + 224|0);
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = $11;
 $15 = $3;
 $16 = ((($15)) + 224|0);
 $17 = ((($16)) + 16|0);
 HEAP32[$17>>2] = 0;
 $18 = $4;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $5 = 0;
 }
 L3: while(1) {
  $20 = $3;
  $21 = ((($20)) + 224|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0);
  if ($24) {
   while(1) {
    $25 = $3;
    $26 = ((($25)) + 400|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0);
    $29 = $3;
    if (!($28)) {
     break;
    }
    (_png_crc_finish($29,0)|0);
    $30 = $3;
    $31 = (_png_read_chunk_header($30)|0);
    $32 = $3;
    $33 = ((($32)) + 400|0);
    HEAP32[$33>>2] = $31;
    $34 = $3;
    $35 = ((($34)) + 376|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)!=(1229209940);
    if ($37) {
     label = 6;
     break L3;
    }
   }
   $39 = ((($29)) + 764|0);
   $40 = HEAP32[$39>>2]|0;
   $8 = $40;
   $41 = $8;
   $42 = $3;
   $43 = ((($42)) + 400|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41>>>0)>($44>>>0);
   if ($45) {
    $46 = $3;
    $47 = ((($46)) + 400|0);
    $48 = HEAP32[$47>>2]|0;
    $8 = $48;
   }
   $49 = $3;
   $50 = $8;
   $51 = (_png_read_buffer($49,$50,0)|0);
   $9 = $51;
   $52 = $3;
   $53 = $9;
   $54 = $8;
   _png_crc_read($52,$53,$54);
   $55 = $8;
   $56 = $3;
   $57 = ((($56)) + 400|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) - ($55))|0;
   HEAP32[$57>>2] = $59;
   $60 = $9;
   $61 = $3;
   $62 = ((($61)) + 224|0);
   HEAP32[$62>>2] = $60;
   $63 = $8;
   $64 = $3;
   $65 = ((($64)) + 224|0);
   $66 = ((($65)) + 4|0);
   HEAP32[$66>>2] = $63;
  }
  $67 = $4;
  $68 = ($67|0)!=(0|0);
  if ($68) {
   $10 = -1;
   $69 = $10;
   $70 = $5;
   $71 = ($69>>>0)>($70>>>0);
   if ($71) {
    $72 = $5;
    $10 = $72;
   }
   $73 = $10;
   $74 = $5;
   $75 = (($74) - ($73))|0;
   $5 = $75;
   $76 = $10;
   $77 = $3;
   $$sink = $76;$$sink3 = $77;
  } else {
   $78 = $3;
   $79 = ((($78)) + 224|0);
   $80 = ((($79)) + 12|0);
   HEAP32[$80>>2] = $7;
   $81 = $3;
   $$sink = 1024;$$sink3 = $81;
  }
  $82 = ((($$sink3)) + 224|0);
  $83 = ((($82)) + 16|0);
  HEAP32[$83>>2] = $$sink;
  $84 = $3;
  $85 = ((($84)) + 224|0);
  $86 = (_inflate($85,0)|0);
  $6 = $86;
  $87 = $4;
  $88 = ($87|0)!=(0|0);
  $89 = $3;
  $90 = ((($89)) + 224|0);
  $91 = ((($90)) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  if ($88) {
   $93 = $5;
   $94 = (($93) + ($92))|0;
   $5 = $94;
  } else {
   $95 = (1024 - ($92))|0;
   $96 = $5;
   $97 = (($96) + ($95))|0;
   $5 = $97;
  }
  $98 = $3;
  $99 = ((($98)) + 224|0);
  $100 = ((($99)) + 16|0);
  HEAP32[$100>>2] = 0;
  $101 = $6;
  $102 = ($101|0)==(1);
  if ($102) {
   label = 19;
   break;
  }
  $124 = $6;
  $125 = ($124|0)!=(0);
  if ($125) {
   label = 23;
   break;
  }
  $135 = $5;
  $136 = ($135>>>0)>(0);
  if (!($136)) {
   break;
  }
 }
 do {
  if ((label|0) == 6) {
   $38 = $3;
   _png_error($38,16644);
   // unreachable;
  }
  else if ((label|0) == 19) {
   $103 = $3;
   $104 = ((($103)) + 224|0);
   $105 = ((($104)) + 12|0);
   HEAP32[$105>>2] = 0;
   $106 = $3;
   $107 = ((($106)) + 208|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $108 | 8;
   HEAP32[$107>>2] = $109;
   $110 = $3;
   $111 = ((($110)) + 212|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $112 | 8;
   HEAP32[$111>>2] = $113;
   $114 = $3;
   $115 = ((($114)) + 224|0);
   $116 = ((($115)) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ($117>>>0)>(0);
   if (!($118)) {
    $119 = $3;
    $120 = ((($119)) + 400|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121>>>0)>(0);
    if (!($122)) {
     break;
    }
   }
   $123 = $3;
   _png_chunk_benign_error($123,16666);
  }
  else if ((label|0) == 23) {
   $126 = $3;
   $127 = $6;
   _png_zstream_error($126,$127);
   $128 = $4;
   $129 = ($128|0)!=(0|0);
   $130 = $3;
   $131 = $3;
   $132 = ((($131)) + 224|0);
   $133 = ((($132)) + 24|0);
   $134 = HEAP32[$133>>2]|0;
   if ($129) {
    _png_chunk_error($130,$134);
    // unreachable;
   }
   _png_chunk_benign_error($130,$134);
   STACKTOP = sp;return;
  }
 } while(0);
 $137 = $5;
 $138 = ($137>>>0)>(0);
 if (!($138)) {
  STACKTOP = sp;return;
 }
 $139 = $4;
 $140 = ($139|0)!=(0|0);
 $141 = $3;
 if ($140) {
  _png_error($141,16644);
  // unreachable;
 }
 _png_chunk_benign_error($141,16688);
 STACKTOP = sp;return;
}
function _png_read_finish_IDAT($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 8;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  _png_read_IDAT_data($7,0,0);
  $8 = $1;
  $9 = ((($8)) + 224|0);
  $10 = ((($9)) + 12|0);
  HEAP32[$10>>2] = 0;
  $11 = $1;
  $12 = ((($11)) + 212|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 8;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $1;
   $17 = ((($16)) + 208|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 | 8;
   HEAP32[$17>>2] = $19;
   $20 = $1;
   $21 = ((($20)) + 212|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 | 8;
   HEAP32[$21>>2] = $23;
  }
 }
 $24 = $1;
 $25 = ((($24)) + 220|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(1229209940);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $1;
 $29 = ((($28)) + 224|0);
 HEAP32[$29>>2] = 0;
 $30 = $1;
 $31 = ((($30)) + 224|0);
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = 0;
 $33 = $1;
 $34 = ((($33)) + 220|0);
 HEAP32[$34>>2] = 0;
 $35 = $1;
 $36 = $1;
 $37 = ((($36)) + 400|0);
 $38 = HEAP32[$37>>2]|0;
 (_png_crc_finish($35,$38)|0);
 STACKTOP = sp;return;
}
function _png_read_finish_row($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 372|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = ((($6)) + 372|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = ((($9)) + 356|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)<($11>>>0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = ((($13)) + 424|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 372|0);
  HEAP32[$19>>2] = 0;
  $20 = $1;
  $21 = ((($20)) + 380|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $1;
  $24 = ((($23)) + 364|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  _memset(($22|0),0,($26|0))|0;
  while(1) {
   $27 = $1;
   $28 = ((($27)) + 425|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = (($29) + 1)<<24>>24;
   HEAP8[$28>>0] = $30;
   $31 = $1;
   $32 = ((($31)) + 425|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)>=(7);
   if ($35) {
    break;
   }
   $36 = $1;
   $37 = ((($36)) + 348|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = ((($39)) + 425|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (16722 + ($42)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = (($38) + ($45))|0;
   $47 = (($46) - 1)|0;
   $48 = $1;
   $49 = ((($48)) + 425|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = (16729 + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = (($47) - ($54))|0;
   $56 = $1;
   $57 = ((($56)) + 425|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (16722 + ($59)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = (($55>>>0) / ($62>>>0))&-1;
   $64 = $1;
   $65 = ((($64)) + 368|0);
   HEAP32[$65>>2] = $63;
   $66 = $1;
   $67 = ((($66)) + 216|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 & 2;
   $70 = ($69|0)==(0);
   if (!($70)) {
    break;
   }
   $71 = $1;
   $72 = ((($71)) + 352|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $1;
   $75 = ((($74)) + 425|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = (16708 + ($77)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = (($73) + ($80))|0;
   $82 = (($81) - 1)|0;
   $83 = $1;
   $84 = ((($83)) + 425|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85&255;
   $87 = (16715 + ($86)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = (($82) - ($89))|0;
   $91 = $1;
   $92 = ((($91)) + 425|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = (16708 + ($94)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = (($90>>>0) / ($97>>>0))&-1;
   $99 = $1;
   $100 = ((($99)) + 356|0);
   HEAP32[$100>>2] = $98;
   $101 = $1;
   $102 = ((($101)) + 356|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==(0);
   if ($104) {
    continue;
   }
   $105 = $1;
   $106 = ((($105)) + 368|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)==(0);
   if (!($108)) {
    break;
   }
  }
  $109 = $1;
  $110 = ((($109)) + 425|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = ($112|0)<(7);
  if ($113) {
   STACKTOP = sp;return;
  }
 }
 $114 = $1;
 _png_read_finish_IDAT($114);
 STACKTOP = sp;return;
}
function _png_read_start_row($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $$sink3 = 0, $$sink5 = 0, $$sink6 = 0, $$sink8 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $8 = $1;
 _png_init_read_transformations($8);
 $9 = $1;
 $10 = ((($9)) + 424|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)!=(0);
 $14 = $1;
 if ($13) {
  $15 = ((($14)) + 216|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 2;
  $18 = ($17|0)==(0);
  $19 = $1;
  $20 = ((($19)) + 352|0);
  $21 = HEAP32[$20>>2]|0;
  if ($18) {
   $22 = HEAP8[16708]|0;
   $23 = $22&255;
   $24 = (($21) + ($23))|0;
   $25 = (($24) - 1)|0;
   $26 = HEAP8[16715]|0;
   $27 = $26&255;
   $28 = (($25) - ($27))|0;
   $29 = HEAP8[16708]|0;
   $30 = $29&255;
   $31 = (($28>>>0) / ($30>>>0))&-1;
   $32 = $1;
   $$sink = $31;$$sink2 = $32;
  } else {
   $33 = $1;
   $$sink = $21;$$sink2 = $33;
  }
  $34 = ((($$sink2)) + 356|0);
  HEAP32[$34>>2] = $$sink;
  $35 = $1;
  $36 = ((($35)) + 348|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $1;
  $39 = ((($38)) + 425|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = (16722 + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (($37) + ($44))|0;
  $46 = (($45) - 1)|0;
  $47 = $1;
  $48 = ((($47)) + 425|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (16729 + ($50)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = (($46) - ($53))|0;
  $55 = $1;
  $56 = ((($55)) + 425|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = (16722 + ($58)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($54>>>0) / ($61>>>0))&-1;
  $63 = $1;
  $$sink3 = $62;$$sink5 = $63;
 } else {
  $64 = ((($14)) + 352|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $1;
  $67 = ((($66)) + 356|0);
  HEAP32[$67>>2] = $65;
  $68 = $1;
  $69 = ((($68)) + 348|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $1;
  $$sink3 = $70;$$sink5 = $71;
 }
 $72 = ((($$sink5)) + 368|0);
 HEAP32[$72>>2] = $$sink3;
 $73 = $1;
 $74 = ((($73)) + 430|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $2 = $76;
 $77 = $1;
 $78 = ((($77)) + 216|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 & 4;
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $1;
  $83 = ((($82)) + 428|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = ($85|0)<(8);
  if ($86) {
   $2 = 8;
  }
 }
 $87 = $1;
 $88 = ((($87)) + 216|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 4096;
 $91 = ($90|0)!=(0);
 do {
  if ($91) {
   $92 = $1;
   $93 = ((($92)) + 427|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = ($95|0)==(3);
   $97 = $1;
   if ($96) {
    $98 = ((($97)) + 420|0);
    $99 = HEAP16[$98>>1]|0;
    $100 = $99&65535;
    $101 = ($100|0)!=(0);
    if ($101) {
     $2 = 32;
     break;
    } else {
     $2 = 24;
     break;
    }
   }
   $102 = ((($97)) + 427|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = ($104|0)==(0);
   if (!($105)) {
    $115 = $1;
    $116 = ((($115)) + 427|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = $117&255;
    $119 = ($118|0)==(2);
    if (!($119)) {
     break;
    }
    $120 = $1;
    $121 = ((($120)) + 420|0);
    $122 = HEAP16[$121>>1]|0;
    $123 = $122&65535;
    $124 = ($123|0)!=(0);
    if (!($124)) {
     break;
    }
    $125 = $2;
    $126 = $125<<2;
    $2 = $126;
    $127 = $2;
    $128 = (($127|0) / 3)&-1;
    $2 = $128;
    break;
   }
   $106 = $2;
   $107 = ($106|0)<(8);
   if ($107) {
    $2 = 8;
   }
   $108 = $1;
   $109 = ((($108)) + 420|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110&65535;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $2;
    $114 = $113<<1;
    $2 = $114;
   }
  }
 } while(0);
 $129 = $1;
 $130 = ((($129)) + 216|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $131 & 512;
 $133 = ($132|0)!=(0);
 do {
  if ($133) {
   $134 = $1;
   $135 = ((($134)) + 216|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 & 4096;
   $138 = ($137|0)!=(0);
   $139 = $1;
   if (!($138)) {
    $146 = ((($139)) + 216|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = $147 & -513;
    HEAP32[$146>>2] = $148;
    break;
   }
   $140 = ((($139)) + 428|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = ($142|0)<(16);
   if ($143) {
    $144 = $2;
    $145 = $144<<1;
    $2 = $145;
   }
  }
 } while(0);
 $149 = $1;
 $150 = ((($149)) + 216|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 & 32768;
 $153 = ($152|0)!=(0);
 do {
  if ($153) {
   $154 = $1;
   $155 = ((($154)) + 427|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = ($157|0)==(0);
   if ($158) {
    $159 = $2;
    $160 = ($159|0)<=(8);
    if ($160) {
     $2 = 16;
     break;
    } else {
     $2 = 32;
     break;
    }
   }
   $161 = $1;
   $162 = ((($161)) + 427|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = ($164|0)==(2);
   if (!($165)) {
    $166 = $1;
    $167 = ((($166)) + 427|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = ($169|0)==(3);
    if (!($170)) {
     break;
    }
   }
   $171 = $2;
   $172 = ($171|0)<=(32);
   if ($172) {
    $2 = 32;
    break;
   } else {
    $2 = 64;
    break;
   }
  }
 } while(0);
 $173 = $1;
 $174 = ((($173)) + 216|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = $175 & 16384;
 $177 = ($176|0)!=(0);
 do {
  if ($177) {
   $178 = $1;
   $179 = ((($178)) + 420|0);
   $180 = HEAP16[$179>>1]|0;
   $181 = $180&65535;
   $182 = ($181|0)!=(0);
   if ($182) {
    $183 = $1;
    $184 = ((($183)) + 216|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $185 & 4096;
    $187 = ($186|0)!=(0);
    if (!($187)) {
     label = 41;
    }
   } else {
    label = 41;
   }
   if ((label|0) == 41) {
    $188 = $1;
    $189 = ((($188)) + 216|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $190 & 32768;
    $192 = ($191|0)!=(0);
    if (!($192)) {
     $193 = $1;
     $194 = ((($193)) + 427|0);
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = ($196|0)==(4);
     if (!($197)) {
      $200 = $2;
      $201 = ($200|0)<=(8);
      $202 = $1;
      $203 = ((($202)) + 427|0);
      $204 = HEAP8[$203>>0]|0;
      $205 = $204&255;
      $206 = ($205|0)==(6);
      if ($201) {
       if ($206) {
        $2 = 32;
        break;
       } else {
        $2 = 24;
        break;
       }
      } else {
       if ($206) {
        $2 = 64;
        break;
       } else {
        $2 = 48;
        break;
       }
      }
     }
    }
   }
   $198 = $2;
   $199 = ($198|0)<=(16);
   if ($199) {
    $2 = 32;
    break;
   } else {
    $2 = 64;
    break;
   }
  }
 } while(0);
 $207 = $1;
 $208 = ((($207)) + 216|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = $209 & 1048576;
 $211 = ($210|0)!=(0);
 if ($211) {
  $212 = $1;
  $213 = ((($212)) + 204|0);
  $214 = HEAP8[$213>>0]|0;
  $215 = $214&255;
  $216 = $1;
  $217 = ((($216)) + 205|0);
  $218 = HEAP8[$217>>0]|0;
  $219 = $218&255;
  $220 = Math_imul($215, $219)|0;
  $4 = $220;
  $221 = $4;
  $222 = $2;
  $223 = ($221|0)>($222|0);
  if ($223) {
   $224 = $4;
   $2 = $224;
  }
 }
 $225 = $2;
 $226 = $225&255;
 $227 = $1;
 $228 = ((($227)) + 434|0);
 HEAP8[$228>>0] = $226;
 $229 = $1;
 $230 = ((($229)) + 435|0);
 HEAP8[$230>>0] = 0;
 $231 = $1;
 $232 = ((($231)) + 348|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = (($233) + 7)|0;
 $235 = $234 & -8;
 $3 = $235;
 $236 = $2;
 $237 = ($236|0)>=(8);
 $238 = $3;
 $239 = $2;
 if ($237) {
  $240 = $239 >>> 3;
  $241 = Math_imul($238, $240)|0;
  $246 = $241;
 } else {
  $242 = Math_imul($238, $239)|0;
  $243 = (($242) + 7)|0;
  $244 = $243 >>> 3;
  $246 = $244;
 }
 $245 = (($246) + 1)|0;
 $247 = $2;
 $248 = (($247) + 7)|0;
 $249 = $248 >> 3;
 $250 = (($245) + ($249))|0;
 $3 = $250;
 $251 = $3;
 $252 = (($251) + 48)|0;
 $253 = $1;
 $254 = ((($253)) + 752|0);
 $255 = HEAP32[$254>>2]|0;
 $256 = ($252>>>0)>($255>>>0);
 if ($256) {
  $257 = $1;
  $258 = $1;
  $259 = ((($258)) + 696|0);
  $260 = HEAP32[$259>>2]|0;
  _png_free($257,$260);
  $261 = $1;
  $262 = $1;
  $263 = ((($262)) + 772|0);
  $264 = HEAP32[$263>>2]|0;
  _png_free($261,$264);
  $265 = $1;
  $266 = ((($265)) + 424|0);
  $267 = HEAP8[$266>>0]|0;
  $268 = $267&255;
  $269 = ($268|0)!=(0);
  $270 = $1;
  $271 = $3;
  $272 = (($271) + 48)|0;
  if ($269) {
   $273 = (_png_calloc($270,$272)|0);
   $274 = $1;
   $$sink6 = $273;$$sink8 = $274;
  } else {
   $275 = (_png_malloc($270,$272)|0);
   $276 = $1;
   $$sink6 = $275;$$sink8 = $276;
  }
  $277 = ((($$sink8)) + 696|0);
  HEAP32[$277>>2] = $$sink6;
  $278 = $1;
  $279 = $3;
  $280 = (($279) + 48)|0;
  $281 = (_png_malloc($278,$280)|0);
  $282 = $1;
  $283 = ((($282)) + 772|0);
  HEAP32[$283>>2] = $281;
  $284 = $1;
  $285 = ((($284)) + 696|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = ((($286)) + 32|0);
  $5 = $287;
  $288 = $5;
  $289 = $288;
  $290 = (($289) - 0)|0;
  $291 = $290 & 15;
  $6 = $291;
  $292 = $5;
  $293 = $6;
  $294 = (0 - ($293))|0;
  $295 = (($292) + ($294)|0);
  $296 = ((($295)) + -1|0);
  $297 = $1;
  $298 = ((($297)) + 384|0);
  HEAP32[$298>>2] = $296;
  $299 = $1;
  $300 = ((($299)) + 772|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = ((($301)) + 32|0);
  $5 = $302;
  $303 = $5;
  $304 = $303;
  $305 = (($304) - 0)|0;
  $306 = $305 & 15;
  $6 = $306;
  $307 = $5;
  $308 = $6;
  $309 = (0 - ($308))|0;
  $310 = (($307) + ($309)|0);
  $311 = ((($310)) + -1|0);
  $312 = $1;
  $313 = ((($312)) + 380|0);
  HEAP32[$313>>2] = $311;
  $314 = $3;
  $315 = (($314) + 48)|0;
  $316 = $1;
  $317 = ((($316)) + 752|0);
  HEAP32[$317>>2] = $315;
 }
 $318 = $1;
 $319 = ((($318)) + 364|0);
 $320 = HEAP32[$319>>2]|0;
 $321 = ($320>>>0)>(4294967294);
 $322 = $1;
 if ($321) {
  _png_error($322,16736);
  // unreachable;
 }
 $323 = ((($322)) + 380|0);
 $324 = HEAP32[$323>>2]|0;
 $325 = $1;
 $326 = ((($325)) + 364|0);
 $327 = HEAP32[$326>>2]|0;
 $328 = (($327) + 1)|0;
 _memset(($324|0),0,($328|0))|0;
 $329 = $1;
 $330 = ((($329)) + 756|0);
 $331 = HEAP32[$330>>2]|0;
 $332 = ($331|0)!=(0|0);
 if ($332) {
  $333 = $1;
  $334 = ((($333)) + 756|0);
  $335 = HEAP32[$334>>2]|0;
  $7 = $335;
  $336 = $1;
  $337 = ((($336)) + 760|0);
  HEAP32[$337>>2] = 0;
  $338 = $1;
  $339 = ((($338)) + 756|0);
  HEAP32[$339>>2] = 0;
  $340 = $1;
  $341 = $7;
  _png_free($340,$341);
 }
 $342 = $1;
 $343 = (_png_inflate_claim($342,1229209940)|0);
 $344 = ($343|0)!=(0);
 $345 = $1;
 if ($344) {
  $346 = $1;
  $347 = ((($346)) + 224|0);
  $348 = ((($347)) + 24|0);
  $349 = HEAP32[$348>>2]|0;
  _png_error($345,$349);
  // unreachable;
 } else {
  $350 = ((($345)) + 212|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = $351 | 64;
  HEAP32[$350>>2] = $352;
  STACKTOP = sp;return;
 }
}
function _png_set_bKGD($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $4;
 $9 = ($8|0)==(0|0);
 $or$cond = $7 | $9;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 $or$cond3 = $or$cond | $11;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $12 = $4;
 $13 = ((($12)) + 170|0);
 $14 = $5;
 ;HEAP16[$13>>1]=HEAP16[$14>>1]|0;HEAP16[$13+2>>1]=HEAP16[$14+2>>1]|0;HEAP16[$13+4>>1]=HEAP16[$14+4>>1]|0;HEAP16[$13+6>>1]=HEAP16[$14+6>>1]|0;HEAP16[$13+8>>1]=HEAP16[$14+8>>1]|0;
 $15 = $4;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 | 32;
 HEAP32[$16>>2] = $18;
 STACKTOP = sp;return;
}
function _png_set_hIST($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 $9 = $4;
 $10 = ($9|0)==(0|0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $11 = $4;
 $12 = ((($11)) + 20|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = $4;
  $17 = ((($16)) + 20|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = ($19|0)>(256);
  if (!($20)) {
   $22 = $3;
   $23 = $4;
   _png_free_data($22,$23,8,0);
   $24 = $3;
   $25 = (_png_malloc_warn($24,512)|0);
   $26 = $4;
   $27 = ((($26)) + 204|0);
   HEAP32[$27>>2] = $25;
   $28 = $4;
   $29 = ((($28)) + 204|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if ($31) {
    $32 = $3;
    _png_warning($32,16827);
    STACKTOP = sp;return;
   }
   $33 = $4;
   $34 = ((($33)) + 232|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 | 8;
   HEAP32[$34>>2] = $36;
   $6 = 0;
   while(1) {
    $37 = $6;
    $38 = $4;
    $39 = ((($38)) + 20|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = ($37|0)<($41|0);
    if (!($42)) {
     break;
    }
    $43 = $5;
    $44 = $6;
    $45 = (($43) + ($44<<1)|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = $4;
    $48 = ((($47)) + 204|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $6;
    $51 = (($49) + ($50<<1)|0);
    HEAP16[$51>>1] = $46;
    $52 = $6;
    $53 = (($52) + 1)|0;
    $6 = $53;
   }
   $54 = $4;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 | 64;
   HEAP32[$55>>2] = $57;
   STACKTOP = sp;return;
  }
 }
 $21 = $3;
 _png_warning($21,16781);
 STACKTOP = sp;return;
}
function _png_set_IHDR($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = ($18|0)==(0|0);
 $20 = $10;
 $21 = ($20|0)==(0|0);
 $or$cond = $19 | $21;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $22 = $11;
 $23 = $10;
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $25 = $10;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = $24;
 $27 = $13;
 $28 = $27&255;
 $29 = $10;
 $30 = ((($29)) + 24|0);
 HEAP8[$30>>0] = $28;
 $31 = $14;
 $32 = $31&255;
 $33 = $10;
 $34 = ((($33)) + 25|0);
 HEAP8[$34>>0] = $32;
 $35 = $16;
 $36 = $35&255;
 $37 = $10;
 $38 = ((($37)) + 26|0);
 HEAP8[$38>>0] = $36;
 $39 = $17;
 $40 = $39&255;
 $41 = $10;
 $42 = ((($41)) + 27|0);
 HEAP8[$42>>0] = $40;
 $43 = $15;
 $44 = $43&255;
 $45 = $10;
 $46 = ((($45)) + 28|0);
 HEAP8[$46>>0] = $44;
 $47 = $9;
 $48 = $10;
 $49 = HEAP32[$48>>2]|0;
 $50 = $10;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $10;
 $54 = ((($53)) + 24|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $10;
 $58 = ((($57)) + 25|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $10;
 $62 = ((($61)) + 28|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $10;
 $66 = ((($65)) + 26|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $10;
 $70 = ((($69)) + 27|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 _png_check_IHDR($47,$49,$52,$56,$60,$64,$68,$72);
 $73 = $10;
 $74 = ((($73)) + 25|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = ($76|0)==(3);
 $78 = $10;
 if ($77) {
  $79 = ((($78)) + 29|0);
  HEAP8[$79>>0] = 1;
 } else {
  $80 = ((($78)) + 25|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $82 & 2;
  $84 = ($83|0)!=(0);
  $85 = $10;
  $86 = ((($85)) + 29|0);
  $$sink = $84 ? 3 : 1;
  HEAP8[$86>>0] = $$sink;
 }
 $87 = $10;
 $88 = ((($87)) + 25|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = $90 & 4;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $10;
  $94 = ((($93)) + 29|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = (($95) + 1)<<24>>24;
  HEAP8[$94>>0] = $96;
 }
 $97 = $10;
 $98 = ((($97)) + 29|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = $10;
 $102 = ((($101)) + 24|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = Math_imul($100, $104)|0;
 $106 = $105&255;
 $107 = $10;
 $108 = ((($107)) + 30|0);
 HEAP8[$108>>0] = $106;
 $109 = $10;
 $110 = ((($109)) + 30|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = ($112|0)>=(8);
 $114 = $11;
 $115 = $10;
 $116 = ((($115)) + 30|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 if ($113) {
  $119 = $118 >>> 3;
  $120 = Math_imul($114, $119)|0;
  $126 = $120;
 } else {
  $121 = Math_imul($114, $118)|0;
  $122 = (($121) + 7)|0;
  $123 = $122 >>> 3;
  $126 = $123;
 }
 $124 = $10;
 $125 = ((($124)) + 12|0);
 HEAP32[$125>>2] = $126;
 STACKTOP = sp;return;
}
function _png_set_oFFs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 $12 = $6;
 $13 = ($12|0)==(0|0);
 $or$cond = $11 | $13;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $14 = $7;
 $15 = $6;
 $16 = ((($15)) + 180|0);
 HEAP32[$16>>2] = $14;
 $17 = $8;
 $18 = $6;
 $19 = ((($18)) + 184|0);
 HEAP32[$19>>2] = $17;
 $20 = $9;
 $21 = $20&255;
 $22 = $6;
 $23 = ((($22)) + 188|0);
 HEAP8[$23>>0] = $21;
 $24 = $6;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | 256;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function _png_set_pCAL($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $20 = $9;
 $21 = ($20|0)==(0|0);
 $22 = $10;
 $23 = ($22|0)==(0|0);
 $or$cond = $21 | $23;
 $24 = $11;
 $25 = ($24|0)==(0|0);
 $or$cond3 = $or$cond | $25;
 $26 = $16;
 $27 = ($26|0)==(0|0);
 $or$cond5 = $or$cond3 | $27;
 if ($or$cond5) {
  STACKTOP = sp;return;
 }
 $28 = $15;
 $29 = ($28|0)>(0);
 $30 = $17;
 $31 = ($30|0)==(0|0);
 $or$cond7 = $29 & $31;
 if ($or$cond7) {
  STACKTOP = sp;return;
 }
 $32 = $11;
 $33 = (_strlen($32)|0);
 $34 = (($33) + 1)|0;
 $18 = $34;
 $35 = $14;
 $36 = ($35|0)<(0);
 $37 = $14;
 $38 = ($37|0)>(3);
 $or$cond9 = $36 | $38;
 if ($or$cond9) {
  $39 = $9;
  _png_error($39,16867);
  // unreachable;
 }
 $40 = $15;
 $41 = ($40|0)<(0);
 $42 = $15;
 $43 = ($42|0)>(255);
 $or$cond11 = $41 | $43;
 if ($or$cond11) {
  $44 = $9;
  _png_error($44,16894);
  // unreachable;
 }
 $19 = 0;
 while(1) {
  $45 = $19;
  $46 = $15;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   label = 13;
   break;
  }
  $48 = $17;
  $49 = $19;
  $50 = (($48) + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0|0);
  if ($52) {
   label = 11;
   break;
  }
  $53 = $17;
  $54 = $19;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $17;
  $58 = $19;
  $59 = (($57) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_strlen($60)|0);
  $62 = (_png_check_fp_string($56,$61)|0);
  $63 = ($62|0)!=(0);
  if (!($63)) {
   label = 11;
   break;
  }
  $65 = $19;
  $66 = (($65) + 1)|0;
  $19 = $66;
 }
 if ((label|0) == 11) {
  $64 = $9;
  _png_error($64,16923);
  // unreachable;
 }
 else if ((label|0) == 13) {
  $67 = $9;
  $68 = $18;
  $69 = (_png_malloc_warn($67,$68)|0);
  $70 = $10;
  $71 = ((($70)) + 208|0);
  HEAP32[$71>>2] = $69;
  $72 = $10;
  $73 = ((($72)) + 208|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)==(0|0);
  if ($75) {
   $76 = $9;
   _png_warning($76,16957);
   STACKTOP = sp;return;
  }
  $77 = $10;
  $78 = ((($77)) + 208|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $11;
  $81 = $18;
  _memcpy(($79|0),($80|0),($81|0))|0;
  $82 = $12;
  $83 = $10;
  $84 = ((($83)) + 212|0);
  HEAP32[$84>>2] = $82;
  $85 = $13;
  $86 = $10;
  $87 = ((($86)) + 216|0);
  HEAP32[$87>>2] = $85;
  $88 = $14;
  $89 = $88&255;
  $90 = $10;
  $91 = ((($90)) + 228|0);
  HEAP8[$91>>0] = $89;
  $92 = $15;
  $93 = $92&255;
  $94 = $10;
  $95 = ((($94)) + 229|0);
  HEAP8[$95>>0] = $93;
  $96 = $16;
  $97 = (_strlen($96)|0);
  $98 = (($97) + 1)|0;
  $18 = $98;
  $99 = $9;
  $100 = $18;
  $101 = (_png_malloc_warn($99,$100)|0);
  $102 = $10;
  $103 = ((($102)) + 220|0);
  HEAP32[$103>>2] = $101;
  $104 = $10;
  $105 = ((($104)) + 220|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)==(0|0);
  if ($107) {
   $108 = $9;
   _png_warning($108,16994);
   STACKTOP = sp;return;
  }
  $109 = $10;
  $110 = ((($109)) + 220|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $16;
  $113 = $18;
  _memcpy(($111|0),($112|0),($113|0))|0;
  $114 = $9;
  $115 = $15;
  $116 = (($115) + 1)|0;
  $117 = $116<<2;
  $118 = (_png_malloc_warn($114,$117)|0);
  $119 = $10;
  $120 = ((($119)) + 224|0);
  HEAP32[$120>>2] = $118;
  $121 = $10;
  $122 = ((($121)) + 224|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(0|0);
  if ($124) {
   $125 = $9;
   _png_warning($125,17029);
   STACKTOP = sp;return;
  }
  $126 = $10;
  $127 = ((($126)) + 224|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $15;
  $130 = (($129) + 1)|0;
  $131 = $130<<2;
  _memset(($128|0),0,($131|0))|0;
  $19 = 0;
  while(1) {
   $132 = $19;
   $133 = $15;
   $134 = ($132|0)<($133|0);
   if (!($134)) {
    label = 24;
    break;
   }
   $135 = $17;
   $136 = $19;
   $137 = (($135) + ($136<<2)|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (_strlen($138)|0);
   $140 = (($139) + 1)|0;
   $18 = $140;
   $141 = $9;
   $142 = $18;
   $143 = (_png_malloc_warn($141,$142)|0);
   $144 = $10;
   $145 = ((($144)) + 224|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $19;
   $148 = (($146) + ($147<<2)|0);
   HEAP32[$148>>2] = $143;
   $149 = $10;
   $150 = ((($149)) + 224|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $19;
   $153 = (($151) + ($152<<2)|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = ($154|0)==(0|0);
   if ($155) {
    label = 22;
    break;
   }
   $157 = $10;
   $158 = ((($157)) + 224|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $19;
   $161 = (($159) + ($160<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $17;
   $164 = $19;
   $165 = (($163) + ($164<<2)|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $18;
   _memcpy(($162|0),($166|0),($167|0))|0;
   $168 = $19;
   $169 = (($168) + 1)|0;
   $19 = $169;
  }
  if ((label|0) == 22) {
   $156 = $9;
   _png_warning($156,17065);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 24) {
   $170 = $10;
   $171 = ((($170)) + 8|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = $172 | 1024;
   HEAP32[$171>>2] = $173;
   $174 = $10;
   $175 = ((($174)) + 232|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $176 | 128;
   HEAP32[$175>>2] = $177;
   STACKTOP = sp;return;
  }
 }
}
function _png_set_sCAL_s($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 $11 = 0;
 $12 = $5;
 $13 = ($12|0)==(0|0);
 $14 = $6;
 $15 = ($14|0)==(0|0);
 $or$cond = $13 | $15;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $16 = $7;
 $17 = ($16|0)!=(1);
 $18 = $7;
 $19 = ($18|0)!=(2);
 $or$cond3 = $17 & $19;
 if ($or$cond3) {
  $20 = $5;
  _png_error($20,17104);
  // unreachable;
 }
 $21 = $8;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $34 = $5;
  _png_error($34,17122);
  // unreachable;
 }
 $23 = $8;
 $24 = (_strlen($23)|0);
 $10 = $24;
 $25 = ($24|0)==(0);
 if ($25) {
  $34 = $5;
  _png_error($34,17122);
  // unreachable;
 }
 $26 = $8;
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 << 24 >> 24;
 $29 = ($28|0)==(45);
 if ($29) {
  $34 = $5;
  _png_error($34,17122);
  // unreachable;
 }
 $30 = $8;
 $31 = $10;
 $32 = (_png_check_fp_string($30,$31)|0);
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $34 = $5;
  _png_error($34,17122);
  // unreachable;
 }
 $35 = $9;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $48 = $5;
  _png_error($48,17141);
  // unreachable;
 }
 $37 = $9;
 $38 = (_strlen($37)|0);
 $11 = $38;
 $39 = ($38|0)==(0);
 if ($39) {
  $48 = $5;
  _png_error($48,17141);
  // unreachable;
 }
 $40 = $9;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41 << 24 >> 24;
 $43 = ($42|0)==(45);
 if ($43) {
  $48 = $5;
  _png_error($48,17141);
  // unreachable;
 }
 $44 = $9;
 $45 = $11;
 $46 = (_png_check_fp_string($44,$45)|0);
 $47 = ($46|0)!=(0);
 if (!($47)) {
  $48 = $5;
  _png_error($48,17141);
  // unreachable;
 }
 $49 = $7;
 $50 = $49&255;
 $51 = $6;
 $52 = ((($51)) + 252|0);
 HEAP8[$52>>0] = $50;
 $53 = $10;
 $54 = (($53) + 1)|0;
 $10 = $54;
 $55 = $5;
 $56 = $10;
 $57 = (_png_malloc_warn($55,$56)|0);
 $58 = $6;
 $59 = ((($58)) + 256|0);
 HEAP32[$59>>2] = $57;
 $60 = $6;
 $61 = ((($60)) + 256|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0|0);
 if ($63) {
  $64 = $5;
  _png_warning($64,17161);
  STACKTOP = sp;return;
 }
 $65 = $6;
 $66 = ((($65)) + 256|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $8;
 $69 = $10;
 _memcpy(($67|0),($68|0),($69|0))|0;
 $70 = $11;
 $71 = (($70) + 1)|0;
 $11 = $71;
 $72 = $5;
 $73 = $11;
 $74 = (_png_malloc_warn($72,$73)|0);
 $75 = $6;
 $76 = ((($75)) + 260|0);
 HEAP32[$76>>2] = $74;
 $77 = $6;
 $78 = ((($77)) + 260|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)==(0|0);
 if ($80) {
  $81 = $5;
  $82 = $6;
  $83 = ((($82)) + 256|0);
  $84 = HEAP32[$83>>2]|0;
  _png_free($81,$84);
  $85 = $6;
  $86 = ((($85)) + 256|0);
  HEAP32[$86>>2] = 0;
  $87 = $5;
  _png_warning($87,17161);
  STACKTOP = sp;return;
 } else {
  $88 = $6;
  $89 = ((($88)) + 260|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $9;
  $92 = $11;
  _memcpy(($90|0),($91|0),($92|0))|0;
  $93 = $6;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | 16384;
  HEAP32[$94>>2] = $96;
  $97 = $6;
  $98 = ((($97)) + 232|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $99 | 256;
  HEAP32[$98>>2] = $100;
  STACKTOP = sp;return;
 }
}
function _png_set_pHYs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 $12 = $6;
 $13 = ($12|0)==(0|0);
 $or$cond = $11 | $13;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $14 = $7;
 $15 = $6;
 $16 = ((($15)) + 192|0);
 HEAP32[$16>>2] = $14;
 $17 = $8;
 $18 = $6;
 $19 = ((($18)) + 196|0);
 HEAP32[$19>>2] = $17;
 $20 = $9;
 $21 = $20&255;
 $22 = $6;
 $23 = ((($22)) + 200|0);
 HEAP8[$23>>0] = $21;
 $24 = $6;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | 128;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function _png_set_PLTE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 $11 = $5;
 $12 = ($11|0)==(0|0);
 $or$cond = $10 | $12;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $13 = $5;
 $14 = ((($13)) + 25|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ($16|0)==(3);
 if ($17) {
  $18 = $5;
  $19 = ((($18)) + 24|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = 1 << $21;
  $23 = $22;
 } else {
  $23 = 256;
 }
 $8 = $23;
 $24 = $7;
 $25 = ($24|0)<(0);
 if (!($25)) {
  $26 = $7;
  $27 = $8;
  $28 = ($26|0)>($27|0);
  if (!($28)) {
   $35 = $7;
   $36 = ($35|0)>(0);
   $37 = $6;
   $38 = ($37|0)==(0|0);
   $or$cond3 = $36 & $38;
   if ($or$cond3) {
    $46 = $4;
    _png_error($46,17231);
    // unreachable;
   }
   $39 = $7;
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = $4;
    $42 = ((($41)) + 676|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $43 & 1;
    $45 = ($44|0)==(0);
    if ($45) {
     $46 = $4;
     _png_error($46,17231);
     // unreachable;
    }
   }
   $47 = $4;
   $48 = $5;
   _png_free_data($47,$48,4096,0);
   $49 = $4;
   $50 = (_png_calloc($49,768)|0);
   $51 = $4;
   $52 = ((($51)) + 408|0);
   HEAP32[$52>>2] = $50;
   $53 = $7;
   $54 = ($53|0)>(0);
   if ($54) {
    $55 = $4;
    $56 = ((($55)) + 408|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $6;
    $59 = $7;
    $60 = ($59*3)|0;
    _memcpy(($57|0),($58|0),($60|0))|0;
   }
   $61 = $4;
   $62 = ((($61)) + 408|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $5;
   $65 = ((($64)) + 16|0);
   HEAP32[$65>>2] = $63;
   $66 = $7;
   $67 = $66&65535;
   $68 = $4;
   $69 = ((($68)) + 412|0);
   HEAP16[$69>>1] = $67;
   $70 = $5;
   $71 = ((($70)) + 20|0);
   HEAP16[$71>>1] = $67;
   $72 = $5;
   $73 = ((($72)) + 232|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 | 4096;
   HEAP32[$73>>2] = $75;
   $76 = $5;
   $77 = ((($76)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 | 8;
   HEAP32[$77>>2] = $79;
   STACKTOP = sp;return;
  }
 }
 $29 = $5;
 $30 = ((($29)) + 25|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)==(3);
 $34 = $4;
 if ($33) {
  _png_error($34,17208);
  // unreachable;
 }
 _png_warning($34,17208);
 STACKTOP = sp;return;
}
function _png_set_sBIT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $4;
 $9 = ($8|0)==(0|0);
 $or$cond = $7 | $9;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 $or$cond3 = $or$cond | $11;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $12 = $4;
 $13 = ((($12)) + 148|0);
 $14 = $5;
 ;HEAP8[$13>>0]=HEAP8[$14>>0]|0;HEAP8[$13+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$14+3>>0]|0;HEAP8[$13+4>>0]=HEAP8[$14+4>>0]|0;
 $15 = $4;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 | 2;
 HEAP32[$16>>2] = $18;
 STACKTOP = sp;return;
}
function _png_set_text_2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink11 = 0, $$sink6 = 0, $$sink8 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $18 = $5;
 $19 = ($18|0)==(0|0);
 $20 = $6;
 $21 = ($20|0)==(0|0);
 $or$cond = $19 | $21;
 $22 = $8;
 $23 = ($22|0)<=(0);
 $or$cond3 = $or$cond | $23;
 $24 = $7;
 $25 = ($24|0)==(0|0);
 $or$cond5 = $or$cond3 | $25;
 if ($or$cond5) {
  $4 = 0;
  $301 = $4;
  STACKTOP = sp;return ($301|0);
 }
 $26 = $8;
 $27 = $6;
 $28 = ((($27)) + 132|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $6;
 $31 = ((($30)) + 128|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($29) - ($32))|0;
 $34 = ($26|0)>($33|0);
 do {
  if ($34) {
   $35 = $6;
   $36 = ((($35)) + 128|0);
   $37 = HEAP32[$36>>2]|0;
   $10 = $37;
   $12 = 0;
   $38 = $10;
   $11 = $38;
   $39 = $8;
   $40 = $11;
   $41 = (2147483647 - ($40))|0;
   $42 = ($39|0)<=($41|0);
   if ($42) {
    $43 = $8;
    $44 = $11;
    $45 = (($44) + ($43))|0;
    $11 = $45;
    $46 = $11;
    $47 = ($46|0)<(2147483639);
    if ($47) {
     $48 = $11;
     $49 = (($48) + 8)|0;
     $50 = $49 & -8;
     $11 = $50;
    } else {
     $11 = 2147483647;
    }
    $51 = $5;
    $52 = $6;
    $53 = ((($52)) + 136|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $10;
    $56 = $11;
    $57 = $10;
    $58 = (($56) - ($57))|0;
    $59 = (_png_realloc_array($51,$54,$55,$58,28)|0);
    $12 = $59;
   }
   $60 = $12;
   $61 = ($60|0)==(0|0);
   $62 = $5;
   if (!($61)) {
    $63 = $6;
    $64 = ((($63)) + 136|0);
    $65 = HEAP32[$64>>2]|0;
    _png_free($62,$65);
    $66 = $12;
    $67 = $6;
    $68 = ((($67)) + 136|0);
    HEAP32[$68>>2] = $66;
    $69 = $6;
    $70 = ((($69)) + 232|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $71 | 16384;
    HEAP32[$70>>2] = $72;
    $73 = $11;
    $74 = $6;
    $75 = ((($74)) + 132|0);
    HEAP32[$75>>2] = $73;
    break;
   }
   _png_chunk_report($62,17247,1);
   $4 = 1;
   $301 = $4;
   STACKTOP = sp;return ($301|0);
  }
 } while(0);
 $9 = 0;
 L19: while(1) {
  $76 = $9;
  $77 = $8;
  $78 = ($76|0)<($77|0);
  if (!($78)) {
   label = 42;
   break;
  }
  $79 = $6;
  $80 = ((($79)) + 136|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $6;
  $83 = ((($82)) + 128|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) + (($84*28)|0)|0);
  $17 = $85;
  $86 = $7;
  $87 = $9;
  $88 = (($86) + (($87*28)|0)|0);
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(0|0);
  do {
   if (!($91)) {
    $92 = $7;
    $93 = $9;
    $94 = (($92) + (($93*28)|0)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)<(-1);
    if (!($96)) {
     $97 = $7;
     $98 = $9;
     $99 = (($97) + (($98*28)|0)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)>=(3);
     if (!($101)) {
      $103 = $7;
      $104 = $9;
      $105 = (($103) + (($104*28)|0)|0);
      $106 = ((($105)) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (_strlen($107)|0);
      $14 = $108;
      $109 = $7;
      $110 = $9;
      $111 = (($109) + (($110*28)|0)|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($112|0)<=(0);
      do {
       if ($113) {
        $15 = 0;
        $16 = 0;
       } else {
        $114 = $7;
        $115 = $9;
        $116 = (($114) + (($115*28)|0)|0);
        $117 = ((($116)) + 20|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = ($118|0)!=(0|0);
        if ($119) {
         $120 = $7;
         $121 = $9;
         $122 = (($120) + (($121*28)|0)|0);
         $123 = ((($122)) + 20|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = (_strlen($124)|0);
         $15 = $125;
        } else {
         $15 = 0;
        }
        $126 = $7;
        $127 = $9;
        $128 = (($126) + (($127*28)|0)|0);
        $129 = ((($128)) + 24|0);
        $130 = HEAP32[$129>>2]|0;
        $131 = ($130|0)!=(0|0);
        if ($131) {
         $132 = $7;
         $133 = $9;
         $134 = (($132) + (($133*28)|0)|0);
         $135 = ((($134)) + 24|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = (_strlen($136)|0);
         $16 = $137;
         break;
        } else {
         $16 = 0;
         break;
        }
       }
      } while(0);
      $138 = $7;
      $139 = $9;
      $140 = (($138) + (($139*28)|0)|0);
      $141 = ((($140)) + 8|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($142|0)==(0|0);
      if ($143) {
       label = 28;
      } else {
       $144 = $7;
       $145 = $9;
       $146 = (($144) + (($145*28)|0)|0);
       $147 = ((($146)) + 8|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = HEAP8[$148>>0]|0;
       $150 = $149 << 24 >> 24;
       $151 = ($150|0)==(0);
       if ($151) {
        label = 28;
       } else {
        $158 = $7;
        $159 = $9;
        $160 = (($158) + (($159*28)|0)|0);
        $161 = ((($160)) + 8|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = (_strlen($162)|0);
        $13 = $163;
        $164 = $7;
        $165 = $9;
        $166 = (($164) + (($165*28)|0)|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = $17;
        HEAP32[$168>>2] = $167;
       }
      }
      if ((label|0) == 28) {
       label = 0;
       $13 = 0;
       $152 = $7;
       $153 = $9;
       $154 = (($152) + (($153*28)|0)|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($155|0)>(0);
       $157 = $17;
       $$sink = $156 ? 1 : -1;
       HEAP32[$157>>2] = $$sink;
      }
      $169 = $5;
      $170 = $14;
      $171 = $13;
      $172 = (($170) + ($171))|0;
      $173 = $15;
      $174 = (($172) + ($173))|0;
      $175 = $16;
      $176 = (($174) + ($175))|0;
      $177 = (($176) + 4)|0;
      $178 = (_png_malloc_base($169,$177)|0);
      $179 = $17;
      $180 = ((($179)) + 4|0);
      HEAP32[$180>>2] = $178;
      $181 = $17;
      $182 = ((($181)) + 4|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = ($183|0)==(0|0);
      if ($184) {
       label = 31;
       break L19;
      }
      $186 = $17;
      $187 = ((($186)) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = $7;
      $190 = $9;
      $191 = (($189) + (($190*28)|0)|0);
      $192 = ((($191)) + 4|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = $14;
      _memcpy(($188|0),($193|0),($194|0))|0;
      $195 = $17;
      $196 = ((($195)) + 4|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $14;
      $199 = (($197) + ($198)|0);
      HEAP8[$199>>0] = 0;
      $200 = $7;
      $201 = $9;
      $202 = (($200) + (($201*28)|0)|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ($203|0)>(0);
      $205 = $17;
      if ($204) {
       $206 = ((($205)) + 4|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = $14;
       $209 = (($207) + ($208)|0);
       $210 = ((($209)) + 1|0);
       $211 = $17;
       $212 = ((($211)) + 20|0);
       HEAP32[$212>>2] = $210;
       $213 = $17;
       $214 = ((($213)) + 20|0);
       $215 = HEAP32[$214>>2]|0;
       $216 = $7;
       $217 = $9;
       $218 = (($216) + (($217*28)|0)|0);
       $219 = ((($218)) + 20|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = $15;
       _memcpy(($215|0),($220|0),($221|0))|0;
       $222 = $17;
       $223 = ((($222)) + 20|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = $15;
       $226 = (($224) + ($225)|0);
       HEAP8[$226>>0] = 0;
       $227 = $17;
       $228 = ((($227)) + 20|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = $15;
       $231 = (($229) + ($230)|0);
       $232 = ((($231)) + 1|0);
       $233 = $17;
       $234 = ((($233)) + 24|0);
       HEAP32[$234>>2] = $232;
       $235 = $17;
       $236 = ((($235)) + 24|0);
       $237 = HEAP32[$236>>2]|0;
       $238 = $7;
       $239 = $9;
       $240 = (($238) + (($239*28)|0)|0);
       $241 = ((($240)) + 24|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = $16;
       _memcpy(($237|0),($242|0),($243|0))|0;
       $244 = $17;
       $245 = ((($244)) + 24|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = $16;
       $248 = (($246) + ($247)|0);
       HEAP8[$248>>0] = 0;
       $249 = $17;
       $250 = ((($249)) + 24|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = $16;
       $253 = (($251) + ($252)|0);
       $254 = ((($253)) + 1|0);
       $255 = $17;
       $$sink6 = $254;$$sink8 = $255;
      } else {
       $256 = ((($205)) + 20|0);
       HEAP32[$256>>2] = 0;
       $257 = $17;
       $258 = ((($257)) + 24|0);
       HEAP32[$258>>2] = 0;
       $259 = $17;
       $260 = ((($259)) + 4|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = $14;
       $263 = (($261) + ($262)|0);
       $264 = ((($263)) + 1|0);
       $265 = $17;
       $$sink6 = $264;$$sink8 = $265;
      }
      $266 = ((($$sink8)) + 8|0);
      HEAP32[$266>>2] = $$sink6;
      $267 = $13;
      $268 = ($267|0)!=(0);
      if ($268) {
       $269 = $17;
       $270 = ((($269)) + 8|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = $7;
       $273 = $9;
       $274 = (($272) + (($273*28)|0)|0);
       $275 = ((($274)) + 8|0);
       $276 = HEAP32[$275>>2]|0;
       $277 = $13;
       _memcpy(($271|0),($276|0),($277|0))|0;
      }
      $278 = $17;
      $279 = ((($278)) + 8|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $13;
      $282 = (($280) + ($281)|0);
      HEAP8[$282>>0] = 0;
      $283 = $17;
      $284 = HEAP32[$283>>2]|0;
      $285 = ($284|0)>(0);
      if ($285) {
       $286 = $17;
       $287 = ((($286)) + 12|0);
       HEAP32[$287>>2] = 0;
       $288 = $13;
       $289 = $17;
       $$sink11 = $289;$$sink9 = $288;
      } else {
       $290 = $13;
       $291 = $17;
       $292 = ((($291)) + 12|0);
       HEAP32[$292>>2] = $290;
       $293 = $17;
       $$sink11 = $293;$$sink9 = 0;
      }
      $294 = ((($$sink11)) + 16|0);
      HEAP32[$294>>2] = $$sink9;
      $295 = $6;
      $296 = ((($295)) + 128|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = (($297) + 1)|0;
      HEAP32[$296>>2] = $298;
      break;
     }
    }
    $102 = $5;
    _png_chunk_report($102,17268,1);
   }
  } while(0);
  $299 = $9;
  $300 = (($299) + 1)|0;
  $9 = $300;
 }
 if ((label|0) == 31) {
  $185 = $5;
  _png_chunk_report($185,17306,1);
  $4 = 1;
  $301 = $4;
  STACKTOP = sp;return ($301|0);
 }
 else if ((label|0) == 42) {
  $4 = 0;
  $301 = $4;
  STACKTOP = sp;return ($301|0);
 }
 return (0)|0;
}
function _png_set_tIME($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $4;
 $9 = ($8|0)==(0|0);
 $or$cond = $7 | $9;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 $or$cond3 = $or$cond | $11;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $12 = $3;
 $13 = ((($12)) + 208|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 512;
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $5;
 $18 = ((($17)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = $5;
  $23 = ((($22)) + 2|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)>(12);
  if (!($26)) {
   $27 = $5;
   $28 = ((($27)) + 3|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = ($30|0)==(0);
   if (!($31)) {
    $32 = $5;
    $33 = ((($32)) + 3|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = ($35|0)>(31);
    if (!($36)) {
     $37 = $5;
     $38 = ((($37)) + 4|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = ($40|0)>(23);
     if (!($41)) {
      $42 = $5;
      $43 = ((($42)) + 5|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = $44&255;
      $46 = ($45|0)>(59);
      if (!($46)) {
       $47 = $5;
       $48 = ((($47)) + 6|0);
       $49 = HEAP8[$48>>0]|0;
       $50 = $49&255;
       $51 = ($50|0)>(60);
       if (!($51)) {
        $53 = $4;
        $54 = ((($53)) + 140|0);
        $55 = $5;
        ;HEAP16[$54>>1]=HEAP16[$55>>1]|0;HEAP16[$54+2>>1]=HEAP16[$55+2>>1]|0;HEAP16[$54+4>>1]=HEAP16[$55+4>>1]|0;HEAP16[$54+6>>1]=HEAP16[$55+6>>1]|0;
        $56 = $4;
        $57 = ((($56)) + 8|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = $58 | 512;
        HEAP32[$57>>2] = $59;
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  }
 }
 $52 = $3;
 _png_warning($52,17332);
 STACKTOP = sp;return;
}
function _png_set_tRNS($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $12 = ($11|0)==(0|0);
 $13 = $6;
 $14 = ($13|0)==(0|0);
 $or$cond = $12 | $14;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $15 = $7;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $5;
  $18 = $6;
  _png_free_data($17,$18,8192,0);
  $19 = $8;
  $20 = ($19|0)>(0);
  $21 = $8;
  $22 = ($21|0)<=(256);
  $or$cond3 = $20 & $22;
  if ($or$cond3) {
   $23 = $5;
   $24 = (_png_malloc($23,256)|0);
   $25 = $6;
   $26 = ((($25)) + 156|0);
   HEAP32[$26>>2] = $24;
   $27 = $6;
   $28 = ((($27)) + 156|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $7;
   $31 = $8;
   _memcpy(($29|0),($30|0),($31|0))|0;
  }
  $32 = $6;
  $33 = ((($32)) + 156|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = ((($35)) + 520|0);
  HEAP32[$36>>2] = $34;
 }
 $37 = $9;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $6;
  $40 = ((($39)) + 24|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)<(16);
  do {
   if ($43) {
    $44 = $6;
    $45 = ((($44)) + 24|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = 1 << $47;
    $49 = (($48) - 1)|0;
    $10 = $49;
    $50 = $6;
    $51 = ((($50)) + 25|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = ($53|0)==(0);
    if ($54) {
     $55 = $9;
     $56 = ((($55)) + 8|0);
     $57 = HEAP16[$56>>1]|0;
     $58 = $57&65535;
     $59 = $10;
     $60 = ($58|0)>($59|0);
     if (!($60)) {
      label = 10;
     }
    } else {
     label = 10;
    }
    if ((label|0) == 10) {
     $61 = $6;
     $62 = ((($61)) + 25|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = ($64|0)==(2);
     if (!($65)) {
      break;
     }
     $66 = $9;
     $67 = ((($66)) + 2|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68&65535;
     $70 = $10;
     $71 = ($69|0)>($70|0);
     if (!($71)) {
      $72 = $9;
      $73 = ((($72)) + 4|0);
      $74 = HEAP16[$73>>1]|0;
      $75 = $74&65535;
      $76 = $10;
      $77 = ($75|0)>($76|0);
      if (!($77)) {
       $78 = $9;
       $79 = ((($78)) + 6|0);
       $80 = HEAP16[$79>>1]|0;
       $81 = $80&65535;
       $82 = $10;
       $83 = ($81|0)>($82|0);
       if (!($83)) {
        break;
       }
      }
     }
    }
    $84 = $5;
    _png_warning($84,17360);
   }
  } while(0);
  $85 = $6;
  $86 = ((($85)) + 160|0);
  $87 = $9;
  ;HEAP16[$86>>1]=HEAP16[$87>>1]|0;HEAP16[$86+2>>1]=HEAP16[$87+2>>1]|0;HEAP16[$86+4>>1]=HEAP16[$87+4>>1]|0;HEAP16[$86+6>>1]=HEAP16[$87+6>>1]|0;HEAP16[$86+8>>1]=HEAP16[$87+8>>1]|0;
  $88 = $8;
  $89 = ($88|0)==(0);
  if ($89) {
   $8 = 1;
  }
 }
 $90 = $8;
 $91 = $90&65535;
 $92 = $6;
 $93 = ((($92)) + 22|0);
 HEAP16[$93>>1] = $91;
 $94 = $8;
 $95 = ($94|0)!=(0);
 if (!($95)) {
  STACKTOP = sp;return;
 }
 $96 = $6;
 $97 = ((($96)) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 | 16;
 HEAP32[$97>>2] = $99;
 $100 = $6;
 $101 = ((($100)) + 232|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $102 | 8192;
 HEAP32[$101>>2] = $103;
 STACKTOP = sp;return;
}
function _png_set_sPLT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = ($10|0)==(0|0);
 $12 = $5;
 $13 = ($12|0)==(0|0);
 $or$cond = $11 | $13;
 $14 = $7;
 $15 = ($14|0)<=(0);
 $or$cond3 = $or$cond | $15;
 $16 = $6;
 $17 = ($16|0)==(0|0);
 $or$cond5 = $or$cond3 | $17;
 if ($or$cond5) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $5;
 $20 = ((($19)) + 244|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $5;
 $23 = ((($22)) + 248|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 $26 = (_png_realloc_array($18,$21,$24,$25,16)|0);
 $8 = $26;
 $27 = $8;
 $28 = ($27|0)==(0|0);
 $29 = $4;
 if ($28) {
  _png_chunk_report($29,17410,1);
  STACKTOP = sp;return;
 }
 $30 = $5;
 $31 = ((($30)) + 244|0);
 $32 = HEAP32[$31>>2]|0;
 _png_free($29,$32);
 $33 = $8;
 $34 = $5;
 $35 = ((($34)) + 244|0);
 HEAP32[$35>>2] = $33;
 $36 = $5;
 $37 = ((($36)) + 232|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 | 32;
 HEAP32[$37>>2] = $39;
 $40 = $5;
 $41 = ((($40)) + 248|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $8;
 $44 = (($43) + ($42<<4)|0);
 $8 = $44;
 while(1) {
  $45 = $6;
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0|0);
  if ($47) {
   label = 7;
  } else {
   $48 = $6;
   $49 = ((($48)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   if ($51) {
    label = 7;
   } else {
    $53 = $6;
    $54 = ((($53)) + 4|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $8;
    $57 = ((($56)) + 4|0);
    HEAP8[$57>>0] = $55;
    $58 = $6;
    $59 = HEAP32[$58>>2]|0;
    $60 = (_strlen($59)|0);
    $61 = (($60) + 1)|0;
    $9 = $61;
    $62 = $4;
    $63 = $9;
    $64 = (_png_malloc_base($62,$63)|0);
    $65 = $8;
    HEAP32[$65>>2] = $64;
    $66 = $8;
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)==(0|0);
    if ($68) {
     break;
    }
    $69 = $8;
    $70 = HEAP32[$69>>2]|0;
    $71 = $6;
    $72 = HEAP32[$71>>2]|0;
    $73 = $9;
    _memcpy(($70|0),($72|0),($73|0))|0;
    $74 = $4;
    $75 = $6;
    $76 = ((($75)) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (_png_malloc_array($74,$77,10)|0);
    $79 = $8;
    $80 = ((($79)) + 8|0);
    HEAP32[$80>>2] = $78;
    $81 = $8;
    $82 = ((($81)) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(0|0);
    if ($84) {
     label = 10;
     break;
    }
    $89 = $6;
    $90 = ((($89)) + 12|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $8;
    $93 = ((($92)) + 12|0);
    HEAP32[$93>>2] = $91;
    $94 = $8;
    $95 = ((($94)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $6;
    $98 = ((($97)) + 8|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $6;
    $101 = ((($100)) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102*10)|0;
    _memcpy(($96|0),($99|0),($103|0))|0;
    $104 = $5;
    $105 = ((($104)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 | 8192;
    HEAP32[$105>>2] = $107;
    $108 = $5;
    $109 = ((($108)) + 248|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + 1)|0;
    HEAP32[$109>>2] = $111;
    $112 = $8;
    $113 = ((($112)) + 16|0);
    $8 = $113;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $52 = $4;
   _png_app_error($52,17431);
  }
  $114 = $6;
  $115 = ((($114)) + 16|0);
  $6 = $115;
  $116 = $7;
  $117 = (($116) + -1)|0;
  $7 = $117;
  $118 = ($117|0)!=(0);
  if (!($118)) {
   break;
  }
 }
 if ((label|0) == 10) {
  $85 = $4;
  $86 = $8;
  $87 = HEAP32[$86>>2]|0;
  _png_free($85,$87);
  $88 = $8;
  HEAP32[$88>>2] = 0;
 }
 $119 = $7;
 $120 = ($119|0)>(0);
 if (!($120)) {
  STACKTOP = sp;return;
 }
 $121 = $4;
 _png_chunk_report($121,17458,1);
 STACKTOP = sp;return;
}
function _png_set_unknown_chunks($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink7 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 $11 = $5;
 $12 = ($11|0)==(0|0);
 $or$cond = $10 | $12;
 $13 = $7;
 $14 = ($13|0)<=(0);
 $or$cond3 = $or$cond | $14;
 $15 = $6;
 $16 = ($15|0)==(0|0);
 $or$cond5 = $or$cond3 | $16;
 if ($or$cond5) {
  STACKTOP = sp;return;
 }
 $17 = $4;
 $18 = $5;
 $19 = ((($18)) + 236|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = ((($21)) + 240|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $7;
 $25 = (_png_realloc_array($17,$20,$23,$24,20)|0);
 $8 = $25;
 $26 = $8;
 $27 = ($26|0)==(0|0);
 $28 = $4;
 if ($27) {
  _png_chunk_report($28,17477,1);
  STACKTOP = sp;return;
 }
 $29 = $5;
 $30 = ((($29)) + 236|0);
 $31 = HEAP32[$30>>2]|0;
 _png_free($28,$31);
 $32 = $8;
 $33 = $5;
 $34 = ((($33)) + 236|0);
 HEAP32[$34>>2] = $32;
 $35 = $5;
 $36 = ((($35)) + 232|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 | 512;
 HEAP32[$36>>2] = $38;
 $39 = $5;
 $40 = ((($39)) + 240|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $8;
 $43 = (($42) + (($41*20)|0)|0);
 $8 = $43;
 while(1) {
  $44 = $7;
  $45 = ($44|0)>(0);
  if (!($45)) {
   break;
  }
  $46 = $8;
  $47 = $6;
  ;HEAP32[$46>>2]=HEAP32[$47>>2]|0;HEAP8[$46+4>>0]=HEAP8[$47+4>>0]|0;
  $48 = $8;
  $49 = ((($48)) + 4|0);
  HEAP8[$49>>0] = 0;
  $50 = $4;
  $51 = $6;
  $52 = ((($51)) + 16|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (_check_location($50,$54)|0);
  $56 = $8;
  $57 = ((($56)) + 16|0);
  HEAP8[$57>>0] = $55;
  $58 = $6;
  $59 = ((($58)) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(0);
  do {
   if ($61) {
    $62 = $8;
    $63 = ((($62)) + 8|0);
    HEAP32[$63>>2] = 0;
    $64 = $8;
    $$sink = 0;$$sink7 = $64;
    label = 11;
   } else {
    $65 = $4;
    $66 = $6;
    $67 = ((($66)) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (_png_malloc_base($65,$68)|0);
    $70 = $8;
    $71 = ((($70)) + 8|0);
    HEAP32[$71>>2] = $69;
    $72 = $8;
    $73 = ((($72)) + 8|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $76 = $4;
     _png_chunk_report($76,17501,1);
     break;
    } else {
     $77 = $8;
     $78 = ((($77)) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $6;
     $81 = ((($80)) + 8|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $6;
     $84 = ((($83)) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     _memcpy(($79|0),($82|0),($85|0))|0;
     $86 = $6;
     $87 = ((($86)) + 12|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $8;
     $$sink = $88;$$sink7 = $89;
     label = 11;
     break;
    }
   }
  } while(0);
  if ((label|0) == 11) {
   label = 0;
   $90 = ((($$sink7)) + 12|0);
   HEAP32[$90>>2] = $$sink;
   $91 = $8;
   $92 = ((($91)) + 20|0);
   $8 = $92;
   $93 = $5;
   $94 = ((($93)) + 240|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 1)|0;
   HEAP32[$94>>2] = $96;
  }
  $97 = $7;
  $98 = (($97) + -1)|0;
  $7 = $98;
  $99 = $6;
  $100 = ((($99)) + 20|0);
  $6 = $100;
 }
 STACKTOP = sp;return;
}
function _check_location($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4 & 11;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $2;
  $9 = ((($8)) + 208|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 32768;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $2;
   _png_app_warning($13,17530);
   $14 = $2;
   $15 = ((($14)) + 208|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 & 11;
   $18 = $17&255;
   $19 = $18&255;
   $3 = $19;
  }
 }
 $20 = $3;
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = $2;
  _png_error($22,17582);
  // unreachable;
 }
 while(1) {
  $23 = $3;
  $24 = $3;
  $25 = $3;
  $26 = (0 - ($25))|0;
  $27 = $24 & $26;
  $28 = ($23|0)!=($27|0);
  $29 = $3;
  if (!($28)) {
   break;
  }
  $30 = $3;
  $31 = (0 - ($30))|0;
  $32 = $29 & $31;
  $33 = $32 ^ -1;
  $34 = $3;
  $35 = $34 & $33;
  $3 = $35;
 }
 $36 = $29&255;
 STACKTOP = sp;return ($36|0);
}
function _png_set_swap($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 428|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(16);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 216|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 | 16;
 HEAP32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function _png_set_interlace_handling($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = ((($5)) + 424|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $2;
   $11 = ((($10)) + 216|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 | 2;
   HEAP32[$11>>2] = $13;
   $1 = 7;
   $14 = $1;
   STACKTOP = sp;return ($14|0);
  }
 }
 $1 = 1;
 $14 = $1;
 STACKTOP = sp;return ($14|0);
}
function _png_do_invert($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $13 = $2;
 $14 = ((($13)) + 8|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $3;
  $4 = $18;
  $19 = $2;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $6 = $21;
  $5 = 0;
  while(1) {
   $22 = $5;
   $23 = $6;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $4;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $27 ^ -1;
   $29 = $28&255;
   $30 = $4;
   HEAP8[$30>>0] = $29;
   $31 = $4;
   $32 = ((($31)) + 1|0);
   $4 = $32;
   $33 = $5;
   $34 = (($33) + 1)|0;
   $5 = $34;
  }
  STACKTOP = sp;return;
 }
 $35 = $2;
 $36 = ((($35)) + 8|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = ($38|0)==(4);
 if ($39) {
  $40 = $2;
  $41 = ((($40)) + 9|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($43|0)==(8);
  if ($44) {
   $45 = $3;
   $7 = $45;
   $46 = $2;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $9 = $48;
   $8 = 0;
   while(1) {
    $49 = $8;
    $50 = $9;
    $51 = ($49>>>0)<($50>>>0);
    if (!($51)) {
     break;
    }
    $52 = $7;
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = $54 ^ -1;
    $56 = $55&255;
    $57 = $7;
    HEAP8[$57>>0] = $56;
    $58 = $7;
    $59 = ((($58)) + 2|0);
    $7 = $59;
    $60 = $8;
    $61 = (($60) + 2)|0;
    $8 = $61;
   }
   STACKTOP = sp;return;
  }
 }
 $62 = $2;
 $63 = ((($62)) + 8|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = ($65|0)==(4);
 if (!($66)) {
  STACKTOP = sp;return;
 }
 $67 = $2;
 $68 = ((($67)) + 9|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = ($70|0)==(16);
 if (!($71)) {
  STACKTOP = sp;return;
 }
 $72 = $3;
 $10 = $72;
 $73 = $2;
 $74 = ((($73)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $12 = $75;
 $11 = 0;
 while(1) {
  $76 = $11;
  $77 = $12;
  $78 = ($76>>>0)<($77>>>0);
  if (!($78)) {
   break;
  }
  $79 = $10;
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = $81 ^ -1;
  $83 = $82&255;
  $84 = $10;
  HEAP8[$84>>0] = $83;
  $85 = $10;
  $86 = ((($85)) + 1|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $88 ^ -1;
  $90 = $89&255;
  $91 = $10;
  $92 = ((($91)) + 1|0);
  HEAP8[$92>>0] = $90;
  $93 = $10;
  $94 = ((($93)) + 4|0);
  $10 = $94;
  $95 = $11;
  $96 = (($95) + 4)|0;
  $11 = $96;
 }
 STACKTOP = sp;return;
}
function _png_do_swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 9|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(16);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $3;
 $4 = $13;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ((($16)) + 10|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = Math_imul($15, $19)|0;
 $6 = $20;
 $5 = 0;
 while(1) {
  $21 = $5;
  $22 = $6;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = $4;
  $25 = HEAP8[$24>>0]|0;
  $7 = $25;
  $26 = $4;
  $27 = ((($26)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $4;
  HEAP8[$29>>0] = $28;
  $30 = $7;
  $31 = $4;
  $32 = ((($31)) + 1|0);
  HEAP8[$32>>0] = $30;
  $33 = $5;
  $34 = (($33) + 1)|0;
  $5 = $34;
  $35 = $4;
  $36 = ((($35)) + 2|0);
  $4 = $36;
 }
 STACKTOP = sp;return;
}
function _png_do_packswap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 9|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)<(8);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $3;
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12) + ($15)|0);
 $5 = $16;
 $17 = $2;
 $18 = ((($17)) + 9|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)==(1);
 do {
  if ($21) {
   $6 = 17625;
  } else {
   $22 = $2;
   $23 = ((($22)) + 9|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)==(2);
   if ($26) {
    $6 = 17881;
    break;
   }
   $27 = $2;
   $28 = ((($27)) + 9|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = ($30|0)==(4);
   if ($31) {
    $6 = 18137;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $32 = $3;
 $4 = $32;
 while(1) {
  $33 = $4;
  $34 = $5;
  $35 = ($33>>>0)<($34>>>0);
  if (!($35)) {
   break;
  }
  $36 = $6;
  $37 = $4;
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($36) + ($39)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $4;
  HEAP8[$42>>0] = $41;
  $43 = $4;
  $44 = ((($43)) + 1|0);
  $4 = $44;
 }
 STACKTOP = sp;return;
}
function _png_do_strip_channel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $$sink3 = 0, $$sink5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $6 = $9;
 $10 = $4;
 $7 = $10;
 $11 = $4;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) + ($14)|0);
 $8 = $15;
 $16 = $3;
 $17 = ((($16)) + 10|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($19|0)==(2);
 $21 = $3;
 if ($20) {
  $22 = ((($21)) + 9|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($24|0)==(8);
  if ($25) {
   $26 = $5;
   $27 = ($26|0)!=(0);
   $28 = $6;
   if ($27) {
    $29 = ((($28)) + 1|0);
    $6 = $29;
   } else {
    $30 = ((($28)) + 2|0);
    $6 = $30;
    $31 = $7;
    $32 = ((($31)) + 1|0);
    $7 = $32;
   }
   while(1) {
    $33 = $6;
    $34 = $8;
    $35 = ($33>>>0)<($34>>>0);
    if (!($35)) {
     break;
    }
    $36 = $6;
    $37 = HEAP8[$36>>0]|0;
    $38 = $7;
    $39 = ((($38)) + 1|0);
    $7 = $39;
    HEAP8[$38>>0] = $37;
    $40 = $6;
    $41 = ((($40)) + 2|0);
    $6 = $41;
   }
   $42 = $3;
   $$sink = 8;$$sink2 = $42;
  } else {
   $43 = $3;
   $44 = ((($43)) + 9|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = ($46|0)==(16);
   if (!($47)) {
    STACKTOP = sp;return;
   }
   $48 = $5;
   $49 = ($48|0)!=(0);
   $50 = $6;
   if ($49) {
    $51 = ((($50)) + 2|0);
    $6 = $51;
   } else {
    $52 = ((($50)) + 4|0);
    $6 = $52;
    $53 = $7;
    $54 = ((($53)) + 2|0);
    $7 = $54;
   }
   while(1) {
    $55 = $6;
    $56 = $8;
    $57 = ($55>>>0)<($56>>>0);
    if (!($57)) {
     break;
    }
    $58 = $6;
    $59 = ((($58)) + 1|0);
    $6 = $59;
    $60 = HEAP8[$58>>0]|0;
    $61 = $7;
    $62 = ((($61)) + 1|0);
    $7 = $62;
    HEAP8[$61>>0] = $60;
    $63 = $6;
    $64 = HEAP8[$63>>0]|0;
    $65 = $7;
    $66 = ((($65)) + 1|0);
    $7 = $66;
    HEAP8[$65>>0] = $64;
    $67 = $6;
    $68 = ((($67)) + 3|0);
    $6 = $68;
   }
   $69 = $3;
   $$sink = 16;$$sink2 = $69;
  }
  $70 = ((($$sink2)) + 11|0);
  HEAP8[$70>>0] = $$sink;
  $71 = $3;
  $72 = ((($71)) + 10|0);
  HEAP8[$72>>0] = 1;
  $73 = $3;
  $74 = ((($73)) + 8|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = ($76|0)==(4);
  if ($77) {
   $78 = $3;
   $79 = ((($78)) + 8|0);
   HEAP8[$79>>0] = 0;
  }
 } else {
  $80 = ((($21)) + 10|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = ($82|0)==(4);
  if (!($83)) {
   STACKTOP = sp;return;
  }
  $84 = $3;
  $85 = ((($84)) + 9|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = ($87|0)==(8);
  if ($88) {
   $89 = $5;
   $90 = ($89|0)!=(0);
   $91 = $6;
   if ($90) {
    $92 = ((($91)) + 1|0);
    $6 = $92;
   } else {
    $93 = ((($91)) + 4|0);
    $6 = $93;
    $94 = $7;
    $95 = ((($94)) + 3|0);
    $7 = $95;
   }
   while(1) {
    $96 = $6;
    $97 = $8;
    $98 = ($96>>>0)<($97>>>0);
    if (!($98)) {
     break;
    }
    $99 = $6;
    $100 = ((($99)) + 1|0);
    $6 = $100;
    $101 = HEAP8[$99>>0]|0;
    $102 = $7;
    $103 = ((($102)) + 1|0);
    $7 = $103;
    HEAP8[$102>>0] = $101;
    $104 = $6;
    $105 = ((($104)) + 1|0);
    $6 = $105;
    $106 = HEAP8[$104>>0]|0;
    $107 = $7;
    $108 = ((($107)) + 1|0);
    $7 = $108;
    HEAP8[$107>>0] = $106;
    $109 = $6;
    $110 = HEAP8[$109>>0]|0;
    $111 = $7;
    $112 = ((($111)) + 1|0);
    $7 = $112;
    HEAP8[$111>>0] = $110;
    $113 = $6;
    $114 = ((($113)) + 2|0);
    $6 = $114;
   }
   $115 = $3;
   $$sink3 = 24;$$sink5 = $115;
  } else {
   $116 = $3;
   $117 = ((($116)) + 9|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119|0)==(16);
   if (!($120)) {
    STACKTOP = sp;return;
   }
   $121 = $5;
   $122 = ($121|0)!=(0);
   $123 = $6;
   if ($122) {
    $124 = ((($123)) + 2|0);
    $6 = $124;
   } else {
    $125 = ((($123)) + 8|0);
    $6 = $125;
    $126 = $7;
    $127 = ((($126)) + 6|0);
    $7 = $127;
   }
   while(1) {
    $128 = $6;
    $129 = $8;
    $130 = ($128>>>0)<($129>>>0);
    if (!($130)) {
     break;
    }
    $131 = $6;
    $132 = ((($131)) + 1|0);
    $6 = $132;
    $133 = HEAP8[$131>>0]|0;
    $134 = $7;
    $135 = ((($134)) + 1|0);
    $7 = $135;
    HEAP8[$134>>0] = $133;
    $136 = $6;
    $137 = ((($136)) + 1|0);
    $6 = $137;
    $138 = HEAP8[$136>>0]|0;
    $139 = $7;
    $140 = ((($139)) + 1|0);
    $7 = $140;
    HEAP8[$139>>0] = $138;
    $141 = $6;
    $142 = ((($141)) + 1|0);
    $6 = $142;
    $143 = HEAP8[$141>>0]|0;
    $144 = $7;
    $145 = ((($144)) + 1|0);
    $7 = $145;
    HEAP8[$144>>0] = $143;
    $146 = $6;
    $147 = ((($146)) + 1|0);
    $6 = $147;
    $148 = HEAP8[$146>>0]|0;
    $149 = $7;
    $150 = ((($149)) + 1|0);
    $7 = $150;
    HEAP8[$149>>0] = $148;
    $151 = $6;
    $152 = ((($151)) + 1|0);
    $6 = $152;
    $153 = HEAP8[$151>>0]|0;
    $154 = $7;
    $155 = ((($154)) + 1|0);
    $7 = $155;
    HEAP8[$154>>0] = $153;
    $156 = $6;
    $157 = HEAP8[$156>>0]|0;
    $158 = $7;
    $159 = ((($158)) + 1|0);
    $7 = $159;
    HEAP8[$158>>0] = $157;
    $160 = $6;
    $161 = ((($160)) + 3|0);
    $6 = $161;
   }
   $162 = $3;
   $$sink3 = 48;$$sink5 = $162;
  }
  $163 = ((($$sink5)) + 11|0);
  HEAP8[$163>>0] = $$sink3;
  $164 = $3;
  $165 = ((($164)) + 10|0);
  HEAP8[$165>>0] = 3;
  $166 = $3;
  $167 = ((($166)) + 8|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = $168&255;
  $170 = ($169|0)==(6);
  if ($170) {
   $171 = $3;
   $172 = ((($171)) + 8|0);
   HEAP8[$172>>0] = 2;
  }
 }
 $173 = $7;
 $174 = $4;
 $175 = $173;
 $176 = $174;
 $177 = (($175) - ($176))|0;
 $178 = $3;
 $179 = ((($178)) + 4|0);
 HEAP32[$179>>2] = $177;
 STACKTOP = sp;return;
}
function _png_do_bgr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $17 = $2;
 $18 = ((($17)) + 8|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 & 2;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $2;
 $24 = HEAP32[$23>>2]|0;
 $4 = $24;
 $25 = $2;
 $26 = ((($25)) + 9|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)==(8);
 $30 = $2;
 if ($29) {
  $31 = ((($30)) + 8|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)==(2);
  if ($34) {
   $6 = 0;
   $35 = $3;
   $5 = $35;
   while(1) {
    $36 = $6;
    $37 = $4;
    $38 = ($36>>>0)<($37>>>0);
    if (!($38)) {
     break;
    }
    $39 = $5;
    $40 = HEAP8[$39>>0]|0;
    $7 = $40;
    $41 = $5;
    $42 = ((($41)) + 2|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $5;
    HEAP8[$44>>0] = $43;
    $45 = $7;
    $46 = $5;
    $47 = ((($46)) + 2|0);
    HEAP8[$47>>0] = $45;
    $48 = $6;
    $49 = (($48) + 1)|0;
    $6 = $49;
    $50 = $5;
    $51 = ((($50)) + 3|0);
    $5 = $51;
   }
   STACKTOP = sp;return;
  }
  $52 = $2;
  $53 = ((($52)) + 8|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($55|0)==(6);
  if (!($56)) {
   STACKTOP = sp;return;
  }
  $9 = 0;
  $57 = $3;
  $8 = $57;
  while(1) {
   $58 = $9;
   $59 = $4;
   $60 = ($58>>>0)<($59>>>0);
   if (!($60)) {
    break;
   }
   $61 = $8;
   $62 = HEAP8[$61>>0]|0;
   $10 = $62;
   $63 = $8;
   $64 = ((($63)) + 2|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $8;
   HEAP8[$66>>0] = $65;
   $67 = $10;
   $68 = $8;
   $69 = ((($68)) + 2|0);
   HEAP8[$69>>0] = $67;
   $70 = $9;
   $71 = (($70) + 1)|0;
   $9 = $71;
   $72 = $8;
   $73 = ((($72)) + 4|0);
   $8 = $73;
  }
  STACKTOP = sp;return;
 }
 $74 = ((($30)) + 9|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = ($76|0)==(16);
 if (!($77)) {
  STACKTOP = sp;return;
 }
 $78 = $2;
 $79 = ((($78)) + 8|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = ($81|0)==(2);
 if ($82) {
  $12 = 0;
  $83 = $3;
  $11 = $83;
  while(1) {
   $84 = $12;
   $85 = $4;
   $86 = ($84>>>0)<($85>>>0);
   if (!($86)) {
    break;
   }
   $87 = $11;
   $88 = HEAP8[$87>>0]|0;
   $13 = $88;
   $89 = $11;
   $90 = ((($89)) + 4|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $11;
   HEAP8[$92>>0] = $91;
   $93 = $13;
   $94 = $11;
   $95 = ((($94)) + 4|0);
   HEAP8[$95>>0] = $93;
   $96 = $11;
   $97 = ((($96)) + 1|0);
   $98 = HEAP8[$97>>0]|0;
   $13 = $98;
   $99 = $11;
   $100 = ((($99)) + 5|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $11;
   $103 = ((($102)) + 1|0);
   HEAP8[$103>>0] = $101;
   $104 = $13;
   $105 = $11;
   $106 = ((($105)) + 5|0);
   HEAP8[$106>>0] = $104;
   $107 = $12;
   $108 = (($107) + 1)|0;
   $12 = $108;
   $109 = $11;
   $110 = ((($109)) + 6|0);
   $11 = $110;
  }
  STACKTOP = sp;return;
 }
 $111 = $2;
 $112 = ((($111)) + 8|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = ($114|0)==(6);
 if (!($115)) {
  STACKTOP = sp;return;
 }
 $15 = 0;
 $116 = $3;
 $14 = $116;
 while(1) {
  $117 = $15;
  $118 = $4;
  $119 = ($117>>>0)<($118>>>0);
  if (!($119)) {
   break;
  }
  $120 = $14;
  $121 = HEAP8[$120>>0]|0;
  $16 = $121;
  $122 = $14;
  $123 = ((($122)) + 4|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $14;
  HEAP8[$125>>0] = $124;
  $126 = $16;
  $127 = $14;
  $128 = ((($127)) + 4|0);
  HEAP8[$128>>0] = $126;
  $129 = $14;
  $130 = ((($129)) + 1|0);
  $131 = HEAP8[$130>>0]|0;
  $16 = $131;
  $132 = $14;
  $133 = ((($132)) + 5|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = $14;
  $136 = ((($135)) + 1|0);
  HEAP8[$136>>0] = $134;
  $137 = $16;
  $138 = $14;
  $139 = ((($138)) + 5|0);
  HEAP8[$139>>0] = $137;
  $140 = $15;
  $141 = (($140) + 1)|0;
  $15 = $141;
  $142 = $14;
  $143 = ((($142)) + 8|0);
  $14 = $143;
 }
 STACKTOP = sp;return;
}
function _png_do_check_palette_indexes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 412|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $3;
 $13 = ((($12)) + 9|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = 1 << $15;
 $17 = ($11|0)<($16|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $2;
 $19 = ((($18)) + 412|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21|0)>(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $3;
 $24 = ((($23)) + 11|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = (0 - ($26))|0;
 $28 = $3;
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($27, $29)|0;
 $31 = $30 & 7;
 $4 = $31;
 $32 = $2;
 $33 = ((($32)) + 384|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($34) + ($37)|0);
 $5 = $38;
 $39 = $3;
 $40 = ((($39)) + 9|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 switch ($42|0) {
 case 1:  {
  while(1) {
   $43 = $5;
   $44 = $2;
   $45 = ((($44)) + 384|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($43>>>0)>($46>>>0);
   if (!($47)) {
    break;
   }
   $48 = $5;
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = $4;
   $52 = $50 >> $51;
   $53 = ($52|0)!=(0);
   if ($53) {
    $54 = $2;
    $55 = ((($54)) + 416|0);
    HEAP32[$55>>2] = 1;
   }
   $4 = 0;
   $56 = $5;
   $57 = ((($56)) + -1|0);
   $5 = $57;
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  while(1) {
   $58 = $5;
   $59 = $2;
   $60 = ((($59)) + 384|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($58>>>0)>($61>>>0);
   if (!($62)) {
    break;
   }
   $63 = $5;
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = $4;
   $67 = $65 >> $66;
   $68 = $67 & 3;
   $6 = $68;
   $69 = $6;
   $70 = $2;
   $71 = ((($70)) + 416|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($69|0)>($72|0);
   if ($73) {
    $74 = $6;
    $75 = $2;
    $76 = ((($75)) + 416|0);
    HEAP32[$76>>2] = $74;
   }
   $77 = $5;
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $4;
   $81 = $79 >> $80;
   $82 = $81 >> 2;
   $83 = $82 & 3;
   $6 = $83;
   $84 = $6;
   $85 = $2;
   $86 = ((($85)) + 416|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($84|0)>($87|0);
   if ($88) {
    $89 = $6;
    $90 = $2;
    $91 = ((($90)) + 416|0);
    HEAP32[$91>>2] = $89;
   }
   $92 = $5;
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $4;
   $96 = $94 >> $95;
   $97 = $96 >> 4;
   $98 = $97 & 3;
   $6 = $98;
   $99 = $6;
   $100 = $2;
   $101 = ((($100)) + 416|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($99|0)>($102|0);
   if ($103) {
    $104 = $6;
    $105 = $2;
    $106 = ((($105)) + 416|0);
    HEAP32[$106>>2] = $104;
   }
   $107 = $5;
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $4;
   $111 = $109 >> $110;
   $112 = $111 >> 6;
   $113 = $112 & 3;
   $6 = $113;
   $114 = $6;
   $115 = $2;
   $116 = ((($115)) + 416|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ($114|0)>($117|0);
   if ($118) {
    $119 = $6;
    $120 = $2;
    $121 = ((($120)) + 416|0);
    HEAP32[$121>>2] = $119;
   }
   $4 = 0;
   $122 = $5;
   $123 = ((($122)) + -1|0);
   $5 = $123;
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  while(1) {
   $124 = $5;
   $125 = $2;
   $126 = ((($125)) + 384|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($124>>>0)>($127>>>0);
   if (!($128)) {
    break;
   }
   $129 = $5;
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = $4;
   $133 = $131 >> $132;
   $134 = $133 & 15;
   $7 = $134;
   $135 = $7;
   $136 = $2;
   $137 = ((($136)) + 416|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ($135|0)>($138|0);
   if ($139) {
    $140 = $7;
    $141 = $2;
    $142 = ((($141)) + 416|0);
    HEAP32[$142>>2] = $140;
   }
   $143 = $5;
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = $4;
   $147 = $145 >> $146;
   $148 = $147 >> 4;
   $149 = $148 & 15;
   $7 = $149;
   $150 = $7;
   $151 = $2;
   $152 = ((($151)) + 416|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($150|0)>($153|0);
   if ($154) {
    $155 = $7;
    $156 = $2;
    $157 = ((($156)) + 416|0);
    HEAP32[$157>>2] = $155;
   }
   $4 = 0;
   $158 = $5;
   $159 = ((($158)) + -1|0);
   $5 = $159;
  }
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  while(1) {
   $160 = $5;
   $161 = $2;
   $162 = ((($161)) + 384|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ($160>>>0)>($163>>>0);
   if (!($164)) {
    break;
   }
   $165 = $5;
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = $2;
   $169 = ((($168)) + 416|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ($167|0)>($170|0);
   if ($171) {
    $172 = $5;
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = $2;
    $176 = ((($175)) + 416|0);
    HEAP32[$176>>2] = $174;
   }
   $177 = $5;
   $178 = ((($177)) + -1|0);
   $5 = $178;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _adler32_z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = $9 >>> 16;
 $11 = $10 & 65535;
 $7 = $11;
 $12 = $4;
 $13 = $12 & 65535;
 $4 = $13;
 $14 = $6;
 $15 = ($14|0)==(1);
 $16 = $5;
 if ($15) {
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $4;
  $20 = (($19) + ($18))|0;
  $4 = $20;
  $21 = $4;
  $22 = ($21>>>0)>=(65521);
  if ($22) {
   $23 = $4;
   $24 = (($23) - 65521)|0;
   $4 = $24;
  }
  $25 = $4;
  $26 = $7;
  $27 = (($26) + ($25))|0;
  $7 = $27;
  $28 = $7;
  $29 = ($28>>>0)>=(65521);
  if ($29) {
   $30 = $7;
   $31 = (($30) - 65521)|0;
   $7 = $31;
  }
  $32 = $4;
  $33 = $7;
  $34 = $33 << 16;
  $35 = $32 | $34;
  $3 = $35;
  $387 = $3;
  STACKTOP = sp;return ($387|0);
 }
 $36 = ($16|0)==(0|0);
 if ($36) {
  $3 = 1;
  $387 = $3;
  STACKTOP = sp;return ($387|0);
 }
 $37 = $6;
 $38 = ($37>>>0)<(16);
 if ($38) {
  while(1) {
   $39 = $6;
   $40 = (($39) + -1)|0;
   $6 = $40;
   $41 = ($39|0)!=(0);
   if (!($41)) {
    break;
   }
   $42 = $5;
   $43 = ((($42)) + 1|0);
   $5 = $43;
   $44 = HEAP8[$42>>0]|0;
   $45 = $44&255;
   $46 = $4;
   $47 = (($46) + ($45))|0;
   $4 = $47;
   $48 = $4;
   $49 = $7;
   $50 = (($49) + ($48))|0;
   $7 = $50;
  }
  $51 = $4;
  $52 = ($51>>>0)>=(65521);
  if ($52) {
   $53 = $4;
   $54 = (($53) - 65521)|0;
   $4 = $54;
  }
  $55 = $7;
  $56 = (($55>>>0) % 65521)&-1;
  $7 = $56;
  $57 = $4;
  $58 = $7;
  $59 = $58 << 16;
  $60 = $57 | $59;
  $3 = $60;
  $387 = $3;
  STACKTOP = sp;return ($387|0);
 }
 while(1) {
  $61 = $6;
  $62 = ($61>>>0)>=(5552);
  $63 = $6;
  if (!($62)) {
   break;
  }
  $64 = (($63) - 5552)|0;
  $6 = $64;
  $8 = 347;
  while(1) {
   $65 = $5;
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $4;
   $69 = (($68) + ($67))|0;
   $4 = $69;
   $70 = $4;
   $71 = $7;
   $72 = (($71) + ($70))|0;
   $7 = $72;
   $73 = $5;
   $74 = ((($73)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $4;
   $78 = (($77) + ($76))|0;
   $4 = $78;
   $79 = $4;
   $80 = $7;
   $81 = (($80) + ($79))|0;
   $7 = $81;
   $82 = $5;
   $83 = ((($82)) + 2|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $4;
   $87 = (($86) + ($85))|0;
   $4 = $87;
   $88 = $4;
   $89 = $7;
   $90 = (($89) + ($88))|0;
   $7 = $90;
   $91 = $5;
   $92 = ((($91)) + 3|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $4;
   $96 = (($95) + ($94))|0;
   $4 = $96;
   $97 = $4;
   $98 = $7;
   $99 = (($98) + ($97))|0;
   $7 = $99;
   $100 = $5;
   $101 = ((($100)) + 4|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $4;
   $105 = (($104) + ($103))|0;
   $4 = $105;
   $106 = $4;
   $107 = $7;
   $108 = (($107) + ($106))|0;
   $7 = $108;
   $109 = $5;
   $110 = ((($109)) + 5|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = $4;
   $114 = (($113) + ($112))|0;
   $4 = $114;
   $115 = $4;
   $116 = $7;
   $117 = (($116) + ($115))|0;
   $7 = $117;
   $118 = $5;
   $119 = ((($118)) + 6|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $4;
   $123 = (($122) + ($121))|0;
   $4 = $123;
   $124 = $4;
   $125 = $7;
   $126 = (($125) + ($124))|0;
   $7 = $126;
   $127 = $5;
   $128 = ((($127)) + 7|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = $4;
   $132 = (($131) + ($130))|0;
   $4 = $132;
   $133 = $4;
   $134 = $7;
   $135 = (($134) + ($133))|0;
   $7 = $135;
   $136 = $5;
   $137 = ((($136)) + 8|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = $4;
   $141 = (($140) + ($139))|0;
   $4 = $141;
   $142 = $4;
   $143 = $7;
   $144 = (($143) + ($142))|0;
   $7 = $144;
   $145 = $5;
   $146 = ((($145)) + 9|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $4;
   $150 = (($149) + ($148))|0;
   $4 = $150;
   $151 = $4;
   $152 = $7;
   $153 = (($152) + ($151))|0;
   $7 = $153;
   $154 = $5;
   $155 = ((($154)) + 10|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = $4;
   $159 = (($158) + ($157))|0;
   $4 = $159;
   $160 = $4;
   $161 = $7;
   $162 = (($161) + ($160))|0;
   $7 = $162;
   $163 = $5;
   $164 = ((($163)) + 11|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = $4;
   $168 = (($167) + ($166))|0;
   $4 = $168;
   $169 = $4;
   $170 = $7;
   $171 = (($170) + ($169))|0;
   $7 = $171;
   $172 = $5;
   $173 = ((($172)) + 12|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = $4;
   $177 = (($176) + ($175))|0;
   $4 = $177;
   $178 = $4;
   $179 = $7;
   $180 = (($179) + ($178))|0;
   $7 = $180;
   $181 = $5;
   $182 = ((($181)) + 13|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = $4;
   $186 = (($185) + ($184))|0;
   $4 = $186;
   $187 = $4;
   $188 = $7;
   $189 = (($188) + ($187))|0;
   $7 = $189;
   $190 = $5;
   $191 = ((($190)) + 14|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = $4;
   $195 = (($194) + ($193))|0;
   $4 = $195;
   $196 = $4;
   $197 = $7;
   $198 = (($197) + ($196))|0;
   $7 = $198;
   $199 = $5;
   $200 = ((($199)) + 15|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = $4;
   $204 = (($203) + ($202))|0;
   $4 = $204;
   $205 = $4;
   $206 = $7;
   $207 = (($206) + ($205))|0;
   $7 = $207;
   $208 = $5;
   $209 = ((($208)) + 16|0);
   $5 = $209;
   $210 = $8;
   $211 = (($210) + -1)|0;
   $8 = $211;
   $212 = ($211|0)!=(0);
   if (!($212)) {
    break;
   }
  }
  $213 = $4;
  $214 = (($213>>>0) % 65521)&-1;
  $4 = $214;
  $215 = $7;
  $216 = (($215>>>0) % 65521)&-1;
  $7 = $216;
 }
 $217 = ($63|0)!=(0);
 if ($217) {
  while(1) {
   $218 = $6;
   $219 = ($218>>>0)>=(16);
   if (!($219)) {
    break;
   }
   $220 = $6;
   $221 = (($220) - 16)|0;
   $6 = $221;
   $222 = $5;
   $223 = HEAP8[$222>>0]|0;
   $224 = $223&255;
   $225 = $4;
   $226 = (($225) + ($224))|0;
   $4 = $226;
   $227 = $4;
   $228 = $7;
   $229 = (($228) + ($227))|0;
   $7 = $229;
   $230 = $5;
   $231 = ((($230)) + 1|0);
   $232 = HEAP8[$231>>0]|0;
   $233 = $232&255;
   $234 = $4;
   $235 = (($234) + ($233))|0;
   $4 = $235;
   $236 = $4;
   $237 = $7;
   $238 = (($237) + ($236))|0;
   $7 = $238;
   $239 = $5;
   $240 = ((($239)) + 2|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = $241&255;
   $243 = $4;
   $244 = (($243) + ($242))|0;
   $4 = $244;
   $245 = $4;
   $246 = $7;
   $247 = (($246) + ($245))|0;
   $7 = $247;
   $248 = $5;
   $249 = ((($248)) + 3|0);
   $250 = HEAP8[$249>>0]|0;
   $251 = $250&255;
   $252 = $4;
   $253 = (($252) + ($251))|0;
   $4 = $253;
   $254 = $4;
   $255 = $7;
   $256 = (($255) + ($254))|0;
   $7 = $256;
   $257 = $5;
   $258 = ((($257)) + 4|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = $259&255;
   $261 = $4;
   $262 = (($261) + ($260))|0;
   $4 = $262;
   $263 = $4;
   $264 = $7;
   $265 = (($264) + ($263))|0;
   $7 = $265;
   $266 = $5;
   $267 = ((($266)) + 5|0);
   $268 = HEAP8[$267>>0]|0;
   $269 = $268&255;
   $270 = $4;
   $271 = (($270) + ($269))|0;
   $4 = $271;
   $272 = $4;
   $273 = $7;
   $274 = (($273) + ($272))|0;
   $7 = $274;
   $275 = $5;
   $276 = ((($275)) + 6|0);
   $277 = HEAP8[$276>>0]|0;
   $278 = $277&255;
   $279 = $4;
   $280 = (($279) + ($278))|0;
   $4 = $280;
   $281 = $4;
   $282 = $7;
   $283 = (($282) + ($281))|0;
   $7 = $283;
   $284 = $5;
   $285 = ((($284)) + 7|0);
   $286 = HEAP8[$285>>0]|0;
   $287 = $286&255;
   $288 = $4;
   $289 = (($288) + ($287))|0;
   $4 = $289;
   $290 = $4;
   $291 = $7;
   $292 = (($291) + ($290))|0;
   $7 = $292;
   $293 = $5;
   $294 = ((($293)) + 8|0);
   $295 = HEAP8[$294>>0]|0;
   $296 = $295&255;
   $297 = $4;
   $298 = (($297) + ($296))|0;
   $4 = $298;
   $299 = $4;
   $300 = $7;
   $301 = (($300) + ($299))|0;
   $7 = $301;
   $302 = $5;
   $303 = ((($302)) + 9|0);
   $304 = HEAP8[$303>>0]|0;
   $305 = $304&255;
   $306 = $4;
   $307 = (($306) + ($305))|0;
   $4 = $307;
   $308 = $4;
   $309 = $7;
   $310 = (($309) + ($308))|0;
   $7 = $310;
   $311 = $5;
   $312 = ((($311)) + 10|0);
   $313 = HEAP8[$312>>0]|0;
   $314 = $313&255;
   $315 = $4;
   $316 = (($315) + ($314))|0;
   $4 = $316;
   $317 = $4;
   $318 = $7;
   $319 = (($318) + ($317))|0;
   $7 = $319;
   $320 = $5;
   $321 = ((($320)) + 11|0);
   $322 = HEAP8[$321>>0]|0;
   $323 = $322&255;
   $324 = $4;
   $325 = (($324) + ($323))|0;
   $4 = $325;
   $326 = $4;
   $327 = $7;
   $328 = (($327) + ($326))|0;
   $7 = $328;
   $329 = $5;
   $330 = ((($329)) + 12|0);
   $331 = HEAP8[$330>>0]|0;
   $332 = $331&255;
   $333 = $4;
   $334 = (($333) + ($332))|0;
   $4 = $334;
   $335 = $4;
   $336 = $7;
   $337 = (($336) + ($335))|0;
   $7 = $337;
   $338 = $5;
   $339 = ((($338)) + 13|0);
   $340 = HEAP8[$339>>0]|0;
   $341 = $340&255;
   $342 = $4;
   $343 = (($342) + ($341))|0;
   $4 = $343;
   $344 = $4;
   $345 = $7;
   $346 = (($345) + ($344))|0;
   $7 = $346;
   $347 = $5;
   $348 = ((($347)) + 14|0);
   $349 = HEAP8[$348>>0]|0;
   $350 = $349&255;
   $351 = $4;
   $352 = (($351) + ($350))|0;
   $4 = $352;
   $353 = $4;
   $354 = $7;
   $355 = (($354) + ($353))|0;
   $7 = $355;
   $356 = $5;
   $357 = ((($356)) + 15|0);
   $358 = HEAP8[$357>>0]|0;
   $359 = $358&255;
   $360 = $4;
   $361 = (($360) + ($359))|0;
   $4 = $361;
   $362 = $4;
   $363 = $7;
   $364 = (($363) + ($362))|0;
   $7 = $364;
   $365 = $5;
   $366 = ((($365)) + 16|0);
   $5 = $366;
  }
  while(1) {
   $367 = $6;
   $368 = (($367) + -1)|0;
   $6 = $368;
   $369 = ($367|0)!=(0);
   if (!($369)) {
    break;
   }
   $370 = $5;
   $371 = ((($370)) + 1|0);
   $5 = $371;
   $372 = HEAP8[$370>>0]|0;
   $373 = $372&255;
   $374 = $4;
   $375 = (($374) + ($373))|0;
   $4 = $375;
   $376 = $4;
   $377 = $7;
   $378 = (($377) + ($376))|0;
   $7 = $378;
  }
  $379 = $4;
  $380 = (($379>>>0) % 65521)&-1;
  $4 = $380;
  $381 = $7;
  $382 = (($381>>>0) % 65521)&-1;
  $7 = $382;
 }
 $383 = $4;
 $384 = $7;
 $385 = $384 << 16;
 $386 = $383 | $385;
 $3 = $386;
 $387 = $3;
 STACKTOP = sp;return ($387|0);
}
function _adler32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_adler32_z($6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _crc32_z($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $3 = 0;
  } else {
   HEAP32[$7>>2] = 1;
   $10 = HEAP8[$7>>0]|0;
   $11 = ($10<<24>>24)!=(0);
   $12 = $4;
   $13 = $5;
   $14 = $6;
   if ($11) {
    $15 = (_crc32_little($12,$13,$14)|0);
    $3 = $15;
    break;
   } else {
    $16 = (_crc32_big($12,$13,$14)|0);
    $3 = $16;
    break;
   }
  }
 } while(0);
 $17 = $3;
 STACKTOP = sp;return ($17|0);
}
function _crc32_little($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $6 = $8;
 $9 = $6;
 $10 = $9 ^ -1;
 $6 = $10;
 while(1) {
  $11 = $5;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $13;
  $15 = $14 & 3;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = $4;
  $19 = ((($18)) + 1|0);
  $4 = $19;
  $20 = HEAP8[$18>>0]|0;
  $21 = $20&255;
  $22 = $17 ^ $21;
  $23 = $22 & 255;
  $24 = (984 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $6;
  $27 = $26 >>> 8;
  $28 = $25 ^ $27;
  $6 = $28;
  $29 = $5;
  $30 = (($29) + -1)|0;
  $5 = $30;
 }
 $31 = $4;
 $7 = $31;
 while(1) {
  $32 = $5;
  $33 = ($32>>>0)>=(32);
  if (!($33)) {
   break;
  }
  $34 = $7;
  $35 = ((($34)) + 4|0);
  $7 = $35;
  $36 = HEAP32[$34>>2]|0;
  $37 = $6;
  $38 = $37 ^ $36;
  $6 = $38;
  $39 = $6;
  $40 = $39 & 255;
  $41 = ((4056) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $6;
  $44 = $43 >>> 8;
  $45 = $44 & 255;
  $46 = ((3032) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $42 ^ $47;
  $49 = $6;
  $50 = $49 >>> 16;
  $51 = $50 & 255;
  $52 = ((2008) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $48 ^ $53;
  $55 = $6;
  $56 = $55 >>> 24;
  $57 = (984 + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $54 ^ $58;
  $6 = $59;
  $60 = $7;
  $61 = ((($60)) + 4|0);
  $7 = $61;
  $62 = HEAP32[$60>>2]|0;
  $63 = $6;
  $64 = $63 ^ $62;
  $6 = $64;
  $65 = $6;
  $66 = $65 & 255;
  $67 = ((4056) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $6;
  $70 = $69 >>> 8;
  $71 = $70 & 255;
  $72 = ((3032) + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $68 ^ $73;
  $75 = $6;
  $76 = $75 >>> 16;
  $77 = $76 & 255;
  $78 = ((2008) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $74 ^ $79;
  $81 = $6;
  $82 = $81 >>> 24;
  $83 = (984 + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $80 ^ $84;
  $6 = $85;
  $86 = $7;
  $87 = ((($86)) + 4|0);
  $7 = $87;
  $88 = HEAP32[$86>>2]|0;
  $89 = $6;
  $90 = $89 ^ $88;
  $6 = $90;
  $91 = $6;
  $92 = $91 & 255;
  $93 = ((4056) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $6;
  $96 = $95 >>> 8;
  $97 = $96 & 255;
  $98 = ((3032) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $94 ^ $99;
  $101 = $6;
  $102 = $101 >>> 16;
  $103 = $102 & 255;
  $104 = ((2008) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $100 ^ $105;
  $107 = $6;
  $108 = $107 >>> 24;
  $109 = (984 + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $106 ^ $110;
  $6 = $111;
  $112 = $7;
  $113 = ((($112)) + 4|0);
  $7 = $113;
  $114 = HEAP32[$112>>2]|0;
  $115 = $6;
  $116 = $115 ^ $114;
  $6 = $116;
  $117 = $6;
  $118 = $117 & 255;
  $119 = ((4056) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $6;
  $122 = $121 >>> 8;
  $123 = $122 & 255;
  $124 = ((3032) + ($123<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $120 ^ $125;
  $127 = $6;
  $128 = $127 >>> 16;
  $129 = $128 & 255;
  $130 = ((2008) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $126 ^ $131;
  $133 = $6;
  $134 = $133 >>> 24;
  $135 = (984 + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $132 ^ $136;
  $6 = $137;
  $138 = $7;
  $139 = ((($138)) + 4|0);
  $7 = $139;
  $140 = HEAP32[$138>>2]|0;
  $141 = $6;
  $142 = $141 ^ $140;
  $6 = $142;
  $143 = $6;
  $144 = $143 & 255;
  $145 = ((4056) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $6;
  $148 = $147 >>> 8;
  $149 = $148 & 255;
  $150 = ((3032) + ($149<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $146 ^ $151;
  $153 = $6;
  $154 = $153 >>> 16;
  $155 = $154 & 255;
  $156 = ((2008) + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $152 ^ $157;
  $159 = $6;
  $160 = $159 >>> 24;
  $161 = (984 + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $158 ^ $162;
  $6 = $163;
  $164 = $7;
  $165 = ((($164)) + 4|0);
  $7 = $165;
  $166 = HEAP32[$164>>2]|0;
  $167 = $6;
  $168 = $167 ^ $166;
  $6 = $168;
  $169 = $6;
  $170 = $169 & 255;
  $171 = ((4056) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $6;
  $174 = $173 >>> 8;
  $175 = $174 & 255;
  $176 = ((3032) + ($175<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $172 ^ $177;
  $179 = $6;
  $180 = $179 >>> 16;
  $181 = $180 & 255;
  $182 = ((2008) + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $178 ^ $183;
  $185 = $6;
  $186 = $185 >>> 24;
  $187 = (984 + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $184 ^ $188;
  $6 = $189;
  $190 = $7;
  $191 = ((($190)) + 4|0);
  $7 = $191;
  $192 = HEAP32[$190>>2]|0;
  $193 = $6;
  $194 = $193 ^ $192;
  $6 = $194;
  $195 = $6;
  $196 = $195 & 255;
  $197 = ((4056) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $6;
  $200 = $199 >>> 8;
  $201 = $200 & 255;
  $202 = ((3032) + ($201<<2)|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = $198 ^ $203;
  $205 = $6;
  $206 = $205 >>> 16;
  $207 = $206 & 255;
  $208 = ((2008) + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $204 ^ $209;
  $211 = $6;
  $212 = $211 >>> 24;
  $213 = (984 + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $210 ^ $214;
  $6 = $215;
  $216 = $7;
  $217 = ((($216)) + 4|0);
  $7 = $217;
  $218 = HEAP32[$216>>2]|0;
  $219 = $6;
  $220 = $219 ^ $218;
  $6 = $220;
  $221 = $6;
  $222 = $221 & 255;
  $223 = ((4056) + ($222<<2)|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = $6;
  $226 = $225 >>> 8;
  $227 = $226 & 255;
  $228 = ((3032) + ($227<<2)|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $224 ^ $229;
  $231 = $6;
  $232 = $231 >>> 16;
  $233 = $232 & 255;
  $234 = ((2008) + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $230 ^ $235;
  $237 = $6;
  $238 = $237 >>> 24;
  $239 = (984 + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $236 ^ $240;
  $6 = $241;
  $242 = $5;
  $243 = (($242) - 32)|0;
  $5 = $243;
 }
 while(1) {
  $244 = $5;
  $245 = ($244>>>0)>=(4);
  $246 = $7;
  if (!($245)) {
   break;
  }
  $247 = ((($246)) + 4|0);
  $7 = $247;
  $248 = HEAP32[$246>>2]|0;
  $249 = $6;
  $250 = $249 ^ $248;
  $6 = $250;
  $251 = $6;
  $252 = $251 & 255;
  $253 = ((4056) + ($252<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $6;
  $256 = $255 >>> 8;
  $257 = $256 & 255;
  $258 = ((3032) + ($257<<2)|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = $254 ^ $259;
  $261 = $6;
  $262 = $261 >>> 16;
  $263 = $262 & 255;
  $264 = ((2008) + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $260 ^ $265;
  $267 = $6;
  $268 = $267 >>> 24;
  $269 = (984 + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $266 ^ $270;
  $6 = $271;
  $272 = $5;
  $273 = (($272) - 4)|0;
  $5 = $273;
 }
 $4 = $246;
 $274 = $5;
 $275 = ($274|0)!=(0);
 if (!($275)) {
  $291 = $6;
  $292 = $291 ^ -1;
  $6 = $292;
  $293 = $6;
  STACKTOP = sp;return ($293|0);
 }
 while(1) {
  $276 = $6;
  $277 = $4;
  $278 = ((($277)) + 1|0);
  $4 = $278;
  $279 = HEAP8[$277>>0]|0;
  $280 = $279&255;
  $281 = $276 ^ $280;
  $282 = $281 & 255;
  $283 = (984 + ($282<<2)|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $6;
  $286 = $285 >>> 8;
  $287 = $284 ^ $286;
  $6 = $287;
  $288 = $5;
  $289 = (($288) + -1)|0;
  $5 = $289;
  $290 = ($289|0)!=(0);
  if (!($290)) {
   break;
  }
 }
 $291 = $6;
 $292 = $291 ^ -1;
 $6 = $292;
 $293 = $6;
 STACKTOP = sp;return ($293|0);
}
function _crc32_big($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $8 >>> 24;
 $10 = $9 & 255;
 $11 = $3;
 $12 = $11 >>> 8;
 $13 = $12 & 65280;
 $14 = (($10) + ($13))|0;
 $15 = $3;
 $16 = $15 & 65280;
 $17 = $16 << 8;
 $18 = (($14) + ($17))|0;
 $19 = $3;
 $20 = $19 & 255;
 $21 = $20 << 24;
 $22 = (($18) + ($21))|0;
 $6 = $22;
 $23 = $6;
 $24 = $23 ^ -1;
 $6 = $24;
 while(1) {
  $25 = $5;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   break;
  }
  $27 = $4;
  $28 = $27;
  $29 = $28 & 3;
  $30 = ($29|0)!=(0);
  if (!($30)) {
   break;
  }
  $31 = $6;
  $32 = $31 >>> 24;
  $33 = $4;
  $34 = ((($33)) + 1|0);
  $4 = $34;
  $35 = HEAP8[$33>>0]|0;
  $36 = $35&255;
  $37 = $32 ^ $36;
  $38 = ((5080) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $6;
  $41 = $40 << 8;
  $42 = $39 ^ $41;
  $6 = $42;
  $43 = $5;
  $44 = (($43) + -1)|0;
  $5 = $44;
 }
 $45 = $4;
 $7 = $45;
 while(1) {
  $46 = $5;
  $47 = ($46>>>0)>=(32);
  if (!($47)) {
   break;
  }
  $48 = $7;
  $49 = ((($48)) + 4|0);
  $7 = $49;
  $50 = HEAP32[$48>>2]|0;
  $51 = $6;
  $52 = $51 ^ $50;
  $6 = $52;
  $53 = $6;
  $54 = $53 & 255;
  $55 = ((5080) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $6;
  $58 = $57 >>> 8;
  $59 = $58 & 255;
  $60 = ((6104) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $56 ^ $61;
  $63 = $6;
  $64 = $63 >>> 16;
  $65 = $64 & 255;
  $66 = ((7128) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $62 ^ $67;
  $69 = $6;
  $70 = $69 >>> 24;
  $71 = ((8152) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $68 ^ $72;
  $6 = $73;
  $74 = $7;
  $75 = ((($74)) + 4|0);
  $7 = $75;
  $76 = HEAP32[$74>>2]|0;
  $77 = $6;
  $78 = $77 ^ $76;
  $6 = $78;
  $79 = $6;
  $80 = $79 & 255;
  $81 = ((5080) + ($80<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $6;
  $84 = $83 >>> 8;
  $85 = $84 & 255;
  $86 = ((6104) + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $82 ^ $87;
  $89 = $6;
  $90 = $89 >>> 16;
  $91 = $90 & 255;
  $92 = ((7128) + ($91<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $88 ^ $93;
  $95 = $6;
  $96 = $95 >>> 24;
  $97 = ((8152) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $94 ^ $98;
  $6 = $99;
  $100 = $7;
  $101 = ((($100)) + 4|0);
  $7 = $101;
  $102 = HEAP32[$100>>2]|0;
  $103 = $6;
  $104 = $103 ^ $102;
  $6 = $104;
  $105 = $6;
  $106 = $105 & 255;
  $107 = ((5080) + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $6;
  $110 = $109 >>> 8;
  $111 = $110 & 255;
  $112 = ((6104) + ($111<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $108 ^ $113;
  $115 = $6;
  $116 = $115 >>> 16;
  $117 = $116 & 255;
  $118 = ((7128) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $114 ^ $119;
  $121 = $6;
  $122 = $121 >>> 24;
  $123 = ((8152) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $120 ^ $124;
  $6 = $125;
  $126 = $7;
  $127 = ((($126)) + 4|0);
  $7 = $127;
  $128 = HEAP32[$126>>2]|0;
  $129 = $6;
  $130 = $129 ^ $128;
  $6 = $130;
  $131 = $6;
  $132 = $131 & 255;
  $133 = ((5080) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $6;
  $136 = $135 >>> 8;
  $137 = $136 & 255;
  $138 = ((6104) + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $134 ^ $139;
  $141 = $6;
  $142 = $141 >>> 16;
  $143 = $142 & 255;
  $144 = ((7128) + ($143<<2)|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $140 ^ $145;
  $147 = $6;
  $148 = $147 >>> 24;
  $149 = ((8152) + ($148<<2)|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $146 ^ $150;
  $6 = $151;
  $152 = $7;
  $153 = ((($152)) + 4|0);
  $7 = $153;
  $154 = HEAP32[$152>>2]|0;
  $155 = $6;
  $156 = $155 ^ $154;
  $6 = $156;
  $157 = $6;
  $158 = $157 & 255;
  $159 = ((5080) + ($158<<2)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $6;
  $162 = $161 >>> 8;
  $163 = $162 & 255;
  $164 = ((6104) + ($163<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $160 ^ $165;
  $167 = $6;
  $168 = $167 >>> 16;
  $169 = $168 & 255;
  $170 = ((7128) + ($169<<2)|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = $166 ^ $171;
  $173 = $6;
  $174 = $173 >>> 24;
  $175 = ((8152) + ($174<<2)|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $172 ^ $176;
  $6 = $177;
  $178 = $7;
  $179 = ((($178)) + 4|0);
  $7 = $179;
  $180 = HEAP32[$178>>2]|0;
  $181 = $6;
  $182 = $181 ^ $180;
  $6 = $182;
  $183 = $6;
  $184 = $183 & 255;
  $185 = ((5080) + ($184<<2)|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = $6;
  $188 = $187 >>> 8;
  $189 = $188 & 255;
  $190 = ((6104) + ($189<<2)|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $186 ^ $191;
  $193 = $6;
  $194 = $193 >>> 16;
  $195 = $194 & 255;
  $196 = ((7128) + ($195<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = $192 ^ $197;
  $199 = $6;
  $200 = $199 >>> 24;
  $201 = ((8152) + ($200<<2)|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $198 ^ $202;
  $6 = $203;
  $204 = $7;
  $205 = ((($204)) + 4|0);
  $7 = $205;
  $206 = HEAP32[$204>>2]|0;
  $207 = $6;
  $208 = $207 ^ $206;
  $6 = $208;
  $209 = $6;
  $210 = $209 & 255;
  $211 = ((5080) + ($210<<2)|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $6;
  $214 = $213 >>> 8;
  $215 = $214 & 255;
  $216 = ((6104) + ($215<<2)|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = $212 ^ $217;
  $219 = $6;
  $220 = $219 >>> 16;
  $221 = $220 & 255;
  $222 = ((7128) + ($221<<2)|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = $218 ^ $223;
  $225 = $6;
  $226 = $225 >>> 24;
  $227 = ((8152) + ($226<<2)|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $224 ^ $228;
  $6 = $229;
  $230 = $7;
  $231 = ((($230)) + 4|0);
  $7 = $231;
  $232 = HEAP32[$230>>2]|0;
  $233 = $6;
  $234 = $233 ^ $232;
  $6 = $234;
  $235 = $6;
  $236 = $235 & 255;
  $237 = ((5080) + ($236<<2)|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $6;
  $240 = $239 >>> 8;
  $241 = $240 & 255;
  $242 = ((6104) + ($241<<2)|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $238 ^ $243;
  $245 = $6;
  $246 = $245 >>> 16;
  $247 = $246 & 255;
  $248 = ((7128) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $244 ^ $249;
  $251 = $6;
  $252 = $251 >>> 24;
  $253 = ((8152) + ($252<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $250 ^ $254;
  $6 = $255;
  $256 = $5;
  $257 = (($256) - 32)|0;
  $5 = $257;
 }
 while(1) {
  $258 = $5;
  $259 = ($258>>>0)>=(4);
  $260 = $7;
  if (!($259)) {
   break;
  }
  $261 = ((($260)) + 4|0);
  $7 = $261;
  $262 = HEAP32[$260>>2]|0;
  $263 = $6;
  $264 = $263 ^ $262;
  $6 = $264;
  $265 = $6;
  $266 = $265 & 255;
  $267 = ((5080) + ($266<<2)|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $6;
  $270 = $269 >>> 8;
  $271 = $270 & 255;
  $272 = ((6104) + ($271<<2)|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $268 ^ $273;
  $275 = $6;
  $276 = $275 >>> 16;
  $277 = $276 & 255;
  $278 = ((7128) + ($277<<2)|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $274 ^ $279;
  $281 = $6;
  $282 = $281 >>> 24;
  $283 = ((8152) + ($282<<2)|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $280 ^ $284;
  $6 = $285;
  $286 = $5;
  $287 = (($286) - 4)|0;
  $5 = $287;
 }
 $4 = $260;
 $288 = $5;
 $289 = ($288|0)!=(0);
 if (!($289)) {
  $305 = $6;
  $306 = $305 ^ -1;
  $6 = $306;
  $307 = $6;
  $308 = $307 >>> 24;
  $309 = $308 & 255;
  $310 = $6;
  $311 = $310 >>> 8;
  $312 = $311 & 65280;
  $313 = (($309) + ($312))|0;
  $314 = $6;
  $315 = $314 & 65280;
  $316 = $315 << 8;
  $317 = (($313) + ($316))|0;
  $318 = $6;
  $319 = $318 & 255;
  $320 = $319 << 24;
  $321 = (($317) + ($320))|0;
  STACKTOP = sp;return ($321|0);
 }
 while(1) {
  $290 = $6;
  $291 = $290 >>> 24;
  $292 = $4;
  $293 = ((($292)) + 1|0);
  $4 = $293;
  $294 = HEAP8[$292>>0]|0;
  $295 = $294&255;
  $296 = $291 ^ $295;
  $297 = ((5080) + ($296<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $6;
  $300 = $299 << 8;
  $301 = $298 ^ $300;
  $6 = $301;
  $302 = $5;
  $303 = (($302) + -1)|0;
  $5 = $303;
  $304 = ($303|0)!=(0);
  if (!($304)) {
   break;
  }
 }
 $305 = $6;
 $306 = $305 ^ -1;
 $6 = $306;
 $307 = $6;
 $308 = $307 >>> 24;
 $309 = $308 & 255;
 $310 = $6;
 $311 = $310 >>> 8;
 $312 = $311 & 65280;
 $313 = (($309) + ($312))|0;
 $314 = $6;
 $315 = $314 & 65280;
 $316 = $315 << 8;
 $317 = (($313) + ($316))|0;
 $318 = $6;
 $319 = $318 & 255;
 $320 = $319 << 24;
 $321 = (($317) + ($320))|0;
 STACKTOP = sp;return ($321|0);
}
function _crc32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_crc32_z($6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _inflateResetKeep($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_inflateStateCheck($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = -2;
  $54 = $1;
  STACKTOP = sp;return ($54|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $10 = $3;
 $11 = ((($10)) + 32|0);
 HEAP32[$11>>2] = 0;
 $12 = $2;
 $13 = ((($12)) + 20|0);
 HEAP32[$13>>2] = 0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = ((($16)) + 24|0);
 HEAP32[$17>>2] = 0;
 $18 = $3;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $3;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & 1;
  $26 = $2;
  $27 = ((($26)) + 48|0);
  HEAP32[$27>>2] = $25;
 }
 $28 = $3;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = 16180;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 HEAP32[$31>>2] = 0;
 $32 = $3;
 $33 = ((($32)) + 16|0);
 HEAP32[$33>>2] = 0;
 $34 = $3;
 $35 = ((($34)) + 24|0);
 HEAP32[$35>>2] = 32768;
 $36 = $3;
 $37 = ((($36)) + 36|0);
 HEAP32[$37>>2] = 0;
 $38 = $3;
 $39 = ((($38)) + 60|0);
 HEAP32[$39>>2] = 0;
 $40 = $3;
 $41 = ((($40)) + 64|0);
 HEAP32[$41>>2] = 0;
 $42 = $3;
 $43 = ((($42)) + 1332|0);
 $44 = $3;
 $45 = ((($44)) + 112|0);
 HEAP32[$45>>2] = $43;
 $46 = $3;
 $47 = ((($46)) + 84|0);
 HEAP32[$47>>2] = $43;
 $48 = $3;
 $49 = ((($48)) + 80|0);
 HEAP32[$49>>2] = $43;
 $50 = $3;
 $51 = ((($50)) + 7108|0);
 HEAP32[$51>>2] = 1;
 $52 = $3;
 $53 = ((($52)) + 7112|0);
 HEAP32[$53>>2] = -1;
 $1 = 0;
 $54 = $1;
 STACKTOP = sp;return ($54|0);
}
function _inflateStateCheck($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $2;
  $7 = ((($6)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = $2;
   $11 = ((($10)) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = $2;
    $15 = ((($14)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $3 = $16;
    $17 = $3;
    $18 = ($17|0)==(0|0);
    if (!($18)) {
     $19 = $3;
     $20 = HEAP32[$19>>2]|0;
     $21 = $2;
     $22 = ($20|0)!=($21|0);
     if (!($22)) {
      $23 = $3;
      $24 = ((($23)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25>>>0)<(16180);
      if (!($26)) {
       $27 = $3;
       $28 = ((($27)) + 4|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29>>>0)>(16211);
       if (!($30)) {
        $1 = 0;
        $31 = $1;
        STACKTOP = sp;return ($31|0);
       }
      }
     }
    }
    $1 = 1;
    $31 = $1;
    STACKTOP = sp;return ($31|0);
   }
  }
 }
 $1 = 1;
 $31 = $1;
 STACKTOP = sp;return ($31|0);
}
function _inflateReset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_inflateStateCheck($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = -2;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $7 = $2;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $3 = $9;
  $10 = $3;
  $11 = ((($10)) + 44|0);
  HEAP32[$11>>2] = 0;
  $12 = $3;
  $13 = ((($12)) + 48|0);
  HEAP32[$13>>2] = 0;
  $14 = $3;
  $15 = ((($14)) + 52|0);
  HEAP32[$15>>2] = 0;
  $16 = $2;
  $17 = (_inflateResetKeep($16)|0);
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _inflateReset2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = (_inflateStateCheck($7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $2 = -2;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 $10 = $3;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 $13 = $4;
 $14 = ($13|0)<(0);
 if ($14) {
  $5 = 0;
  $15 = $4;
  $16 = (0 - ($15))|0;
  $4 = $16;
 } else {
  $17 = $4;
  $18 = $17 >> 4;
  $19 = (($18) + 5)|0;
  $5 = $19;
  $20 = $4;
  $21 = ($20|0)<(48);
  if ($21) {
   $22 = $4;
   $23 = $22 & 15;
   $4 = $23;
  }
 }
 $24 = $4;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $4;
  $27 = ($26|0)<(8);
  $28 = $4;
  $29 = ($28|0)>(15);
  $or$cond = $27 | $29;
  if ($or$cond) {
   $2 = -2;
   $58 = $2;
   STACKTOP = sp;return ($58|0);
  }
 }
 $30 = $6;
 $31 = ((($30)) + 56|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $6;
  $35 = ((($34)) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $4;
  $38 = ($36|0)!=($37|0);
  if ($38) {
   $39 = $3;
   $40 = ((($39)) + 36|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $3;
   $43 = ((($42)) + 40|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $6;
   $46 = ((($45)) + 56|0);
   $47 = HEAP32[$46>>2]|0;
   FUNCTION_TABLE_vii[$41 & 127]($44,$47);
   $48 = $6;
   $49 = ((($48)) + 56|0);
   HEAP32[$49>>2] = 0;
  }
 }
 $50 = $5;
 $51 = $6;
 $52 = ((($51)) + 12|0);
 HEAP32[$52>>2] = $50;
 $53 = $4;
 $54 = $6;
 $55 = ((($54)) + 40|0);
 HEAP32[$55>>2] = $53;
 $56 = $3;
 $57 = (_inflateReset($56)|0);
 $2 = $57;
 $58 = $2;
 STACKTOP = sp;return ($58|0);
}
function _inflateInit2_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = $7;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = HEAP8[18393]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($15|0)!=($17|0);
  $19 = $8;
  $20 = ($19|0)!=(56);
  $or$cond = $18 | $20;
  if (!($or$cond)) {
   $21 = $5;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $4 = -2;
    $72 = $4;
    STACKTOP = sp;return ($72|0);
   }
   $23 = $5;
   $24 = ((($23)) + 24|0);
   HEAP32[$24>>2] = 0;
   $25 = $5;
   $26 = ((($25)) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $29 = $5;
    $30 = ((($29)) + 32|0);
    HEAP32[$30>>2] = 69;
    $31 = $5;
    $32 = ((($31)) + 40|0);
    HEAP32[$32>>2] = 0;
   }
   $33 = $5;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if ($36) {
    $37 = $5;
    $38 = ((($37)) + 36|0);
    HEAP32[$38>>2] = 70;
   }
   $39 = $5;
   $40 = ((($39)) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $5;
   $43 = ((($42)) + 40|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iiii[$41 & 127]($44,1,7120)|0);
   $10 = $45;
   $46 = $10;
   $47 = ($46|0)==(0|0);
   if ($47) {
    $4 = -4;
    $72 = $4;
    STACKTOP = sp;return ($72|0);
   }
   $48 = $10;
   $49 = $5;
   $50 = ((($49)) + 28|0);
   HEAP32[$50>>2] = $48;
   $51 = $5;
   $52 = $10;
   HEAP32[$52>>2] = $51;
   $53 = $10;
   $54 = ((($53)) + 56|0);
   HEAP32[$54>>2] = 0;
   $55 = $10;
   $56 = ((($55)) + 4|0);
   HEAP32[$56>>2] = 16180;
   $57 = $5;
   $58 = $6;
   $59 = (_inflateReset2($57,$58)|0);
   $9 = $59;
   $60 = $9;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = $5;
    $63 = ((($62)) + 36|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $5;
    $66 = ((($65)) + 40|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $10;
    FUNCTION_TABLE_vii[$64 & 127]($67,$68);
    $69 = $5;
    $70 = ((($69)) + 28|0);
    HEAP32[$70>>2] = 0;
   }
   $71 = $9;
   $4 = $71;
   $72 = $4;
   STACKTOP = sp;return ($72|0);
  }
 }
 $4 = -6;
 $72 = $4;
 STACKTOP = sp;return ($72|0);
}
function _inflateInit_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_inflateInit2_($6,15,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _inflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink22 = 0, $$sink5 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0;
 var $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0;
 var $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0;
 var $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0;
 var $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0;
 var $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0;
 var $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0;
 var $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0;
 var $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0;
 var $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0;
 var $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0;
 var $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0;
 var $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0;
 var $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0;
 var $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0;
 var $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0;
 var $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0;
 var $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0;
 var $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0;
 var $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0;
 var $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0;
 var $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0;
 var $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0;
 var $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0;
 var $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0;
 var $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0;
 var $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0;
 var $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0;
 var $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0;
 var $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0;
 var $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond4 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $16 = sp + 68|0;
 $17 = sp + 64|0;
 $20 = sp + 72|0;
 $3 = $0;
 $4 = $1;
 $21 = $3;
 $22 = (_inflateStateCheck($21)|0);
 $23 = ($22|0)!=(0);
 do {
  if (!($23)) {
   $24 = $3;
   $25 = ((($24)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if (!($27)) {
    $28 = $3;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if ($30) {
     $31 = $3;
     $32 = ((($31)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     }
    }
    $35 = $3;
    $36 = ((($35)) + 28|0);
    $37 = HEAP32[$36>>2]|0;
    $5 = $37;
    $38 = $5;
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(16191);
    if ($41) {
     $42 = $5;
     $43 = ((($42)) + 4|0);
     HEAP32[$43>>2] = 16192;
    }
    $44 = $3;
    $45 = ((($44)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $7 = $46;
    $47 = $3;
    $48 = ((($47)) + 16|0);
    $49 = HEAP32[$48>>2]|0;
    $9 = $49;
    $50 = $3;
    $51 = HEAP32[$50>>2]|0;
    $6 = $51;
    $52 = $3;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $8 = $54;
    $55 = $5;
    $56 = ((($55)) + 60|0);
    $57 = HEAP32[$56>>2]|0;
    $10 = $57;
    $58 = $5;
    $59 = ((($58)) + 64|0);
    $60 = HEAP32[$59>>2]|0;
    $11 = $60;
    $61 = $8;
    $12 = $61;
    $62 = $9;
    $13 = $62;
    $19 = 0;
    L10: while(1) {
     $63 = $5;
     $64 = ((($63)) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     L12: do {
      switch ($65|0) {
      case 16208:  {
       label = 315;
       break L10;
       break;
      }
      case 16209:  {
       label = 316;
       break L10;
       break;
      }
      case 16210:  {
       label = 317;
       break L10;
       break;
      }
      case 16180:  {
       $66 = $5;
       $67 = ((($66)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($68|0)==(0);
       if ($69) {
        $70 = $5;
        $71 = ((($70)) + 4|0);
        HEAP32[$71>>2] = 16192;
        continue L10;
       }
       while(1) {
        $72 = $11;
        $73 = ($72>>>0)<(16);
        if (!($73)) {
         break;
        }
        $74 = $8;
        $75 = ($74|0)==(0);
        if ($75) {
         break L10;
        }
        $76 = $8;
        $77 = (($76) + -1)|0;
        $8 = $77;
        $78 = $6;
        $79 = ((($78)) + 1|0);
        $6 = $79;
        $80 = HEAP8[$78>>0]|0;
        $81 = $80&255;
        $82 = $11;
        $83 = $81 << $82;
        $84 = $10;
        $85 = (($84) + ($83))|0;
        $10 = $85;
        $86 = $11;
        $87 = (($86) + 8)|0;
        $11 = $87;
       }
       $88 = $5;
       $89 = ((($88)) + 12|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = $90 & 2;
       $92 = ($91|0)!=(0);
       $93 = $10;
       $94 = ($93|0)==(35615);
       $or$cond = $92 & $94;
       $95 = $5;
       if ($or$cond) {
        $96 = ((($95)) + 40|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($97|0)==(0);
        if ($98) {
         $99 = $5;
         $100 = ((($99)) + 40|0);
         HEAP32[$100>>2] = 15;
        }
        $101 = (_crc32(0,0,0)|0);
        $102 = $5;
        $103 = ((($102)) + 28|0);
        HEAP32[$103>>2] = $101;
        $104 = $10;
        $105 = $104&255;
        HEAP8[$20>>0] = $105;
        $106 = $10;
        $107 = $106 >>> 8;
        $108 = $107&255;
        $109 = ((($20)) + 1|0);
        HEAP8[$109>>0] = $108;
        $110 = $5;
        $111 = ((($110)) + 28|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = (_crc32($112,$20,2)|0);
        $114 = $5;
        $115 = ((($114)) + 28|0);
        HEAP32[$115>>2] = $113;
        $10 = 0;
        $11 = 0;
        $116 = $5;
        $117 = ((($116)) + 4|0);
        HEAP32[$117>>2] = 16181;
        continue L10;
       }
       $118 = ((($95)) + 20|0);
       HEAP32[$118>>2] = 0;
       $119 = $5;
       $120 = ((($119)) + 36|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = ($121|0)!=(0|0);
       if ($122) {
        $123 = $5;
        $124 = ((($123)) + 36|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = ((($125)) + 48|0);
        HEAP32[$126>>2] = -1;
       }
       $127 = $5;
       $128 = ((($127)) + 12|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = $129 & 1;
       $131 = ($130|0)!=(0);
       if ($131) {
        $132 = $10;
        $133 = $132 & 255;
        $134 = $133 << 8;
        $135 = $10;
        $136 = $135 >>> 8;
        $137 = (($134) + ($136))|0;
        $138 = (($137>>>0) % 31)&-1;
        $139 = ($138|0)!=(0);
        if (!($139)) {
         $144 = $10;
         $145 = $144 & 15;
         $146 = ($145|0)!=(8);
         if ($146) {
          $147 = $3;
          $148 = ((($147)) + 24|0);
          HEAP32[$148>>2] = 18423;
          $149 = $5;
          $150 = ((($149)) + 4|0);
          HEAP32[$150>>2] = 16209;
          continue L10;
         }
         $151 = $10;
         $152 = $151 >>> 4;
         $10 = $152;
         $153 = $11;
         $154 = (($153) - 4)|0;
         $11 = $154;
         $155 = $10;
         $156 = $155 & 15;
         $157 = (($156) + 8)|0;
         $18 = $157;
         $158 = $5;
         $159 = ((($158)) + 40|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0);
         if ($161) {
          $162 = $18;
          $163 = $5;
          $164 = ((($163)) + 40|0);
          HEAP32[$164>>2] = $162;
         }
         $165 = $18;
         $166 = ($165>>>0)>(15);
         if (!($166)) {
          $167 = $18;
          $168 = $5;
          $169 = ((($168)) + 40|0);
          $170 = HEAP32[$169>>2]|0;
          $171 = ($167>>>0)>($170>>>0);
          if (!($171)) {
           $176 = $18;
           $177 = 1 << $176;
           $178 = $5;
           $179 = ((($178)) + 24|0);
           HEAP32[$179>>2] = $177;
           $180 = (_adler32(0,0,0)|0);
           $181 = $5;
           $182 = ((($181)) + 28|0);
           HEAP32[$182>>2] = $180;
           $183 = $3;
           $184 = ((($183)) + 48|0);
           HEAP32[$184>>2] = $180;
           $185 = $10;
           $186 = $185 & 512;
           $187 = ($186|0)!=(0);
           $188 = $187 ? 16189 : 16191;
           $189 = $5;
           $190 = ((($189)) + 4|0);
           HEAP32[$190>>2] = $188;
           $10 = 0;
           $11 = 0;
           continue L10;
          }
         }
         $172 = $3;
         $173 = ((($172)) + 24|0);
         HEAP32[$173>>2] = 18450;
         $174 = $5;
         $175 = ((($174)) + 4|0);
         HEAP32[$175>>2] = 16209;
         continue L10;
        }
       }
       $140 = $3;
       $141 = ((($140)) + 24|0);
       HEAP32[$141>>2] = 18400;
       $142 = $5;
       $143 = ((($142)) + 4|0);
       HEAP32[$143>>2] = 16209;
       continue L10;
       break;
      }
      case 16181:  {
       while(1) {
        $191 = $11;
        $192 = ($191>>>0)<(16);
        if (!($192)) {
         break;
        }
        $193 = $8;
        $194 = ($193|0)==(0);
        if ($194) {
         break L10;
        }
        $195 = $8;
        $196 = (($195) + -1)|0;
        $8 = $196;
        $197 = $6;
        $198 = ((($197)) + 1|0);
        $6 = $198;
        $199 = HEAP8[$197>>0]|0;
        $200 = $199&255;
        $201 = $11;
        $202 = $200 << $201;
        $203 = $10;
        $204 = (($203) + ($202))|0;
        $10 = $204;
        $205 = $11;
        $206 = (($205) + 8)|0;
        $11 = $206;
       }
       $207 = $10;
       $208 = $5;
       $209 = ((($208)) + 20|0);
       HEAP32[$209>>2] = $207;
       $210 = $5;
       $211 = ((($210)) + 20|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = $212 & 255;
       $214 = ($213|0)!=(8);
       if ($214) {
        $215 = $3;
        $216 = ((($215)) + 24|0);
        HEAP32[$216>>2] = 18423;
        $217 = $5;
        $218 = ((($217)) + 4|0);
        HEAP32[$218>>2] = 16209;
        continue L10;
       }
       $219 = $5;
       $220 = ((($219)) + 20|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $221 & 57344;
       $223 = ($222|0)!=(0);
       if ($223) {
        $224 = $3;
        $225 = ((($224)) + 24|0);
        HEAP32[$225>>2] = 18470;
        $226 = $5;
        $227 = ((($226)) + 4|0);
        HEAP32[$227>>2] = 16209;
        continue L10;
       }
       $228 = $5;
       $229 = ((($228)) + 36|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = ($230|0)!=(0|0);
       if ($231) {
        $232 = $10;
        $233 = $232 >>> 8;
        $234 = $233 & 1;
        $235 = $5;
        $236 = ((($235)) + 36|0);
        $237 = HEAP32[$236>>2]|0;
        HEAP32[$237>>2] = $234;
       }
       $238 = $5;
       $239 = ((($238)) + 20|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = $240 & 512;
       $242 = ($241|0)!=(0);
       if ($242) {
        $243 = $5;
        $244 = ((($243)) + 12|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = $245 & 4;
        $247 = ($246|0)!=(0);
        if ($247) {
         $248 = $10;
         $249 = $248&255;
         HEAP8[$20>>0] = $249;
         $250 = $10;
         $251 = $250 >>> 8;
         $252 = $251&255;
         $253 = ((($20)) + 1|0);
         HEAP8[$253>>0] = $252;
         $254 = $5;
         $255 = ((($254)) + 28|0);
         $256 = HEAP32[$255>>2]|0;
         $257 = (_crc32($256,$20,2)|0);
         $258 = $5;
         $259 = ((($258)) + 28|0);
         HEAP32[$259>>2] = $257;
        }
       }
       $10 = 0;
       $11 = 0;
       $260 = $5;
       $261 = ((($260)) + 4|0);
       HEAP32[$261>>2] = 16182;
       label = 45;
       break;
      }
      case 16182:  {
       label = 45;
       break;
      }
      case 16183:  {
       label = 54;
       break;
      }
      case 16184:  {
       label = 63;
       break;
      }
      case 16185:  {
       label = 76;
       break;
      }
      case 16186:  {
       label = 92;
       break;
      }
      case 16187:  {
       label = 108;
       break;
      }
      case 16188:  {
       label = 124;
       break;
      }
      case 16189:  {
       while(1) {
        $768 = $11;
        $769 = ($768>>>0)<(32);
        if (!($769)) {
         break;
        }
        $770 = $8;
        $771 = ($770|0)==(0);
        if ($771) {
         break L10;
        }
        $772 = $8;
        $773 = (($772) + -1)|0;
        $8 = $773;
        $774 = $6;
        $775 = ((($774)) + 1|0);
        $6 = $775;
        $776 = HEAP8[$774>>0]|0;
        $777 = $776&255;
        $778 = $11;
        $779 = $777 << $778;
        $780 = $10;
        $781 = (($780) + ($779))|0;
        $10 = $781;
        $782 = $11;
        $783 = (($782) + 8)|0;
        $11 = $783;
       }
       $784 = $10;
       $785 = $784 >>> 24;
       $786 = $785 & 255;
       $787 = $10;
       $788 = $787 >>> 8;
       $789 = $788 & 65280;
       $790 = (($786) + ($789))|0;
       $791 = $10;
       $792 = $791 & 65280;
       $793 = $792 << 8;
       $794 = (($790) + ($793))|0;
       $795 = $10;
       $796 = $795 & 255;
       $797 = $796 << 24;
       $798 = (($794) + ($797))|0;
       $799 = $5;
       $800 = ((($799)) + 28|0);
       HEAP32[$800>>2] = $798;
       $801 = $3;
       $802 = ((($801)) + 48|0);
       HEAP32[$802>>2] = $798;
       $10 = 0;
       $11 = 0;
       $803 = $5;
       $804 = ((($803)) + 4|0);
       HEAP32[$804>>2] = 16190;
       label = 139;
       break;
      }
      case 16190:  {
       label = 139;
       break;
      }
      case 16191:  {
       label = 142;
       break;
      }
      case 16192:  {
       label = 143;
       break;
      }
      case 16193:  {
       $896 = $11;
       $897 = $896 & 7;
       $898 = $10;
       $899 = $898 >>> $897;
       $10 = $899;
       $900 = $11;
       $901 = $900 & 7;
       $902 = $11;
       $903 = (($902) - ($901))|0;
       $11 = $903;
       while(1) {
        $904 = $11;
        $905 = ($904>>>0)<(32);
        if (!($905)) {
         break;
        }
        $906 = $8;
        $907 = ($906|0)==(0);
        if ($907) {
         break L10;
        }
        $908 = $8;
        $909 = (($908) + -1)|0;
        $8 = $909;
        $910 = $6;
        $911 = ((($910)) + 1|0);
        $6 = $911;
        $912 = HEAP8[$910>>0]|0;
        $913 = $912&255;
        $914 = $11;
        $915 = $913 << $914;
        $916 = $10;
        $917 = (($916) + ($915))|0;
        $10 = $917;
        $918 = $11;
        $919 = (($918) + 8)|0;
        $11 = $919;
       }
       $920 = $10;
       $921 = $920 & 65535;
       $922 = $10;
       $923 = $922 >>> 16;
       $924 = $923 ^ 65535;
       $925 = ($921|0)!=($924|0);
       if ($925) {
        $926 = $3;
        $927 = ((($926)) + 24|0);
        HEAP32[$927>>2] = 18534;
        $928 = $5;
        $929 = ((($928)) + 4|0);
        HEAP32[$929>>2] = 16209;
        continue L10;
       } else {
        $930 = $10;
        $931 = $930 & 65535;
        $932 = $5;
        $933 = ((($932)) + 68|0);
        HEAP32[$933>>2] = $931;
        $10 = 0;
        $11 = 0;
        $934 = $5;
        $935 = ((($934)) + 4|0);
        HEAP32[$935>>2] = 16194;
        $936 = $4;
        $937 = ($936|0)==(6);
        if ($937) {
         break L10;
        } else {
         label = 164;
         break L12;
        }
       }
       break;
      }
      case 16194:  {
       label = 164;
       break;
      }
      case 16195:  {
       label = 165;
       break;
      }
      case 16196:  {
       while(1) {
        $977 = $11;
        $978 = ($977>>>0)<(14);
        if (!($978)) {
         break;
        }
        $979 = $8;
        $980 = ($979|0)==(0);
        if ($980) {
         break L10;
        }
        $981 = $8;
        $982 = (($981) + -1)|0;
        $8 = $982;
        $983 = $6;
        $984 = ((($983)) + 1|0);
        $6 = $984;
        $985 = HEAP8[$983>>0]|0;
        $986 = $985&255;
        $987 = $11;
        $988 = $986 << $987;
        $989 = $10;
        $990 = (($989) + ($988))|0;
        $10 = $990;
        $991 = $11;
        $992 = (($991) + 8)|0;
        $11 = $992;
       }
       $993 = $10;
       $994 = $993 & 31;
       $995 = (($994) + 257)|0;
       $996 = $5;
       $997 = ((($996)) + 100|0);
       HEAP32[$997>>2] = $995;
       $998 = $10;
       $999 = $998 >>> 5;
       $10 = $999;
       $1000 = $11;
       $1001 = (($1000) - 5)|0;
       $11 = $1001;
       $1002 = $10;
       $1003 = $1002 & 31;
       $1004 = (($1003) + 1)|0;
       $1005 = $5;
       $1006 = ((($1005)) + 104|0);
       HEAP32[$1006>>2] = $1004;
       $1007 = $10;
       $1008 = $1007 >>> 5;
       $10 = $1008;
       $1009 = $11;
       $1010 = (($1009) - 5)|0;
       $11 = $1010;
       $1011 = $10;
       $1012 = $1011 & 15;
       $1013 = (($1012) + 4)|0;
       $1014 = $5;
       $1015 = ((($1014)) + 96|0);
       HEAP32[$1015>>2] = $1013;
       $1016 = $10;
       $1017 = $1016 >>> 4;
       $10 = $1017;
       $1018 = $11;
       $1019 = (($1018) - 4)|0;
       $11 = $1019;
       $1020 = $5;
       $1021 = ((($1020)) + 100|0);
       $1022 = HEAP32[$1021>>2]|0;
       $1023 = ($1022>>>0)>(286);
       if (!($1023)) {
        $1024 = $5;
        $1025 = ((($1024)) + 104|0);
        $1026 = HEAP32[$1025>>2]|0;
        $1027 = ($1026>>>0)>(30);
        if (!($1027)) {
         $1032 = $5;
         $1033 = ((($1032)) + 108|0);
         HEAP32[$1033>>2] = 0;
         $1034 = $5;
         $1035 = ((($1034)) + 4|0);
         HEAP32[$1035>>2] = 16197;
         label = 180;
         break L12;
        }
       }
       $1028 = $3;
       $1029 = ((($1028)) + 24|0);
       HEAP32[$1029>>2] = 18563;
       $1030 = $5;
       $1031 = ((($1030)) + 4|0);
       HEAP32[$1031>>2] = 16209;
       continue L10;
       break;
      }
      case 16197:  {
       label = 180;
       break;
      }
      case 16198:  {
       label = 190;
       break;
      }
      case 16199:  {
       label = 225;
       break;
      }
      case 16200:  {
       label = 226;
       break;
      }
      case 16201:  {
       label = 247;
       break;
      }
      case 16202:  {
       label = 253;
       break;
      }
      case 16203:  {
       label = 265;
       break;
      }
      case 16204:  {
       break;
      }
      case 16205:  {
       $1964 = $9;
       $1965 = ($1964|0)==(0);
       if ($1965) {
        break L10;
       }
       $1966 = $5;
       $1967 = ((($1966)) + 68|0);
       $1968 = HEAP32[$1967>>2]|0;
       $1969 = $1968&255;
       $1970 = $7;
       $1971 = ((($1970)) + 1|0);
       $7 = $1971;
       HEAP8[$1970>>0] = $1969;
       $1972 = $9;
       $1973 = (($1972) + -1)|0;
       $9 = $1973;
       $1974 = $5;
       $1975 = ((($1974)) + 4|0);
       HEAP32[$1975>>2] = 16200;
       continue L10;
       break;
      }
      case 16206:  {
       $1976 = $5;
       $1977 = ((($1976)) + 12|0);
       $1978 = HEAP32[$1977>>2]|0;
       $1979 = ($1978|0)!=(0);
       if ($1979) {
        while(1) {
         $1980 = $11;
         $1981 = ($1980>>>0)<(32);
         if (!($1981)) {
          break;
         }
         $1982 = $8;
         $1983 = ($1982|0)==(0);
         if ($1983) {
          break L10;
         }
         $1984 = $8;
         $1985 = (($1984) + -1)|0;
         $8 = $1985;
         $1986 = $6;
         $1987 = ((($1986)) + 1|0);
         $6 = $1987;
         $1988 = HEAP8[$1986>>0]|0;
         $1989 = $1988&255;
         $1990 = $11;
         $1991 = $1989 << $1990;
         $1992 = $10;
         $1993 = (($1992) + ($1991))|0;
         $10 = $1993;
         $1994 = $11;
         $1995 = (($1994) + 8)|0;
         $11 = $1995;
        }
        $1996 = $9;
        $1997 = $13;
        $1998 = (($1997) - ($1996))|0;
        $13 = $1998;
        $1999 = $13;
        $2000 = $3;
        $2001 = ((($2000)) + 20|0);
        $2002 = HEAP32[$2001>>2]|0;
        $2003 = (($2002) + ($1999))|0;
        HEAP32[$2001>>2] = $2003;
        $2004 = $13;
        $2005 = $5;
        $2006 = ((($2005)) + 32|0);
        $2007 = HEAP32[$2006>>2]|0;
        $2008 = (($2007) + ($2004))|0;
        HEAP32[$2006>>2] = $2008;
        $2009 = $5;
        $2010 = ((($2009)) + 12|0);
        $2011 = HEAP32[$2010>>2]|0;
        $2012 = $2011 & 4;
        $2013 = ($2012|0)!=(0);
        $2014 = $13;
        $2015 = ($2014|0)!=(0);
        $or$cond9 = $2013 & $2015;
        if ($or$cond9) {
         $2016 = $5;
         $2017 = ((($2016)) + 20|0);
         $2018 = HEAP32[$2017>>2]|0;
         $2019 = ($2018|0)!=(0);
         $2020 = $5;
         $2021 = ((($2020)) + 28|0);
         $2022 = HEAP32[$2021>>2]|0;
         $2023 = $7;
         $2024 = $13;
         $2025 = (0 - ($2024))|0;
         $2026 = (($2023) + ($2025)|0);
         $2027 = $13;
         if ($2019) {
          $2028 = (_crc32($2022,$2026,$2027)|0);
          $2032 = $2028;
         } else {
          $2029 = (_adler32($2022,$2026,$2027)|0);
          $2032 = $2029;
         }
         $2030 = $5;
         $2031 = ((($2030)) + 28|0);
         HEAP32[$2031>>2] = $2032;
         $2033 = $3;
         $2034 = ((($2033)) + 48|0);
         HEAP32[$2034>>2] = $2032;
        }
        $2035 = $9;
        $13 = $2035;
        $2036 = $5;
        $2037 = ((($2036)) + 12|0);
        $2038 = HEAP32[$2037>>2]|0;
        $2039 = $2038 & 4;
        $2040 = ($2039|0)!=(0);
        if ($2040) {
         $2041 = $5;
         $2042 = ((($2041)) + 20|0);
         $2043 = HEAP32[$2042>>2]|0;
         $2044 = ($2043|0)!=(0);
         $2045 = $10;
         if ($2044) {
          $2063 = $2045;
         } else {
          $2046 = $2045 >>> 24;
          $2047 = $2046 & 255;
          $2048 = $10;
          $2049 = $2048 >>> 8;
          $2050 = $2049 & 65280;
          $2051 = (($2047) + ($2050))|0;
          $2052 = $10;
          $2053 = $2052 & 65280;
          $2054 = $2053 << 8;
          $2055 = (($2051) + ($2054))|0;
          $2056 = $10;
          $2057 = $2056 & 255;
          $2058 = $2057 << 24;
          $2059 = (($2055) + ($2058))|0;
          $2063 = $2059;
         }
         $2060 = $5;
         $2061 = ((($2060)) + 28|0);
         $2062 = HEAP32[$2061>>2]|0;
         $2064 = ($2063|0)!=($2062|0);
         if ($2064) {
          $2065 = $3;
          $2066 = ((($2065)) + 24|0);
          HEAP32[$2066>>2] = 18737;
          $2067 = $5;
          $2068 = ((($2067)) + 4|0);
          HEAP32[$2068>>2] = 16209;
          continue L10;
         }
        }
        $10 = 0;
        $11 = 0;
       }
       $2069 = $5;
       $2070 = ((($2069)) + 4|0);
       HEAP32[$2070>>2] = 16207;
       label = 306;
       break;
      }
      case 16207:  {
       label = 306;
       break;
      }
      default: {
       label = 318;
       break L10;
      }
      }
     } while(0);
     do {
      if ((label|0) == 45) {
       while(1) {
        label = 0;
        $262 = $11;
        $263 = ($262>>>0)<(32);
        if (!($263)) {
         break;
        }
        $264 = $8;
        $265 = ($264|0)==(0);
        if ($265) {
         break L10;
        }
        $266 = $8;
        $267 = (($266) + -1)|0;
        $8 = $267;
        $268 = $6;
        $269 = ((($268)) + 1|0);
        $6 = $269;
        $270 = HEAP8[$268>>0]|0;
        $271 = $270&255;
        $272 = $11;
        $273 = $271 << $272;
        $274 = $10;
        $275 = (($274) + ($273))|0;
        $10 = $275;
        $276 = $11;
        $277 = (($276) + 8)|0;
        $11 = $277;
        label = 45;
       }
       $278 = $5;
       $279 = ((($278)) + 36|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = ($280|0)!=(0|0);
       if ($281) {
        $282 = $10;
        $283 = $5;
        $284 = ((($283)) + 36|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = ((($285)) + 4|0);
        HEAP32[$286>>2] = $282;
       }
       $287 = $5;
       $288 = ((($287)) + 20|0);
       $289 = HEAP32[$288>>2]|0;
       $290 = $289 & 512;
       $291 = ($290|0)!=(0);
       if ($291) {
        $292 = $5;
        $293 = ((($292)) + 12|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = $294 & 4;
        $296 = ($295|0)!=(0);
        if ($296) {
         $297 = $10;
         $298 = $297&255;
         HEAP8[$20>>0] = $298;
         $299 = $10;
         $300 = $299 >>> 8;
         $301 = $300&255;
         $302 = ((($20)) + 1|0);
         HEAP8[$302>>0] = $301;
         $303 = $10;
         $304 = $303 >>> 16;
         $305 = $304&255;
         $306 = ((($20)) + 2|0);
         HEAP8[$306>>0] = $305;
         $307 = $10;
         $308 = $307 >>> 24;
         $309 = $308&255;
         $310 = ((($20)) + 3|0);
         HEAP8[$310>>0] = $309;
         $311 = $5;
         $312 = ((($311)) + 28|0);
         $313 = HEAP32[$312>>2]|0;
         $314 = (_crc32($313,$20,4)|0);
         $315 = $5;
         $316 = ((($315)) + 28|0);
         HEAP32[$316>>2] = $314;
        }
       }
       $10 = 0;
       $11 = 0;
       $317 = $5;
       $318 = ((($317)) + 4|0);
       HEAP32[$318>>2] = 16183;
       label = 54;
      }
      else if ((label|0) == 139) {
       label = 0;
       $805 = $5;
       $806 = ((($805)) + 16|0);
       $807 = HEAP32[$806>>2]|0;
       $808 = ($807|0)==(0);
       if ($808) {
        label = 140;
        break L10;
       }
       $826 = (_adler32(0,0,0)|0);
       $827 = $5;
       $828 = ((($827)) + 28|0);
       HEAP32[$828>>2] = $826;
       $829 = $3;
       $830 = ((($829)) + 48|0);
       HEAP32[$830>>2] = $826;
       $831 = $5;
       $832 = ((($831)) + 4|0);
       HEAP32[$832>>2] = 16191;
       label = 142;
      }
      else if ((label|0) == 164) {
       label = 0;
       $938 = $5;
       $939 = ((($938)) + 4|0);
       HEAP32[$939>>2] = 16195;
       label = 165;
      }
      else if ((label|0) == 180) {
       while(1) {
        label = 0;
        $1036 = $5;
        $1037 = ((($1036)) + 108|0);
        $1038 = HEAP32[$1037>>2]|0;
        $1039 = $5;
        $1040 = ((($1039)) + 96|0);
        $1041 = HEAP32[$1040>>2]|0;
        $1042 = ($1038>>>0)<($1041>>>0);
        if (!($1042)) {
         break;
        }
        while(1) {
         $1043 = $11;
         $1044 = ($1043>>>0)<(3);
         if (!($1044)) {
          break;
         }
         $1045 = $8;
         $1046 = ($1045|0)==(0);
         if ($1046) {
          break L10;
         }
         $1047 = $8;
         $1048 = (($1047) + -1)|0;
         $8 = $1048;
         $1049 = $6;
         $1050 = ((($1049)) + 1|0);
         $6 = $1050;
         $1051 = HEAP8[$1049>>0]|0;
         $1052 = $1051&255;
         $1053 = $11;
         $1054 = $1052 << $1053;
         $1055 = $10;
         $1056 = (($1055) + ($1054))|0;
         $10 = $1056;
         $1057 = $11;
         $1058 = (($1057) + 8)|0;
         $11 = $1058;
        }
        $1059 = $10;
        $1060 = $1059 & 7;
        $1061 = $1060&65535;
        $1062 = $5;
        $1063 = ((($1062)) + 116|0);
        $1064 = $5;
        $1065 = ((($1064)) + 108|0);
        $1066 = HEAP32[$1065>>2]|0;
        $1067 = (($1066) + 1)|0;
        HEAP32[$1065>>2] = $1067;
        $1068 = (9864 + ($1066<<1)|0);
        $1069 = HEAP16[$1068>>1]|0;
        $1070 = $1069&65535;
        $1071 = (($1063) + ($1070<<1)|0);
        HEAP16[$1071>>1] = $1061;
        $1072 = $10;
        $1073 = $1072 >>> 3;
        $10 = $1073;
        $1074 = $11;
        $1075 = (($1074) - 3)|0;
        $11 = $1075;
        label = 180;
       }
       while(1) {
        $1076 = $5;
        $1077 = ((($1076)) + 108|0);
        $1078 = HEAP32[$1077>>2]|0;
        $1079 = ($1078>>>0)<(19);
        $1080 = $5;
        if (!($1079)) {
         break;
        }
        $1081 = ((($1080)) + 116|0);
        $1082 = $5;
        $1083 = ((($1082)) + 108|0);
        $1084 = HEAP32[$1083>>2]|0;
        $1085 = (($1084) + 1)|0;
        HEAP32[$1083>>2] = $1085;
        $1086 = (9864 + ($1084<<1)|0);
        $1087 = HEAP16[$1086>>1]|0;
        $1088 = $1087&65535;
        $1089 = (($1081) + ($1088<<1)|0);
        HEAP16[$1089>>1] = 0;
       }
       $1090 = ((($1080)) + 1332|0);
       $1091 = $5;
       $1092 = ((($1091)) + 112|0);
       HEAP32[$1092>>2] = $1090;
       $1093 = $5;
       $1094 = ((($1093)) + 112|0);
       $1095 = HEAP32[$1094>>2]|0;
       $1096 = $5;
       $1097 = ((($1096)) + 80|0);
       HEAP32[$1097>>2] = $1095;
       $1098 = $5;
       $1099 = ((($1098)) + 88|0);
       HEAP32[$1099>>2] = 7;
       $1100 = $5;
       $1101 = ((($1100)) + 116|0);
       $1102 = $5;
       $1103 = ((($1102)) + 112|0);
       $1104 = $5;
       $1105 = ((($1104)) + 88|0);
       $1106 = $5;
       $1107 = ((($1106)) + 756|0);
       $1108 = (_inflate_table(0,$1101,19,$1103,$1105,$1107)|0);
       $19 = $1108;
       $1109 = $19;
       $1110 = ($1109|0)!=(0);
       if ($1110) {
        $1111 = $3;
        $1112 = ((($1111)) + 24|0);
        HEAP32[$1112>>2] = 18599;
        $1113 = $5;
        $1114 = ((($1113)) + 4|0);
        HEAP32[$1114>>2] = 16209;
        continue L10;
       } else {
        $1115 = $5;
        $1116 = ((($1115)) + 108|0);
        HEAP32[$1116>>2] = 0;
        $1117 = $5;
        $1118 = ((($1117)) + 4|0);
        HEAP32[$1118>>2] = 16198;
        label = 190;
        break;
       }
      }
      else if ((label|0) == 306) {
       label = 0;
       $2071 = $5;
       $2072 = ((($2071)) + 12|0);
       $2073 = HEAP32[$2072>>2]|0;
       $2074 = ($2073|0)!=(0);
       if (!($2074)) {
        label = 314;
        break L10;
       }
       $2075 = $5;
       $2076 = ((($2075)) + 20|0);
       $2077 = HEAP32[$2076>>2]|0;
       $2078 = ($2077|0)!=(0);
       if (!($2078)) {
        label = 314;
        break L10;
       }
       while(1) {
        $2079 = $11;
        $2080 = ($2079>>>0)<(32);
        if (!($2080)) {
         break;
        }
        $2081 = $8;
        $2082 = ($2081|0)==(0);
        if ($2082) {
         break L10;
        }
        $2083 = $8;
        $2084 = (($2083) + -1)|0;
        $8 = $2084;
        $2085 = $6;
        $2086 = ((($2085)) + 1|0);
        $6 = $2086;
        $2087 = HEAP8[$2085>>0]|0;
        $2088 = $2087&255;
        $2089 = $11;
        $2090 = $2088 << $2089;
        $2091 = $10;
        $2092 = (($2091) + ($2090))|0;
        $10 = $2092;
        $2093 = $11;
        $2094 = (($2093) + 8)|0;
        $11 = $2094;
       }
       $2095 = $10;
       $2096 = $5;
       $2097 = ((($2096)) + 32|0);
       $2098 = HEAP32[$2097>>2]|0;
       $2099 = ($2095|0)!=($2098|0);
       if (!($2099)) {
        label = 313;
        break L10;
       }
       $2100 = $3;
       $2101 = ((($2100)) + 24|0);
       HEAP32[$2101>>2] = 18758;
       $2102 = $5;
       $2103 = ((($2102)) + 4|0);
       HEAP32[$2103>>2] = 16209;
       continue L10;
      }
     } while(0);
     do {
      if ((label|0) == 54) {
       while(1) {
        label = 0;
        $319 = $11;
        $320 = ($319>>>0)<(16);
        if (!($320)) {
         break;
        }
        $321 = $8;
        $322 = ($321|0)==(0);
        if ($322) {
         break L10;
        }
        $323 = $8;
        $324 = (($323) + -1)|0;
        $8 = $324;
        $325 = $6;
        $326 = ((($325)) + 1|0);
        $6 = $326;
        $327 = HEAP8[$325>>0]|0;
        $328 = $327&255;
        $329 = $11;
        $330 = $328 << $329;
        $331 = $10;
        $332 = (($331) + ($330))|0;
        $10 = $332;
        $333 = $11;
        $334 = (($333) + 8)|0;
        $11 = $334;
        label = 54;
       }
       $335 = $5;
       $336 = ((($335)) + 36|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)!=(0|0);
       if ($338) {
        $339 = $10;
        $340 = $339 & 255;
        $341 = $5;
        $342 = ((($341)) + 36|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = ((($343)) + 8|0);
        HEAP32[$344>>2] = $340;
        $345 = $10;
        $346 = $345 >>> 8;
        $347 = $5;
        $348 = ((($347)) + 36|0);
        $349 = HEAP32[$348>>2]|0;
        $350 = ((($349)) + 12|0);
        HEAP32[$350>>2] = $346;
       }
       $351 = $5;
       $352 = ((($351)) + 20|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = $353 & 512;
       $355 = ($354|0)!=(0);
       if ($355) {
        $356 = $5;
        $357 = ((($356)) + 12|0);
        $358 = HEAP32[$357>>2]|0;
        $359 = $358 & 4;
        $360 = ($359|0)!=(0);
        if ($360) {
         $361 = $10;
         $362 = $361&255;
         HEAP8[$20>>0] = $362;
         $363 = $10;
         $364 = $363 >>> 8;
         $365 = $364&255;
         $366 = ((($20)) + 1|0);
         HEAP8[$366>>0] = $365;
         $367 = $5;
         $368 = ((($367)) + 28|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = (_crc32($369,$20,2)|0);
         $371 = $5;
         $372 = ((($371)) + 28|0);
         HEAP32[$372>>2] = $370;
        }
       }
       $10 = 0;
       $11 = 0;
       $373 = $5;
       $374 = ((($373)) + 4|0);
       HEAP32[$374>>2] = 16184;
       label = 63;
      }
      else if ((label|0) == 142) {
       label = 0;
       $833 = $4;
       $834 = ($833|0)==(5);
       $835 = $4;
       $836 = ($835|0)==(6);
       $or$cond4 = $834 | $836;
       if ($or$cond4) {
        break L10;
       } else {
        label = 143;
       }
      }
      else if ((label|0) == 165) {
       label = 0;
       $940 = $5;
       $941 = ((($940)) + 68|0);
       $942 = HEAP32[$941>>2]|0;
       $14 = $942;
       $943 = $14;
       $944 = ($943|0)!=(0);
       if (!($944)) {
        $975 = $5;
        $976 = ((($975)) + 4|0);
        HEAP32[$976>>2] = 16191;
        continue L10;
       }
       $945 = $14;
       $946 = $8;
       $947 = ($945>>>0)>($946>>>0);
       if ($947) {
        $948 = $8;
        $14 = $948;
       }
       $949 = $14;
       $950 = $9;
       $951 = ($949>>>0)>($950>>>0);
       if ($951) {
        $952 = $9;
        $14 = $952;
       }
       $953 = $14;
       $954 = ($953|0)==(0);
       if ($954) {
        break L10;
       }
       $955 = $7;
       $956 = $6;
       $957 = $14;
       _memcpy(($955|0),($956|0),($957|0))|0;
       $958 = $14;
       $959 = $8;
       $960 = (($959) - ($958))|0;
       $8 = $960;
       $961 = $14;
       $962 = $6;
       $963 = (($962) + ($961)|0);
       $6 = $963;
       $964 = $14;
       $965 = $9;
       $966 = (($965) - ($964))|0;
       $9 = $966;
       $967 = $14;
       $968 = $7;
       $969 = (($968) + ($967)|0);
       $7 = $969;
       $970 = $14;
       $971 = $5;
       $972 = ((($971)) + 68|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = (($973) - ($970))|0;
       HEAP32[$972>>2] = $974;
       continue L10;
      }
      else if ((label|0) == 190) {
       L172: while(1) {
        label = 0;
        $1119 = $5;
        $1120 = ((($1119)) + 108|0);
        $1121 = HEAP32[$1120>>2]|0;
        $1122 = $5;
        $1123 = ((($1122)) + 100|0);
        $1124 = HEAP32[$1123>>2]|0;
        $1125 = $5;
        $1126 = ((($1125)) + 104|0);
        $1127 = HEAP32[$1126>>2]|0;
        $1128 = (($1124) + ($1127))|0;
        $1129 = ($1121>>>0)<($1128>>>0);
        if (!($1129)) {
         break;
        }
        while(1) {
         $1130 = $5;
         $1131 = ((($1130)) + 80|0);
         $1132 = HEAP32[$1131>>2]|0;
         $1133 = $10;
         $1134 = $5;
         $1135 = ((($1134)) + 88|0);
         $1136 = HEAP32[$1135>>2]|0;
         $1137 = 1 << $1136;
         $1138 = (($1137) - 1)|0;
         $1139 = $1133 & $1138;
         $1140 = (($1132) + ($1139<<2)|0);
         ;HEAP16[$16>>1]=HEAP16[$1140>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1140+2>>1]|0;
         $1141 = ((($16)) + 1|0);
         $1142 = HEAP8[$1141>>0]|0;
         $1143 = $1142&255;
         $1144 = $11;
         $1145 = ($1143>>>0)<=($1144>>>0);
         if ($1145) {
          break;
         }
         $1146 = $8;
         $1147 = ($1146|0)==(0);
         if ($1147) {
          break L10;
         }
         $1148 = $8;
         $1149 = (($1148) + -1)|0;
         $8 = $1149;
         $1150 = $6;
         $1151 = ((($1150)) + 1|0);
         $6 = $1151;
         $1152 = HEAP8[$1150>>0]|0;
         $1153 = $1152&255;
         $1154 = $11;
         $1155 = $1153 << $1154;
         $1156 = $10;
         $1157 = (($1156) + ($1155))|0;
         $10 = $1157;
         $1158 = $11;
         $1159 = (($1158) + 8)|0;
         $11 = $1159;
        }
        $1160 = ((($16)) + 2|0);
        $1161 = HEAP16[$1160>>1]|0;
        $1162 = $1161&65535;
        $1163 = ($1162|0)<(16);
        if ($1163) {
         $1164 = ((($16)) + 1|0);
         $1165 = HEAP8[$1164>>0]|0;
         $1166 = $1165&255;
         $1167 = $10;
         $1168 = $1167 >>> $1166;
         $10 = $1168;
         $1169 = ((($16)) + 1|0);
         $1170 = HEAP8[$1169>>0]|0;
         $1171 = $1170&255;
         $1172 = $11;
         $1173 = (($1172) - ($1171))|0;
         $11 = $1173;
         $1174 = ((($16)) + 2|0);
         $1175 = HEAP16[$1174>>1]|0;
         $1176 = $5;
         $1177 = ((($1176)) + 116|0);
         $1178 = $5;
         $1179 = ((($1178)) + 108|0);
         $1180 = HEAP32[$1179>>2]|0;
         $1181 = (($1180) + 1)|0;
         HEAP32[$1179>>2] = $1181;
         $1182 = (($1177) + ($1180<<1)|0);
         HEAP16[$1182>>1] = $1175;
         label = 190;
         continue;
        }
        $1183 = ((($16)) + 2|0);
        $1184 = HEAP16[$1183>>1]|0;
        $1185 = $1184&65535;
        $1186 = ($1185|0)==(16);
        do {
         if ($1186) {
          while(1) {
           $1187 = $11;
           $1188 = ((($16)) + 1|0);
           $1189 = HEAP8[$1188>>0]|0;
           $1190 = $1189&255;
           $1191 = (($1190) + 2)|0;
           $1192 = ($1187>>>0)<($1191>>>0);
           if (!($1192)) {
            break;
           }
           $1193 = $8;
           $1194 = ($1193|0)==(0);
           if ($1194) {
            break L10;
           }
           $1195 = $8;
           $1196 = (($1195) + -1)|0;
           $8 = $1196;
           $1197 = $6;
           $1198 = ((($1197)) + 1|0);
           $6 = $1198;
           $1199 = HEAP8[$1197>>0]|0;
           $1200 = $1199&255;
           $1201 = $11;
           $1202 = $1200 << $1201;
           $1203 = $10;
           $1204 = (($1203) + ($1202))|0;
           $10 = $1204;
           $1205 = $11;
           $1206 = (($1205) + 8)|0;
           $11 = $1206;
          }
          $1207 = ((($16)) + 1|0);
          $1208 = HEAP8[$1207>>0]|0;
          $1209 = $1208&255;
          $1210 = $10;
          $1211 = $1210 >>> $1209;
          $10 = $1211;
          $1212 = ((($16)) + 1|0);
          $1213 = HEAP8[$1212>>0]|0;
          $1214 = $1213&255;
          $1215 = $11;
          $1216 = (($1215) - ($1214))|0;
          $11 = $1216;
          $1217 = $5;
          $1218 = ((($1217)) + 108|0);
          $1219 = HEAP32[$1218>>2]|0;
          $1220 = ($1219|0)==(0);
          if ($1220) {
           label = 201;
           break L172;
          }
          $1224 = $5;
          $1225 = ((($1224)) + 116|0);
          $1226 = $5;
          $1227 = ((($1226)) + 108|0);
          $1228 = HEAP32[$1227>>2]|0;
          $1229 = (($1228) - 1)|0;
          $1230 = (($1225) + ($1229<<1)|0);
          $1231 = HEAP16[$1230>>1]|0;
          $1232 = $1231&65535;
          $18 = $1232;
          $1233 = $10;
          $1234 = $1233 & 3;
          $1235 = (3 + ($1234))|0;
          $14 = $1235;
          $1236 = $10;
          $1237 = $1236 >>> 2;
          $10 = $1237;
          $1238 = $11;
          $1239 = (($1238) - 2)|0;
          $11 = $1239;
         } else {
          $1240 = ((($16)) + 2|0);
          $1241 = HEAP16[$1240>>1]|0;
          $1242 = $1241&65535;
          $1243 = ($1242|0)==(17);
          if ($1243) {
           while(1) {
            $1244 = $11;
            $1245 = ((($16)) + 1|0);
            $1246 = HEAP8[$1245>>0]|0;
            $1247 = $1246&255;
            $1248 = (($1247) + 3)|0;
            $1249 = ($1244>>>0)<($1248>>>0);
            if (!($1249)) {
             break;
            }
            $1250 = $8;
            $1251 = ($1250|0)==(0);
            if ($1251) {
             break L10;
            }
            $1252 = $8;
            $1253 = (($1252) + -1)|0;
            $8 = $1253;
            $1254 = $6;
            $1255 = ((($1254)) + 1|0);
            $6 = $1255;
            $1256 = HEAP8[$1254>>0]|0;
            $1257 = $1256&255;
            $1258 = $11;
            $1259 = $1257 << $1258;
            $1260 = $10;
            $1261 = (($1260) + ($1259))|0;
            $10 = $1261;
            $1262 = $11;
            $1263 = (($1262) + 8)|0;
            $11 = $1263;
           }
           $1264 = ((($16)) + 1|0);
           $1265 = HEAP8[$1264>>0]|0;
           $1266 = $1265&255;
           $1267 = $10;
           $1268 = $1267 >>> $1266;
           $10 = $1268;
           $1269 = ((($16)) + 1|0);
           $1270 = HEAP8[$1269>>0]|0;
           $1271 = $1270&255;
           $1272 = $11;
           $1273 = (($1272) - ($1271))|0;
           $11 = $1273;
           $18 = 0;
           $1274 = $10;
           $1275 = $1274 & 7;
           $1276 = (3 + ($1275))|0;
           $14 = $1276;
           $1277 = $10;
           $1278 = $1277 >>> 3;
           $10 = $1278;
           $1279 = $11;
           $1280 = (($1279) - 3)|0;
           $11 = $1280;
           break;
          } else {
           while(1) {
            $1281 = $11;
            $1282 = ((($16)) + 1|0);
            $1283 = HEAP8[$1282>>0]|0;
            $1284 = $1283&255;
            $1285 = (($1284) + 7)|0;
            $1286 = ($1281>>>0)<($1285>>>0);
            if (!($1286)) {
             break;
            }
            $1287 = $8;
            $1288 = ($1287|0)==(0);
            if ($1288) {
             break L10;
            }
            $1289 = $8;
            $1290 = (($1289) + -1)|0;
            $8 = $1290;
            $1291 = $6;
            $1292 = ((($1291)) + 1|0);
            $6 = $1292;
            $1293 = HEAP8[$1291>>0]|0;
            $1294 = $1293&255;
            $1295 = $11;
            $1296 = $1294 << $1295;
            $1297 = $10;
            $1298 = (($1297) + ($1296))|0;
            $10 = $1298;
            $1299 = $11;
            $1300 = (($1299) + 8)|0;
            $11 = $1300;
           }
           $1301 = ((($16)) + 1|0);
           $1302 = HEAP8[$1301>>0]|0;
           $1303 = $1302&255;
           $1304 = $10;
           $1305 = $1304 >>> $1303;
           $10 = $1305;
           $1306 = ((($16)) + 1|0);
           $1307 = HEAP8[$1306>>0]|0;
           $1308 = $1307&255;
           $1309 = $11;
           $1310 = (($1309) - ($1308))|0;
           $11 = $1310;
           $18 = 0;
           $1311 = $10;
           $1312 = $1311 & 127;
           $1313 = (11 + ($1312))|0;
           $14 = $1313;
           $1314 = $10;
           $1315 = $1314 >>> 7;
           $10 = $1315;
           $1316 = $11;
           $1317 = (($1316) - 7)|0;
           $11 = $1317;
           break;
          }
         }
        } while(0);
        $1318 = $5;
        $1319 = ((($1318)) + 108|0);
        $1320 = HEAP32[$1319>>2]|0;
        $1321 = $14;
        $1322 = (($1320) + ($1321))|0;
        $1323 = $5;
        $1324 = ((($1323)) + 100|0);
        $1325 = HEAP32[$1324>>2]|0;
        $1326 = $5;
        $1327 = ((($1326)) + 104|0);
        $1328 = HEAP32[$1327>>2]|0;
        $1329 = (($1325) + ($1328))|0;
        $1330 = ($1322>>>0)>($1329>>>0);
        if ($1330) {
         label = 213;
         break;
        }
        while(1) {
         $1334 = $14;
         $1335 = (($1334) + -1)|0;
         $14 = $1335;
         $1336 = ($1334|0)!=(0);
         if (!($1336)) {
          label = 190;
          continue L172;
         }
         $1337 = $18;
         $1338 = $1337&65535;
         $1339 = $5;
         $1340 = ((($1339)) + 116|0);
         $1341 = $5;
         $1342 = ((($1341)) + 108|0);
         $1343 = HEAP32[$1342>>2]|0;
         $1344 = (($1343) + 1)|0;
         HEAP32[$1342>>2] = $1344;
         $1345 = (($1340) + ($1343<<1)|0);
         HEAP16[$1345>>1] = $1338;
        }
       }
       if ((label|0) == 201) {
        label = 0;
        $1221 = $3;
        $1222 = ((($1221)) + 24|0);
        HEAP32[$1222>>2] = 18624;
        $1223 = $5;
        $$sink5 = $1223;
        label = 216;
       }
       else if ((label|0) == 213) {
        label = 0;
        $1331 = $3;
        $1332 = ((($1331)) + 24|0);
        HEAP32[$1332>>2] = 18624;
        $1333 = $5;
        $$sink5 = $1333;
        label = 216;
       }
       if ((label|0) == 216) {
        label = 0;
        $1346 = ((($$sink5)) + 4|0);
        HEAP32[$1346>>2] = 16209;
       }
       $1347 = $5;
       $1348 = ((($1347)) + 4|0);
       $1349 = HEAP32[$1348>>2]|0;
       $1350 = ($1349|0)==(16209);
       if ($1350) {
        continue L10;
       }
       $1351 = $5;
       $1352 = ((($1351)) + 116|0);
       $1353 = ((($1352)) + 512|0);
       $1354 = HEAP16[$1353>>1]|0;
       $1355 = $1354&65535;
       $1356 = ($1355|0)==(0);
       if ($1356) {
        $1357 = $3;
        $1358 = ((($1357)) + 24|0);
        HEAP32[$1358>>2] = 18650;
        $1359 = $5;
        $1360 = ((($1359)) + 4|0);
        HEAP32[$1360>>2] = 16209;
        continue L10;
       }
       $1361 = $5;
       $1362 = ((($1361)) + 1332|0);
       $1363 = $5;
       $1364 = ((($1363)) + 112|0);
       HEAP32[$1364>>2] = $1362;
       $1365 = $5;
       $1366 = ((($1365)) + 112|0);
       $1367 = HEAP32[$1366>>2]|0;
       $1368 = $5;
       $1369 = ((($1368)) + 80|0);
       HEAP32[$1369>>2] = $1367;
       $1370 = $5;
       $1371 = ((($1370)) + 88|0);
       HEAP32[$1371>>2] = 9;
       $1372 = $5;
       $1373 = ((($1372)) + 116|0);
       $1374 = $5;
       $1375 = ((($1374)) + 100|0);
       $1376 = HEAP32[$1375>>2]|0;
       $1377 = $5;
       $1378 = ((($1377)) + 112|0);
       $1379 = $5;
       $1380 = ((($1379)) + 88|0);
       $1381 = $5;
       $1382 = ((($1381)) + 756|0);
       $1383 = (_inflate_table(1,$1373,$1376,$1378,$1380,$1382)|0);
       $19 = $1383;
       $1384 = $19;
       $1385 = ($1384|0)!=(0);
       if ($1385) {
        $1386 = $3;
        $1387 = ((($1386)) + 24|0);
        HEAP32[$1387>>2] = 18687;
        $1388 = $5;
        $1389 = ((($1388)) + 4|0);
        HEAP32[$1389>>2] = 16209;
        continue L10;
       }
       $1390 = $5;
       $1391 = ((($1390)) + 112|0);
       $1392 = HEAP32[$1391>>2]|0;
       $1393 = $5;
       $1394 = ((($1393)) + 84|0);
       HEAP32[$1394>>2] = $1392;
       $1395 = $5;
       $1396 = ((($1395)) + 92|0);
       HEAP32[$1396>>2] = 6;
       $1397 = $5;
       $1398 = ((($1397)) + 116|0);
       $1399 = $5;
       $1400 = ((($1399)) + 100|0);
       $1401 = HEAP32[$1400>>2]|0;
       $1402 = (($1398) + ($1401<<1)|0);
       $1403 = $5;
       $1404 = ((($1403)) + 104|0);
       $1405 = HEAP32[$1404>>2]|0;
       $1406 = $5;
       $1407 = ((($1406)) + 112|0);
       $1408 = $5;
       $1409 = ((($1408)) + 92|0);
       $1410 = $5;
       $1411 = ((($1410)) + 756|0);
       $1412 = (_inflate_table(2,$1402,$1405,$1407,$1409,$1411)|0);
       $19 = $1412;
       $1413 = $19;
       $1414 = ($1413|0)!=(0);
       if ($1414) {
        $1415 = $3;
        $1416 = ((($1415)) + 24|0);
        HEAP32[$1416>>2] = 18715;
        $1417 = $5;
        $1418 = ((($1417)) + 4|0);
        HEAP32[$1418>>2] = 16209;
        continue L10;
       } else {
        $1419 = $5;
        $1420 = ((($1419)) + 4|0);
        HEAP32[$1420>>2] = 16199;
        $1421 = $4;
        $1422 = ($1421|0)==(6);
        if ($1422) {
         break L10;
        } else {
         label = 225;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 63) {
      label = 0;
      $375 = $5;
      $376 = ((($375)) + 20|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = $377 & 1024;
      $379 = ($378|0)!=(0);
      if ($379) {
       while(1) {
        $380 = $11;
        $381 = ($380>>>0)<(16);
        if (!($381)) {
         break;
        }
        $382 = $8;
        $383 = ($382|0)==(0);
        if ($383) {
         break L10;
        }
        $384 = $8;
        $385 = (($384) + -1)|0;
        $8 = $385;
        $386 = $6;
        $387 = ((($386)) + 1|0);
        $6 = $387;
        $388 = HEAP8[$386>>0]|0;
        $389 = $388&255;
        $390 = $11;
        $391 = $389 << $390;
        $392 = $10;
        $393 = (($392) + ($391))|0;
        $10 = $393;
        $394 = $11;
        $395 = (($394) + 8)|0;
        $11 = $395;
       }
       $396 = $10;
       $397 = $5;
       $398 = ((($397)) + 68|0);
       HEAP32[$398>>2] = $396;
       $399 = $5;
       $400 = ((($399)) + 36|0);
       $401 = HEAP32[$400>>2]|0;
       $402 = ($401|0)!=(0|0);
       if ($402) {
        $403 = $10;
        $404 = $5;
        $405 = ((($404)) + 36|0);
        $406 = HEAP32[$405>>2]|0;
        $407 = ((($406)) + 20|0);
        HEAP32[$407>>2] = $403;
       }
       $408 = $5;
       $409 = ((($408)) + 20|0);
       $410 = HEAP32[$409>>2]|0;
       $411 = $410 & 512;
       $412 = ($411|0)!=(0);
       if ($412) {
        $413 = $5;
        $414 = ((($413)) + 12|0);
        $415 = HEAP32[$414>>2]|0;
        $416 = $415 & 4;
        $417 = ($416|0)!=(0);
        if ($417) {
         $418 = $10;
         $419 = $418&255;
         HEAP8[$20>>0] = $419;
         $420 = $10;
         $421 = $420 >>> 8;
         $422 = $421&255;
         $423 = ((($20)) + 1|0);
         HEAP8[$423>>0] = $422;
         $424 = $5;
         $425 = ((($424)) + 28|0);
         $426 = HEAP32[$425>>2]|0;
         $427 = (_crc32($426,$20,2)|0);
         $428 = $5;
         $429 = ((($428)) + 28|0);
         HEAP32[$429>>2] = $427;
        }
       }
       $10 = 0;
       $11 = 0;
      } else {
       $430 = $5;
       $431 = ((($430)) + 36|0);
       $432 = HEAP32[$431>>2]|0;
       $433 = ($432|0)!=(0|0);
       if ($433) {
        $434 = $5;
        $435 = ((($434)) + 36|0);
        $436 = HEAP32[$435>>2]|0;
        $437 = ((($436)) + 16|0);
        HEAP32[$437>>2] = 0;
       }
      }
      $438 = $5;
      $439 = ((($438)) + 4|0);
      HEAP32[$439>>2] = 16185;
      label = 76;
     }
     else if ((label|0) == 143) {
      label = 0;
      $837 = $5;
      $838 = ((($837)) + 8|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = ($839|0)!=(0);
      if ($840) {
       $841 = $11;
       $842 = $841 & 7;
       $843 = $10;
       $844 = $843 >>> $842;
       $10 = $844;
       $845 = $11;
       $846 = $845 & 7;
       $847 = $11;
       $848 = (($847) - ($846))|0;
       $11 = $848;
       $849 = $5;
       $850 = ((($849)) + 4|0);
       HEAP32[$850>>2] = 16206;
       continue;
      }
      while(1) {
       $851 = $11;
       $852 = ($851>>>0)<(3);
       if (!($852)) {
        break;
       }
       $853 = $8;
       $854 = ($853|0)==(0);
       if ($854) {
        break L10;
       }
       $855 = $8;
       $856 = (($855) + -1)|0;
       $8 = $856;
       $857 = $6;
       $858 = ((($857)) + 1|0);
       $6 = $858;
       $859 = HEAP8[$857>>0]|0;
       $860 = $859&255;
       $861 = $11;
       $862 = $860 << $861;
       $863 = $10;
       $864 = (($863) + ($862))|0;
       $10 = $864;
       $865 = $11;
       $866 = (($865) + 8)|0;
       $11 = $866;
      }
      $867 = $10;
      $868 = $867 & 1;
      $869 = $5;
      $870 = ((($869)) + 8|0);
      HEAP32[$870>>2] = $868;
      $871 = $10;
      $872 = $871 >>> 1;
      $10 = $872;
      $873 = $11;
      $874 = (($873) - 1)|0;
      $11 = $874;
      $875 = $10;
      $876 = $875 & 3;
      switch ($876|0) {
      case 0:  {
       $877 = $5;
       $$sink = 16193;$$sink22 = $877;
       label = 155;
       break;
      }
      case 1:  {
       $878 = $5;
       _fixedtables($878);
       $879 = $5;
       $880 = ((($879)) + 4|0);
       HEAP32[$880>>2] = 16199;
       $881 = $4;
       $882 = ($881|0)==(6);
       if ($882) {
        label = 151;
        break L10;
       }
       break;
      }
      case 2:  {
       $887 = $5;
       $$sink = 16196;$$sink22 = $887;
       label = 155;
       break;
      }
      case 3:  {
       $888 = $3;
       $889 = ((($888)) + 24|0);
       HEAP32[$889>>2] = 18515;
       $890 = $5;
       $$sink = 16209;$$sink22 = $890;
       label = 155;
       break;
      }
      default: {
       label = 154;
       break L10;
      }
      }
      if ((label|0) == 155) {
       label = 0;
       $891 = ((($$sink22)) + 4|0);
       HEAP32[$891>>2] = $$sink;
      }
      $892 = $10;
      $893 = $892 >>> 2;
      $10 = $893;
      $894 = $11;
      $895 = (($894) - 2)|0;
      $11 = $895;
      continue;
     }
     else if ((label|0) == 225) {
      label = 0;
      $1423 = $5;
      $1424 = ((($1423)) + 4|0);
      HEAP32[$1424>>2] = 16200;
      label = 226;
     }
     do {
      if ((label|0) == 76) {
       label = 0;
       $440 = $5;
       $441 = ((($440)) + 20|0);
       $442 = HEAP32[$441>>2]|0;
       $443 = $442 & 1024;
       $444 = ($443|0)!=(0);
       if ($444) {
        $445 = $5;
        $446 = ((($445)) + 68|0);
        $447 = HEAP32[$446>>2]|0;
        $14 = $447;
        $448 = $14;
        $449 = $8;
        $450 = ($448>>>0)>($449>>>0);
        if ($450) {
         $451 = $8;
         $14 = $451;
        }
        $452 = $14;
        $453 = ($452|0)!=(0);
        if ($453) {
         $454 = $5;
         $455 = ((($454)) + 36|0);
         $456 = HEAP32[$455>>2]|0;
         $457 = ($456|0)!=(0|0);
         if ($457) {
          $458 = $5;
          $459 = ((($458)) + 36|0);
          $460 = HEAP32[$459>>2]|0;
          $461 = ((($460)) + 16|0);
          $462 = HEAP32[$461>>2]|0;
          $463 = ($462|0)!=(0|0);
          if ($463) {
           $464 = $5;
           $465 = ((($464)) + 36|0);
           $466 = HEAP32[$465>>2]|0;
           $467 = ((($466)) + 20|0);
           $468 = HEAP32[$467>>2]|0;
           $469 = $5;
           $470 = ((($469)) + 68|0);
           $471 = HEAP32[$470>>2]|0;
           $472 = (($468) - ($471))|0;
           $18 = $472;
           $473 = $5;
           $474 = ((($473)) + 36|0);
           $475 = HEAP32[$474>>2]|0;
           $476 = ((($475)) + 16|0);
           $477 = HEAP32[$476>>2]|0;
           $478 = $18;
           $479 = (($477) + ($478)|0);
           $480 = $6;
           $481 = $18;
           $482 = $14;
           $483 = (($481) + ($482))|0;
           $484 = $5;
           $485 = ((($484)) + 36|0);
           $486 = HEAP32[$485>>2]|0;
           $487 = ((($486)) + 24|0);
           $488 = HEAP32[$487>>2]|0;
           $489 = ($483>>>0)>($488>>>0);
           if ($489) {
            $490 = $5;
            $491 = ((($490)) + 36|0);
            $492 = HEAP32[$491>>2]|0;
            $493 = ((($492)) + 24|0);
            $494 = HEAP32[$493>>2]|0;
            $495 = $18;
            $496 = (($494) - ($495))|0;
            $498 = $496;
           } else {
            $497 = $14;
            $498 = $497;
           }
           _memcpy(($479|0),($480|0),($498|0))|0;
          }
         }
         $499 = $5;
         $500 = ((($499)) + 20|0);
         $501 = HEAP32[$500>>2]|0;
         $502 = $501 & 512;
         $503 = ($502|0)!=(0);
         if ($503) {
          $504 = $5;
          $505 = ((($504)) + 12|0);
          $506 = HEAP32[$505>>2]|0;
          $507 = $506 & 4;
          $508 = ($507|0)!=(0);
          if ($508) {
           $509 = $5;
           $510 = ((($509)) + 28|0);
           $511 = HEAP32[$510>>2]|0;
           $512 = $6;
           $513 = $14;
           $514 = (_crc32($511,$512,$513)|0);
           $515 = $5;
           $516 = ((($515)) + 28|0);
           HEAP32[$516>>2] = $514;
          }
         }
         $517 = $14;
         $518 = $8;
         $519 = (($518) - ($517))|0;
         $8 = $519;
         $520 = $14;
         $521 = $6;
         $522 = (($521) + ($520)|0);
         $6 = $522;
         $523 = $14;
         $524 = $5;
         $525 = ((($524)) + 68|0);
         $526 = HEAP32[$525>>2]|0;
         $527 = (($526) - ($523))|0;
         HEAP32[$525>>2] = $527;
        }
        $528 = $5;
        $529 = ((($528)) + 68|0);
        $530 = HEAP32[$529>>2]|0;
        $531 = ($530|0)!=(0);
        if ($531) {
         break L10;
        }
       }
       $532 = $5;
       $533 = ((($532)) + 68|0);
       HEAP32[$533>>2] = 0;
       $534 = $5;
       $535 = ((($534)) + 4|0);
       HEAP32[$535>>2] = 16186;
       label = 92;
      }
      else if ((label|0) == 226) {
       label = 0;
       $1425 = $8;
       $1426 = ($1425>>>0)>=(6);
       $1427 = $9;
       $1428 = ($1427>>>0)>=(258);
       $or$cond7 = $1426 & $1428;
       if ($or$cond7) {
        $1429 = $7;
        $1430 = $3;
        $1431 = ((($1430)) + 12|0);
        HEAP32[$1431>>2] = $1429;
        $1432 = $9;
        $1433 = $3;
        $1434 = ((($1433)) + 16|0);
        HEAP32[$1434>>2] = $1432;
        $1435 = $6;
        $1436 = $3;
        HEAP32[$1436>>2] = $1435;
        $1437 = $8;
        $1438 = $3;
        $1439 = ((($1438)) + 4|0);
        HEAP32[$1439>>2] = $1437;
        $1440 = $10;
        $1441 = $5;
        $1442 = ((($1441)) + 60|0);
        HEAP32[$1442>>2] = $1440;
        $1443 = $11;
        $1444 = $5;
        $1445 = ((($1444)) + 64|0);
        HEAP32[$1445>>2] = $1443;
        $1446 = $3;
        $1447 = $13;
        _inflate_fast($1446,$1447);
        $1448 = $3;
        $1449 = ((($1448)) + 12|0);
        $1450 = HEAP32[$1449>>2]|0;
        $7 = $1450;
        $1451 = $3;
        $1452 = ((($1451)) + 16|0);
        $1453 = HEAP32[$1452>>2]|0;
        $9 = $1453;
        $1454 = $3;
        $1455 = HEAP32[$1454>>2]|0;
        $6 = $1455;
        $1456 = $3;
        $1457 = ((($1456)) + 4|0);
        $1458 = HEAP32[$1457>>2]|0;
        $8 = $1458;
        $1459 = $5;
        $1460 = ((($1459)) + 60|0);
        $1461 = HEAP32[$1460>>2]|0;
        $10 = $1461;
        $1462 = $5;
        $1463 = ((($1462)) + 64|0);
        $1464 = HEAP32[$1463>>2]|0;
        $11 = $1464;
        $1465 = $5;
        $1466 = ((($1465)) + 4|0);
        $1467 = HEAP32[$1466>>2]|0;
        $1468 = ($1467|0)==(16191);
        if (!($1468)) {
         continue L10;
        }
        $1469 = $5;
        $1470 = ((($1469)) + 7112|0);
        HEAP32[$1470>>2] = -1;
        continue L10;
       }
       $1471 = $5;
       $1472 = ((($1471)) + 7112|0);
       HEAP32[$1472>>2] = 0;
       while(1) {
        $1473 = $5;
        $1474 = ((($1473)) + 80|0);
        $1475 = HEAP32[$1474>>2]|0;
        $1476 = $10;
        $1477 = $5;
        $1478 = ((($1477)) + 88|0);
        $1479 = HEAP32[$1478>>2]|0;
        $1480 = 1 << $1479;
        $1481 = (($1480) - 1)|0;
        $1482 = $1476 & $1481;
        $1483 = (($1475) + ($1482<<2)|0);
        ;HEAP16[$16>>1]=HEAP16[$1483>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1483+2>>1]|0;
        $1484 = ((($16)) + 1|0);
        $1485 = HEAP8[$1484>>0]|0;
        $1486 = $1485&255;
        $1487 = $11;
        $1488 = ($1486>>>0)<=($1487>>>0);
        if ($1488) {
         break;
        }
        $1489 = $8;
        $1490 = ($1489|0)==(0);
        if ($1490) {
         break L10;
        }
        $1491 = $8;
        $1492 = (($1491) + -1)|0;
        $8 = $1492;
        $1493 = $6;
        $1494 = ((($1493)) + 1|0);
        $6 = $1494;
        $1495 = HEAP8[$1493>>0]|0;
        $1496 = $1495&255;
        $1497 = $11;
        $1498 = $1496 << $1497;
        $1499 = $10;
        $1500 = (($1499) + ($1498))|0;
        $10 = $1500;
        $1501 = $11;
        $1502 = (($1501) + 8)|0;
        $11 = $1502;
       }
       $1503 = HEAP8[$16>>0]|0;
       $1504 = $1503&255;
       $1505 = ($1504|0)!=(0);
       if ($1505) {
        $1506 = HEAP8[$16>>0]|0;
        $1507 = $1506&255;
        $1508 = $1507 & 240;
        $1509 = ($1508|0)==(0);
        if ($1509) {
         ;HEAP16[$17>>1]=HEAP16[$16>>1]|0;HEAP16[$17+2>>1]=HEAP16[$16+2>>1]|0;
         while(1) {
          $1510 = $5;
          $1511 = ((($1510)) + 80|0);
          $1512 = HEAP32[$1511>>2]|0;
          $1513 = ((($17)) + 2|0);
          $1514 = HEAP16[$1513>>1]|0;
          $1515 = $1514&65535;
          $1516 = $10;
          $1517 = ((($17)) + 1|0);
          $1518 = HEAP8[$1517>>0]|0;
          $1519 = $1518&255;
          $1520 = HEAP8[$17>>0]|0;
          $1521 = $1520&255;
          $1522 = (($1519) + ($1521))|0;
          $1523 = 1 << $1522;
          $1524 = (($1523) - 1)|0;
          $1525 = $1516 & $1524;
          $1526 = ((($17)) + 1|0);
          $1527 = HEAP8[$1526>>0]|0;
          $1528 = $1527&255;
          $1529 = $1525 >>> $1528;
          $1530 = (($1515) + ($1529))|0;
          $1531 = (($1512) + ($1530<<2)|0);
          ;HEAP16[$16>>1]=HEAP16[$1531>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1531+2>>1]|0;
          $1532 = ((($17)) + 1|0);
          $1533 = HEAP8[$1532>>0]|0;
          $1534 = $1533&255;
          $1535 = ((($16)) + 1|0);
          $1536 = HEAP8[$1535>>0]|0;
          $1537 = $1536&255;
          $1538 = (($1534) + ($1537))|0;
          $1539 = $11;
          $1540 = ($1538>>>0)<=($1539>>>0);
          if ($1540) {
           break;
          }
          $1541 = $8;
          $1542 = ($1541|0)==(0);
          if ($1542) {
           break L10;
          }
          $1543 = $8;
          $1544 = (($1543) + -1)|0;
          $8 = $1544;
          $1545 = $6;
          $1546 = ((($1545)) + 1|0);
          $6 = $1546;
          $1547 = HEAP8[$1545>>0]|0;
          $1548 = $1547&255;
          $1549 = $11;
          $1550 = $1548 << $1549;
          $1551 = $10;
          $1552 = (($1551) + ($1550))|0;
          $10 = $1552;
          $1553 = $11;
          $1554 = (($1553) + 8)|0;
          $11 = $1554;
         }
         $1555 = ((($17)) + 1|0);
         $1556 = HEAP8[$1555>>0]|0;
         $1557 = $1556&255;
         $1558 = $10;
         $1559 = $1558 >>> $1557;
         $10 = $1559;
         $1560 = ((($17)) + 1|0);
         $1561 = HEAP8[$1560>>0]|0;
         $1562 = $1561&255;
         $1563 = $11;
         $1564 = (($1563) - ($1562))|0;
         $11 = $1564;
         $1565 = ((($17)) + 1|0);
         $1566 = HEAP8[$1565>>0]|0;
         $1567 = $1566&255;
         $1568 = $5;
         $1569 = ((($1568)) + 7112|0);
         $1570 = HEAP32[$1569>>2]|0;
         $1571 = (($1570) + ($1567))|0;
         HEAP32[$1569>>2] = $1571;
        }
       }
       $1572 = ((($16)) + 1|0);
       $1573 = HEAP8[$1572>>0]|0;
       $1574 = $1573&255;
       $1575 = $10;
       $1576 = $1575 >>> $1574;
       $10 = $1576;
       $1577 = ((($16)) + 1|0);
       $1578 = HEAP8[$1577>>0]|0;
       $1579 = $1578&255;
       $1580 = $11;
       $1581 = (($1580) - ($1579))|0;
       $11 = $1581;
       $1582 = ((($16)) + 1|0);
       $1583 = HEAP8[$1582>>0]|0;
       $1584 = $1583&255;
       $1585 = $5;
       $1586 = ((($1585)) + 7112|0);
       $1587 = HEAP32[$1586>>2]|0;
       $1588 = (($1587) + ($1584))|0;
       HEAP32[$1586>>2] = $1588;
       $1589 = ((($16)) + 2|0);
       $1590 = HEAP16[$1589>>1]|0;
       $1591 = $1590&65535;
       $1592 = $5;
       $1593 = ((($1592)) + 68|0);
       HEAP32[$1593>>2] = $1591;
       $1594 = HEAP8[$16>>0]|0;
       $1595 = $1594&255;
       $1596 = ($1595|0)==(0);
       if ($1596) {
        $1597 = $5;
        $1598 = ((($1597)) + 4|0);
        HEAP32[$1598>>2] = 16205;
        continue L10;
       }
       $1599 = HEAP8[$16>>0]|0;
       $1600 = $1599&255;
       $1601 = $1600 & 32;
       $1602 = ($1601|0)!=(0);
       if ($1602) {
        $1603 = $5;
        $1604 = ((($1603)) + 7112|0);
        HEAP32[$1604>>2] = -1;
        $1605 = $5;
        $1606 = ((($1605)) + 4|0);
        HEAP32[$1606>>2] = 16191;
        continue L10;
       }
       $1607 = HEAP8[$16>>0]|0;
       $1608 = $1607&255;
       $1609 = $1608 & 64;
       $1610 = ($1609|0)!=(0);
       if ($1610) {
        $1611 = $3;
        $1612 = ((($1611)) + 24|0);
        HEAP32[$1612>>2] = 18833;
        $1613 = $5;
        $1614 = ((($1613)) + 4|0);
        HEAP32[$1614>>2] = 16209;
        continue L10;
       } else {
        $1615 = HEAP8[$16>>0]|0;
        $1616 = $1615&255;
        $1617 = $1616 & 15;
        $1618 = $5;
        $1619 = ((($1618)) + 76|0);
        HEAP32[$1619>>2] = $1617;
        $1620 = $5;
        $1621 = ((($1620)) + 4|0);
        HEAP32[$1621>>2] = 16201;
        label = 247;
        break;
       }
      }
     } while(0);
     if ((label|0) == 92) {
      label = 0;
      $536 = $5;
      $537 = ((($536)) + 20|0);
      $538 = HEAP32[$537>>2]|0;
      $539 = $538 & 2048;
      $540 = ($539|0)!=(0);
      if ($540) {
       $541 = $8;
       $542 = ($541|0)==(0);
       if ($542) {
        break;
       }
       $14 = 0;
       while(1) {
        $543 = $6;
        $544 = $14;
        $545 = (($544) + 1)|0;
        $14 = $545;
        $546 = (($543) + ($544)|0);
        $547 = HEAP8[$546>>0]|0;
        $548 = $547&255;
        $18 = $548;
        $549 = $5;
        $550 = ((($549)) + 36|0);
        $551 = HEAP32[$550>>2]|0;
        $552 = ($551|0)!=(0|0);
        if ($552) {
         $553 = $5;
         $554 = ((($553)) + 36|0);
         $555 = HEAP32[$554>>2]|0;
         $556 = ((($555)) + 28|0);
         $557 = HEAP32[$556>>2]|0;
         $558 = ($557|0)!=(0|0);
         if ($558) {
          $559 = $5;
          $560 = ((($559)) + 68|0);
          $561 = HEAP32[$560>>2]|0;
          $562 = $5;
          $563 = ((($562)) + 36|0);
          $564 = HEAP32[$563>>2]|0;
          $565 = ((($564)) + 32|0);
          $566 = HEAP32[$565>>2]|0;
          $567 = ($561>>>0)<($566>>>0);
          if ($567) {
           $568 = $18;
           $569 = $568&255;
           $570 = $5;
           $571 = ((($570)) + 36|0);
           $572 = HEAP32[$571>>2]|0;
           $573 = ((($572)) + 28|0);
           $574 = HEAP32[$573>>2]|0;
           $575 = $5;
           $576 = ((($575)) + 68|0);
           $577 = HEAP32[$576>>2]|0;
           $578 = (($577) + 1)|0;
           HEAP32[$576>>2] = $578;
           $579 = (($574) + ($577)|0);
           HEAP8[$579>>0] = $569;
          }
         }
        }
        $580 = $18;
        $581 = ($580|0)!=(0);
        if (!($581)) {
         break;
        }
        $582 = $14;
        $583 = $8;
        $584 = ($582>>>0)<($583>>>0);
        if (!($584)) {
         break;
        }
       }
       $585 = $5;
       $586 = ((($585)) + 20|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = $587 & 512;
       $589 = ($588|0)!=(0);
       if ($589) {
        $590 = $5;
        $591 = ((($590)) + 12|0);
        $592 = HEAP32[$591>>2]|0;
        $593 = $592 & 4;
        $594 = ($593|0)!=(0);
        if ($594) {
         $595 = $5;
         $596 = ((($595)) + 28|0);
         $597 = HEAP32[$596>>2]|0;
         $598 = $6;
         $599 = $14;
         $600 = (_crc32($597,$598,$599)|0);
         $601 = $5;
         $602 = ((($601)) + 28|0);
         HEAP32[$602>>2] = $600;
        }
       }
       $603 = $14;
       $604 = $8;
       $605 = (($604) - ($603))|0;
       $8 = $605;
       $606 = $14;
       $607 = $6;
       $608 = (($607) + ($606)|0);
       $6 = $608;
       $609 = $18;
       $610 = ($609|0)!=(0);
       if ($610) {
        break;
       }
      } else {
       $611 = $5;
       $612 = ((($611)) + 36|0);
       $613 = HEAP32[$612>>2]|0;
       $614 = ($613|0)!=(0|0);
       if ($614) {
        $615 = $5;
        $616 = ((($615)) + 36|0);
        $617 = HEAP32[$616>>2]|0;
        $618 = ((($617)) + 28|0);
        HEAP32[$618>>2] = 0;
       }
      }
      $619 = $5;
      $620 = ((($619)) + 68|0);
      HEAP32[$620>>2] = 0;
      $621 = $5;
      $622 = ((($621)) + 4|0);
      HEAP32[$622>>2] = 16187;
      label = 108;
     }
     else if ((label|0) == 247) {
      label = 0;
      $1622 = $5;
      $1623 = ((($1622)) + 76|0);
      $1624 = HEAP32[$1623>>2]|0;
      $1625 = ($1624|0)!=(0);
      if ($1625) {
       while(1) {
        $1626 = $11;
        $1627 = $5;
        $1628 = ((($1627)) + 76|0);
        $1629 = HEAP32[$1628>>2]|0;
        $1630 = ($1626>>>0)<($1629>>>0);
        if (!($1630)) {
         break;
        }
        $1631 = $8;
        $1632 = ($1631|0)==(0);
        if ($1632) {
         break L10;
        }
        $1633 = $8;
        $1634 = (($1633) + -1)|0;
        $8 = $1634;
        $1635 = $6;
        $1636 = ((($1635)) + 1|0);
        $6 = $1636;
        $1637 = HEAP8[$1635>>0]|0;
        $1638 = $1637&255;
        $1639 = $11;
        $1640 = $1638 << $1639;
        $1641 = $10;
        $1642 = (($1641) + ($1640))|0;
        $10 = $1642;
        $1643 = $11;
        $1644 = (($1643) + 8)|0;
        $11 = $1644;
       }
       $1645 = $10;
       $1646 = $5;
       $1647 = ((($1646)) + 76|0);
       $1648 = HEAP32[$1647>>2]|0;
       $1649 = 1 << $1648;
       $1650 = (($1649) - 1)|0;
       $1651 = $1645 & $1650;
       $1652 = $5;
       $1653 = ((($1652)) + 68|0);
       $1654 = HEAP32[$1653>>2]|0;
       $1655 = (($1654) + ($1651))|0;
       HEAP32[$1653>>2] = $1655;
       $1656 = $5;
       $1657 = ((($1656)) + 76|0);
       $1658 = HEAP32[$1657>>2]|0;
       $1659 = $10;
       $1660 = $1659 >>> $1658;
       $10 = $1660;
       $1661 = $5;
       $1662 = ((($1661)) + 76|0);
       $1663 = HEAP32[$1662>>2]|0;
       $1664 = $11;
       $1665 = (($1664) - ($1663))|0;
       $11 = $1665;
       $1666 = $5;
       $1667 = ((($1666)) + 76|0);
       $1668 = HEAP32[$1667>>2]|0;
       $1669 = $5;
       $1670 = ((($1669)) + 7112|0);
       $1671 = HEAP32[$1670>>2]|0;
       $1672 = (($1671) + ($1668))|0;
       HEAP32[$1670>>2] = $1672;
      }
      $1673 = $5;
      $1674 = ((($1673)) + 68|0);
      $1675 = HEAP32[$1674>>2]|0;
      $1676 = $5;
      $1677 = ((($1676)) + 7116|0);
      HEAP32[$1677>>2] = $1675;
      $1678 = $5;
      $1679 = ((($1678)) + 4|0);
      HEAP32[$1679>>2] = 16202;
      label = 253;
     }
     do {
      if ((label|0) == 108) {
       label = 0;
       $623 = $5;
       $624 = ((($623)) + 20|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = $625 & 4096;
       $627 = ($626|0)!=(0);
       if ($627) {
        $628 = $8;
        $629 = ($628|0)==(0);
        if ($629) {
         break L10;
        }
        $14 = 0;
        while(1) {
         $630 = $6;
         $631 = $14;
         $632 = (($631) + 1)|0;
         $14 = $632;
         $633 = (($630) + ($631)|0);
         $634 = HEAP8[$633>>0]|0;
         $635 = $634&255;
         $18 = $635;
         $636 = $5;
         $637 = ((($636)) + 36|0);
         $638 = HEAP32[$637>>2]|0;
         $639 = ($638|0)!=(0|0);
         if ($639) {
          $640 = $5;
          $641 = ((($640)) + 36|0);
          $642 = HEAP32[$641>>2]|0;
          $643 = ((($642)) + 36|0);
          $644 = HEAP32[$643>>2]|0;
          $645 = ($644|0)!=(0|0);
          if ($645) {
           $646 = $5;
           $647 = ((($646)) + 68|0);
           $648 = HEAP32[$647>>2]|0;
           $649 = $5;
           $650 = ((($649)) + 36|0);
           $651 = HEAP32[$650>>2]|0;
           $652 = ((($651)) + 40|0);
           $653 = HEAP32[$652>>2]|0;
           $654 = ($648>>>0)<($653>>>0);
           if ($654) {
            $655 = $18;
            $656 = $655&255;
            $657 = $5;
            $658 = ((($657)) + 36|0);
            $659 = HEAP32[$658>>2]|0;
            $660 = ((($659)) + 36|0);
            $661 = HEAP32[$660>>2]|0;
            $662 = $5;
            $663 = ((($662)) + 68|0);
            $664 = HEAP32[$663>>2]|0;
            $665 = (($664) + 1)|0;
            HEAP32[$663>>2] = $665;
            $666 = (($661) + ($664)|0);
            HEAP8[$666>>0] = $656;
           }
          }
         }
         $667 = $18;
         $668 = ($667|0)!=(0);
         if (!($668)) {
          break;
         }
         $669 = $14;
         $670 = $8;
         $671 = ($669>>>0)<($670>>>0);
         if (!($671)) {
          break;
         }
        }
        $672 = $5;
        $673 = ((($672)) + 20|0);
        $674 = HEAP32[$673>>2]|0;
        $675 = $674 & 512;
        $676 = ($675|0)!=(0);
        if ($676) {
         $677 = $5;
         $678 = ((($677)) + 12|0);
         $679 = HEAP32[$678>>2]|0;
         $680 = $679 & 4;
         $681 = ($680|0)!=(0);
         if ($681) {
          $682 = $5;
          $683 = ((($682)) + 28|0);
          $684 = HEAP32[$683>>2]|0;
          $685 = $6;
          $686 = $14;
          $687 = (_crc32($684,$685,$686)|0);
          $688 = $5;
          $689 = ((($688)) + 28|0);
          HEAP32[$689>>2] = $687;
         }
        }
        $690 = $14;
        $691 = $8;
        $692 = (($691) - ($690))|0;
        $8 = $692;
        $693 = $14;
        $694 = $6;
        $695 = (($694) + ($693)|0);
        $6 = $695;
        $696 = $18;
        $697 = ($696|0)!=(0);
        if ($697) {
         break L10;
        }
       } else {
        $698 = $5;
        $699 = ((($698)) + 36|0);
        $700 = HEAP32[$699>>2]|0;
        $701 = ($700|0)!=(0|0);
        if ($701) {
         $702 = $5;
         $703 = ((($702)) + 36|0);
         $704 = HEAP32[$703>>2]|0;
         $705 = ((($704)) + 36|0);
         HEAP32[$705>>2] = 0;
        }
       }
       $706 = $5;
       $707 = ((($706)) + 4|0);
       HEAP32[$707>>2] = 16188;
       label = 124;
      }
      else if ((label|0) == 253) {
       while(1) {
        label = 0;
        $1680 = $5;
        $1681 = ((($1680)) + 84|0);
        $1682 = HEAP32[$1681>>2]|0;
        $1683 = $10;
        $1684 = $5;
        $1685 = ((($1684)) + 92|0);
        $1686 = HEAP32[$1685>>2]|0;
        $1687 = 1 << $1686;
        $1688 = (($1687) - 1)|0;
        $1689 = $1683 & $1688;
        $1690 = (($1682) + ($1689<<2)|0);
        ;HEAP16[$16>>1]=HEAP16[$1690>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1690+2>>1]|0;
        $1691 = ((($16)) + 1|0);
        $1692 = HEAP8[$1691>>0]|0;
        $1693 = $1692&255;
        $1694 = $11;
        $1695 = ($1693>>>0)<=($1694>>>0);
        if ($1695) {
         break;
        }
        $1696 = $8;
        $1697 = ($1696|0)==(0);
        if ($1697) {
         break L10;
        }
        $1698 = $8;
        $1699 = (($1698) + -1)|0;
        $8 = $1699;
        $1700 = $6;
        $1701 = ((($1700)) + 1|0);
        $6 = $1701;
        $1702 = HEAP8[$1700>>0]|0;
        $1703 = $1702&255;
        $1704 = $11;
        $1705 = $1703 << $1704;
        $1706 = $10;
        $1707 = (($1706) + ($1705))|0;
        $10 = $1707;
        $1708 = $11;
        $1709 = (($1708) + 8)|0;
        $11 = $1709;
        label = 253;
       }
       $1710 = HEAP8[$16>>0]|0;
       $1711 = $1710&255;
       $1712 = $1711 & 240;
       $1713 = ($1712|0)==(0);
       if ($1713) {
        ;HEAP16[$17>>1]=HEAP16[$16>>1]|0;HEAP16[$17+2>>1]=HEAP16[$16+2>>1]|0;
        while(1) {
         $1714 = $5;
         $1715 = ((($1714)) + 84|0);
         $1716 = HEAP32[$1715>>2]|0;
         $1717 = ((($17)) + 2|0);
         $1718 = HEAP16[$1717>>1]|0;
         $1719 = $1718&65535;
         $1720 = $10;
         $1721 = ((($17)) + 1|0);
         $1722 = HEAP8[$1721>>0]|0;
         $1723 = $1722&255;
         $1724 = HEAP8[$17>>0]|0;
         $1725 = $1724&255;
         $1726 = (($1723) + ($1725))|0;
         $1727 = 1 << $1726;
         $1728 = (($1727) - 1)|0;
         $1729 = $1720 & $1728;
         $1730 = ((($17)) + 1|0);
         $1731 = HEAP8[$1730>>0]|0;
         $1732 = $1731&255;
         $1733 = $1729 >>> $1732;
         $1734 = (($1719) + ($1733))|0;
         $1735 = (($1716) + ($1734<<2)|0);
         ;HEAP16[$16>>1]=HEAP16[$1735>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1735+2>>1]|0;
         $1736 = ((($17)) + 1|0);
         $1737 = HEAP8[$1736>>0]|0;
         $1738 = $1737&255;
         $1739 = ((($16)) + 1|0);
         $1740 = HEAP8[$1739>>0]|0;
         $1741 = $1740&255;
         $1742 = (($1738) + ($1741))|0;
         $1743 = $11;
         $1744 = ($1742>>>0)<=($1743>>>0);
         if ($1744) {
          break;
         }
         $1745 = $8;
         $1746 = ($1745|0)==(0);
         if ($1746) {
          break L10;
         }
         $1747 = $8;
         $1748 = (($1747) + -1)|0;
         $8 = $1748;
         $1749 = $6;
         $1750 = ((($1749)) + 1|0);
         $6 = $1750;
         $1751 = HEAP8[$1749>>0]|0;
         $1752 = $1751&255;
         $1753 = $11;
         $1754 = $1752 << $1753;
         $1755 = $10;
         $1756 = (($1755) + ($1754))|0;
         $10 = $1756;
         $1757 = $11;
         $1758 = (($1757) + 8)|0;
         $11 = $1758;
        }
        $1759 = ((($17)) + 1|0);
        $1760 = HEAP8[$1759>>0]|0;
        $1761 = $1760&255;
        $1762 = $10;
        $1763 = $1762 >>> $1761;
        $10 = $1763;
        $1764 = ((($17)) + 1|0);
        $1765 = HEAP8[$1764>>0]|0;
        $1766 = $1765&255;
        $1767 = $11;
        $1768 = (($1767) - ($1766))|0;
        $11 = $1768;
        $1769 = ((($17)) + 1|0);
        $1770 = HEAP8[$1769>>0]|0;
        $1771 = $1770&255;
        $1772 = $5;
        $1773 = ((($1772)) + 7112|0);
        $1774 = HEAP32[$1773>>2]|0;
        $1775 = (($1774) + ($1771))|0;
        HEAP32[$1773>>2] = $1775;
       }
       $1776 = ((($16)) + 1|0);
       $1777 = HEAP8[$1776>>0]|0;
       $1778 = $1777&255;
       $1779 = $10;
       $1780 = $1779 >>> $1778;
       $10 = $1780;
       $1781 = ((($16)) + 1|0);
       $1782 = HEAP8[$1781>>0]|0;
       $1783 = $1782&255;
       $1784 = $11;
       $1785 = (($1784) - ($1783))|0;
       $11 = $1785;
       $1786 = ((($16)) + 1|0);
       $1787 = HEAP8[$1786>>0]|0;
       $1788 = $1787&255;
       $1789 = $5;
       $1790 = ((($1789)) + 7112|0);
       $1791 = HEAP32[$1790>>2]|0;
       $1792 = (($1791) + ($1788))|0;
       HEAP32[$1790>>2] = $1792;
       $1793 = HEAP8[$16>>0]|0;
       $1794 = $1793&255;
       $1795 = $1794 & 64;
       $1796 = ($1795|0)!=(0);
       if ($1796) {
        $1797 = $3;
        $1798 = ((($1797)) + 24|0);
        HEAP32[$1798>>2] = 18811;
        $1799 = $5;
        $1800 = ((($1799)) + 4|0);
        HEAP32[$1800>>2] = 16209;
        continue L10;
       } else {
        $1801 = ((($16)) + 2|0);
        $1802 = HEAP16[$1801>>1]|0;
        $1803 = $1802&65535;
        $1804 = $5;
        $1805 = ((($1804)) + 72|0);
        HEAP32[$1805>>2] = $1803;
        $1806 = HEAP8[$16>>0]|0;
        $1807 = $1806&255;
        $1808 = $1807 & 15;
        $1809 = $5;
        $1810 = ((($1809)) + 76|0);
        HEAP32[$1810>>2] = $1808;
        $1811 = $5;
        $1812 = ((($1811)) + 4|0);
        HEAP32[$1812>>2] = 16203;
        label = 265;
        break;
       }
      }
     } while(0);
     if ((label|0) == 124) {
      label = 0;
      $708 = $5;
      $709 = ((($708)) + 20|0);
      $710 = HEAP32[$709>>2]|0;
      $711 = $710 & 512;
      $712 = ($711|0)!=(0);
      if ($712) {
       while(1) {
        $713 = $11;
        $714 = ($713>>>0)<(16);
        if (!($714)) {
         break;
        }
        $715 = $8;
        $716 = ($715|0)==(0);
        if ($716) {
         break L10;
        }
        $717 = $8;
        $718 = (($717) + -1)|0;
        $8 = $718;
        $719 = $6;
        $720 = ((($719)) + 1|0);
        $6 = $720;
        $721 = HEAP8[$719>>0]|0;
        $722 = $721&255;
        $723 = $11;
        $724 = $722 << $723;
        $725 = $10;
        $726 = (($725) + ($724))|0;
        $10 = $726;
        $727 = $11;
        $728 = (($727) + 8)|0;
        $11 = $728;
       }
       $729 = $5;
       $730 = ((($729)) + 12|0);
       $731 = HEAP32[$730>>2]|0;
       $732 = $731 & 4;
       $733 = ($732|0)!=(0);
       if ($733) {
        $734 = $10;
        $735 = $5;
        $736 = ((($735)) + 28|0);
        $737 = HEAP32[$736>>2]|0;
        $738 = $737 & 65535;
        $739 = ($734|0)!=($738|0);
        if ($739) {
         $740 = $3;
         $741 = ((($740)) + 24|0);
         HEAP32[$741>>2] = 18495;
         $742 = $5;
         $743 = ((($742)) + 4|0);
         HEAP32[$743>>2] = 16209;
         continue;
        }
       }
       $10 = 0;
       $11 = 0;
      }
      $744 = $5;
      $745 = ((($744)) + 36|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = ($746|0)!=(0|0);
      if ($747) {
       $748 = $5;
       $749 = ((($748)) + 20|0);
       $750 = HEAP32[$749>>2]|0;
       $751 = $750 >> 9;
       $752 = $751 & 1;
       $753 = $5;
       $754 = ((($753)) + 36|0);
       $755 = HEAP32[$754>>2]|0;
       $756 = ((($755)) + 44|0);
       HEAP32[$756>>2] = $752;
       $757 = $5;
       $758 = ((($757)) + 36|0);
       $759 = HEAP32[$758>>2]|0;
       $760 = ((($759)) + 48|0);
       HEAP32[$760>>2] = 1;
      }
      $761 = (_crc32(0,0,0)|0);
      $762 = $5;
      $763 = ((($762)) + 28|0);
      HEAP32[$763>>2] = $761;
      $764 = $3;
      $765 = ((($764)) + 48|0);
      HEAP32[$765>>2] = $761;
      $766 = $5;
      $767 = ((($766)) + 4|0);
      HEAP32[$767>>2] = 16191;
      continue;
     }
     else if ((label|0) == 265) {
      label = 0;
      $1813 = $5;
      $1814 = ((($1813)) + 76|0);
      $1815 = HEAP32[$1814>>2]|0;
      $1816 = ($1815|0)!=(0);
      if ($1816) {
       while(1) {
        $1817 = $11;
        $1818 = $5;
        $1819 = ((($1818)) + 76|0);
        $1820 = HEAP32[$1819>>2]|0;
        $1821 = ($1817>>>0)<($1820>>>0);
        if (!($1821)) {
         break;
        }
        $1822 = $8;
        $1823 = ($1822|0)==(0);
        if ($1823) {
         break L10;
        }
        $1824 = $8;
        $1825 = (($1824) + -1)|0;
        $8 = $1825;
        $1826 = $6;
        $1827 = ((($1826)) + 1|0);
        $6 = $1827;
        $1828 = HEAP8[$1826>>0]|0;
        $1829 = $1828&255;
        $1830 = $11;
        $1831 = $1829 << $1830;
        $1832 = $10;
        $1833 = (($1832) + ($1831))|0;
        $10 = $1833;
        $1834 = $11;
        $1835 = (($1834) + 8)|0;
        $11 = $1835;
       }
       $1836 = $10;
       $1837 = $5;
       $1838 = ((($1837)) + 76|0);
       $1839 = HEAP32[$1838>>2]|0;
       $1840 = 1 << $1839;
       $1841 = (($1840) - 1)|0;
       $1842 = $1836 & $1841;
       $1843 = $5;
       $1844 = ((($1843)) + 72|0);
       $1845 = HEAP32[$1844>>2]|0;
       $1846 = (($1845) + ($1842))|0;
       HEAP32[$1844>>2] = $1846;
       $1847 = $5;
       $1848 = ((($1847)) + 76|0);
       $1849 = HEAP32[$1848>>2]|0;
       $1850 = $10;
       $1851 = $1850 >>> $1849;
       $10 = $1851;
       $1852 = $5;
       $1853 = ((($1852)) + 76|0);
       $1854 = HEAP32[$1853>>2]|0;
       $1855 = $11;
       $1856 = (($1855) - ($1854))|0;
       $11 = $1856;
       $1857 = $5;
       $1858 = ((($1857)) + 76|0);
       $1859 = HEAP32[$1858>>2]|0;
       $1860 = $5;
       $1861 = ((($1860)) + 7112|0);
       $1862 = HEAP32[$1861>>2]|0;
       $1863 = (($1862) + ($1859))|0;
       HEAP32[$1861>>2] = $1863;
      }
      $1864 = $5;
      $1865 = ((($1864)) + 4|0);
      HEAP32[$1865>>2] = 16204;
     }
     $1866 = $9;
     $1867 = ($1866|0)==(0);
     if ($1867) {
      break;
     }
     $1868 = $13;
     $1869 = $9;
     $1870 = (($1868) - ($1869))|0;
     $14 = $1870;
     $1871 = $5;
     $1872 = ((($1871)) + 72|0);
     $1873 = HEAP32[$1872>>2]|0;
     $1874 = $14;
     $1875 = ($1873>>>0)>($1874>>>0);
     if ($1875) {
      $1876 = $5;
      $1877 = ((($1876)) + 72|0);
      $1878 = HEAP32[$1877>>2]|0;
      $1879 = $14;
      $1880 = (($1878) - ($1879))|0;
      $14 = $1880;
      $1881 = $14;
      $1882 = $5;
      $1883 = ((($1882)) + 48|0);
      $1884 = HEAP32[$1883>>2]|0;
      $1885 = ($1881>>>0)>($1884>>>0);
      if ($1885) {
       $1886 = $5;
       $1887 = ((($1886)) + 7108|0);
       $1888 = HEAP32[$1887>>2]|0;
       $1889 = ($1888|0)!=(0);
       if ($1889) {
        $1890 = $3;
        $1891 = ((($1890)) + 24|0);
        HEAP32[$1891>>2] = 18781;
        $1892 = $5;
        $1893 = ((($1892)) + 4|0);
        HEAP32[$1893>>2] = 16209;
        continue;
       }
      }
      $1894 = $14;
      $1895 = $5;
      $1896 = ((($1895)) + 52|0);
      $1897 = HEAP32[$1896>>2]|0;
      $1898 = ($1894>>>0)>($1897>>>0);
      $1899 = $5;
      if ($1898) {
       $1900 = ((($1899)) + 52|0);
       $1901 = HEAP32[$1900>>2]|0;
       $1902 = $14;
       $1903 = (($1902) - ($1901))|0;
       $14 = $1903;
       $1904 = $5;
       $1905 = ((($1904)) + 56|0);
       $1906 = HEAP32[$1905>>2]|0;
       $1907 = $5;
       $1908 = ((($1907)) + 44|0);
       $1909 = HEAP32[$1908>>2]|0;
       $1910 = $14;
       $1911 = (($1909) - ($1910))|0;
       $1912 = (($1906) + ($1911)|0);
       $15 = $1912;
      } else {
       $1913 = ((($1899)) + 56|0);
       $1914 = HEAP32[$1913>>2]|0;
       $1915 = $5;
       $1916 = ((($1915)) + 52|0);
       $1917 = HEAP32[$1916>>2]|0;
       $1918 = $14;
       $1919 = (($1917) - ($1918))|0;
       $1920 = (($1914) + ($1919)|0);
       $15 = $1920;
      }
      $1921 = $14;
      $1922 = $5;
      $1923 = ((($1922)) + 68|0);
      $1924 = HEAP32[$1923>>2]|0;
      $1925 = ($1921>>>0)>($1924>>>0);
      if ($1925) {
       $1926 = $5;
       $1927 = ((($1926)) + 68|0);
       $1928 = HEAP32[$1927>>2]|0;
       $14 = $1928;
      }
     } else {
      $1929 = $7;
      $1930 = $5;
      $1931 = ((($1930)) + 72|0);
      $1932 = HEAP32[$1931>>2]|0;
      $1933 = (0 - ($1932))|0;
      $1934 = (($1929) + ($1933)|0);
      $15 = $1934;
      $1935 = $5;
      $1936 = ((($1935)) + 68|0);
      $1937 = HEAP32[$1936>>2]|0;
      $14 = $1937;
     }
     $1938 = $14;
     $1939 = $9;
     $1940 = ($1938>>>0)>($1939>>>0);
     if ($1940) {
      $1941 = $9;
      $14 = $1941;
     }
     $1942 = $14;
     $1943 = $9;
     $1944 = (($1943) - ($1942))|0;
     $9 = $1944;
     $1945 = $14;
     $1946 = $5;
     $1947 = ((($1946)) + 68|0);
     $1948 = HEAP32[$1947>>2]|0;
     $1949 = (($1948) - ($1945))|0;
     HEAP32[$1947>>2] = $1949;
     while(1) {
      $1950 = $15;
      $1951 = ((($1950)) + 1|0);
      $15 = $1951;
      $1952 = HEAP8[$1950>>0]|0;
      $1953 = $7;
      $1954 = ((($1953)) + 1|0);
      $7 = $1954;
      HEAP8[$1953>>0] = $1952;
      $1955 = $14;
      $1956 = (($1955) + -1)|0;
      $14 = $1956;
      $1957 = ($1956|0)!=(0);
      if (!($1957)) {
       break;
      }
     }
     $1958 = $5;
     $1959 = ((($1958)) + 68|0);
     $1960 = HEAP32[$1959>>2]|0;
     $1961 = ($1960|0)==(0);
     if (!($1961)) {
      continue;
     }
     $1962 = $5;
     $1963 = ((($1962)) + 4|0);
     HEAP32[$1963>>2] = 16200;
    }
    if ((label|0) == 140) {
     $809 = $7;
     $810 = $3;
     $811 = ((($810)) + 12|0);
     HEAP32[$811>>2] = $809;
     $812 = $9;
     $813 = $3;
     $814 = ((($813)) + 16|0);
     HEAP32[$814>>2] = $812;
     $815 = $6;
     $816 = $3;
     HEAP32[$816>>2] = $815;
     $817 = $8;
     $818 = $3;
     $819 = ((($818)) + 4|0);
     HEAP32[$819>>2] = $817;
     $820 = $10;
     $821 = $5;
     $822 = ((($821)) + 60|0);
     HEAP32[$822>>2] = $820;
     $823 = $11;
     $824 = $5;
     $825 = ((($824)) + 64|0);
     HEAP32[$825>>2] = $823;
     $2 = 2;
     $2245 = $2;
     STACKTOP = sp;return ($2245|0);
    }
    else if ((label|0) == 151) {
     $883 = $10;
     $884 = $883 >>> 2;
     $10 = $884;
     $885 = $11;
     $886 = (($885) - 2)|0;
     $11 = $886;
    }
    else if ((label|0) == 154) {
     // unreachable;
    }
    else if ((label|0) == 313) {
     $10 = 0;
     $11 = 0;
     label = 314;
    }
    else if ((label|0) == 316) {
     $19 = -3;
    }
    else if ((label|0) == 317) {
     $2 = -4;
     $2245 = $2;
     STACKTOP = sp;return ($2245|0);
    }
    else if ((label|0) == 318) {
     $2 = -2;
     $2245 = $2;
     STACKTOP = sp;return ($2245|0);
    }
    if ((label|0) == 314) {
     $2104 = $5;
     $2105 = ((($2104)) + 4|0);
     HEAP32[$2105>>2] = 16208;
     label = 315;
    }
    if ((label|0) == 315) {
     $19 = 1;
    }
    $2106 = $7;
    $2107 = $3;
    $2108 = ((($2107)) + 12|0);
    HEAP32[$2108>>2] = $2106;
    $2109 = $9;
    $2110 = $3;
    $2111 = ((($2110)) + 16|0);
    HEAP32[$2111>>2] = $2109;
    $2112 = $6;
    $2113 = $3;
    HEAP32[$2113>>2] = $2112;
    $2114 = $8;
    $2115 = $3;
    $2116 = ((($2115)) + 4|0);
    HEAP32[$2116>>2] = $2114;
    $2117 = $10;
    $2118 = $5;
    $2119 = ((($2118)) + 60|0);
    HEAP32[$2119>>2] = $2117;
    $2120 = $11;
    $2121 = $5;
    $2122 = ((($2121)) + 64|0);
    HEAP32[$2122>>2] = $2120;
    $2123 = $5;
    $2124 = ((($2123)) + 44|0);
    $2125 = HEAP32[$2124>>2]|0;
    $2126 = ($2125|0)!=(0);
    if ($2126) {
     label = 323;
    } else {
     $2127 = $13;
     $2128 = $3;
     $2129 = ((($2128)) + 16|0);
     $2130 = HEAP32[$2129>>2]|0;
     $2131 = ($2127|0)!=($2130|0);
     if ($2131) {
      $2132 = $5;
      $2133 = ((($2132)) + 4|0);
      $2134 = HEAP32[$2133>>2]|0;
      $2135 = ($2134>>>0)<(16209);
      if ($2135) {
       $2136 = $5;
       $2137 = ((($2136)) + 4|0);
       $2138 = HEAP32[$2137>>2]|0;
       $2139 = ($2138>>>0)<(16206);
       $2140 = $4;
       $2141 = ($2140|0)!=(4);
       $or$cond11 = $2139 | $2141;
       if ($or$cond11) {
        label = 323;
       }
      }
     }
    }
    if ((label|0) == 323) {
     $2142 = $3;
     $2143 = $3;
     $2144 = ((($2143)) + 12|0);
     $2145 = HEAP32[$2144>>2]|0;
     $2146 = $13;
     $2147 = $3;
     $2148 = ((($2147)) + 16|0);
     $2149 = HEAP32[$2148>>2]|0;
     $2150 = (($2146) - ($2149))|0;
     $2151 = (_updatewindow($2142,$2145,$2150)|0);
     $2152 = ($2151|0)!=(0);
     if ($2152) {
      $2153 = $5;
      $2154 = ((($2153)) + 4|0);
      HEAP32[$2154>>2] = 16210;
      $2 = -4;
      $2245 = $2;
      STACKTOP = sp;return ($2245|0);
     }
    }
    $2155 = $3;
    $2156 = ((($2155)) + 4|0);
    $2157 = HEAP32[$2156>>2]|0;
    $2158 = $12;
    $2159 = (($2158) - ($2157))|0;
    $12 = $2159;
    $2160 = $3;
    $2161 = ((($2160)) + 16|0);
    $2162 = HEAP32[$2161>>2]|0;
    $2163 = $13;
    $2164 = (($2163) - ($2162))|0;
    $13 = $2164;
    $2165 = $12;
    $2166 = $3;
    $2167 = ((($2166)) + 8|0);
    $2168 = HEAP32[$2167>>2]|0;
    $2169 = (($2168) + ($2165))|0;
    HEAP32[$2167>>2] = $2169;
    $2170 = $13;
    $2171 = $3;
    $2172 = ((($2171)) + 20|0);
    $2173 = HEAP32[$2172>>2]|0;
    $2174 = (($2173) + ($2170))|0;
    HEAP32[$2172>>2] = $2174;
    $2175 = $13;
    $2176 = $5;
    $2177 = ((($2176)) + 32|0);
    $2178 = HEAP32[$2177>>2]|0;
    $2179 = (($2178) + ($2175))|0;
    HEAP32[$2177>>2] = $2179;
    $2180 = $5;
    $2181 = ((($2180)) + 12|0);
    $2182 = HEAP32[$2181>>2]|0;
    $2183 = $2182 & 4;
    $2184 = ($2183|0)!=(0);
    $2185 = $13;
    $2186 = ($2185|0)!=(0);
    $or$cond13 = $2184 & $2186;
    if ($or$cond13) {
     $2187 = $5;
     $2188 = ((($2187)) + 20|0);
     $2189 = HEAP32[$2188>>2]|0;
     $2190 = ($2189|0)!=(0);
     $2191 = $5;
     $2192 = ((($2191)) + 28|0);
     $2193 = HEAP32[$2192>>2]|0;
     $2194 = $3;
     $2195 = ((($2194)) + 12|0);
     $2196 = HEAP32[$2195>>2]|0;
     $2197 = $13;
     $2198 = (0 - ($2197))|0;
     $2199 = (($2196) + ($2198)|0);
     $2200 = $13;
     if ($2190) {
      $2201 = (_crc32($2193,$2199,$2200)|0);
      $2205 = $2201;
     } else {
      $2202 = (_adler32($2193,$2199,$2200)|0);
      $2205 = $2202;
     }
     $2203 = $5;
     $2204 = ((($2203)) + 28|0);
     HEAP32[$2204>>2] = $2205;
     $2206 = $3;
     $2207 = ((($2206)) + 48|0);
     HEAP32[$2207>>2] = $2205;
    }
    $2208 = $5;
    $2209 = ((($2208)) + 64|0);
    $2210 = HEAP32[$2209>>2]|0;
    $2211 = $5;
    $2212 = ((($2211)) + 8|0);
    $2213 = HEAP32[$2212>>2]|0;
    $2214 = ($2213|0)!=(0);
    $2215 = $2214 ? 64 : 0;
    $2216 = (($2210) + ($2215))|0;
    $2217 = $5;
    $2218 = ((($2217)) + 4|0);
    $2219 = HEAP32[$2218>>2]|0;
    $2220 = ($2219|0)==(16191);
    $2221 = $2220 ? 128 : 0;
    $2222 = (($2216) + ($2221))|0;
    $2223 = $5;
    $2224 = ((($2223)) + 4|0);
    $2225 = HEAP32[$2224>>2]|0;
    $2226 = ($2225|0)==(16199);
    if ($2226) {
     $2231 = 1;
    } else {
     $2227 = $5;
     $2228 = ((($2227)) + 4|0);
     $2229 = HEAP32[$2228>>2]|0;
     $2230 = ($2229|0)==(16194);
     $2231 = $2230;
    }
    $2232 = $2231 ? 256 : 0;
    $2233 = (($2222) + ($2232))|0;
    $2234 = $3;
    $2235 = ((($2234)) + 44|0);
    HEAP32[$2235>>2] = $2233;
    $2236 = $12;
    $2237 = ($2236|0)==(0);
    $2238 = $13;
    $2239 = ($2238|0)==(0);
    $or$cond15 = $2237 & $2239;
    $2240 = $4;
    $2241 = ($2240|0)==(4);
    $or$cond17 = $or$cond15 | $2241;
    $2242 = $19;
    $2243 = ($2242|0)==(0);
    $or$cond19 = $or$cond17 & $2243;
    if ($or$cond19) {
     $19 = -5;
    }
    $2244 = $19;
    $2 = $2244;
    $2245 = $2;
    STACKTOP = sp;return ($2245|0);
   }
  }
 } while(0);
 $2 = -2;
 $2245 = $2;
 STACKTOP = sp;return ($2245|0);
}
function _fixedtables($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 80|0);
 HEAP32[$3>>2] = 9902;
 $4 = $1;
 $5 = ((($4)) + 88|0);
 HEAP32[$5>>2] = 9;
 $6 = $1;
 $7 = ((($6)) + 84|0);
 HEAP32[$7>>2] = 11950;
 $8 = $1;
 $9 = ((($8)) + 92|0);
 HEAP32[$9>>2] = 5;
 STACKTOP = sp;return;
}
function _updatewindow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 $12 = $7;
 $13 = ((($12)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $4;
  $20 = ((($19)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $7;
  $23 = ((($22)) + 40|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = 1 << $24;
  $26 = (FUNCTION_TABLE_iiii[$18 & 127]($21,$25,1)|0);
  $27 = $7;
  $28 = ((($27)) + 56|0);
  HEAP32[$28>>2] = $26;
  $29 = $7;
  $30 = ((($29)) + 56|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $3 = 1;
   $140 = $3;
   STACKTOP = sp;return ($140|0);
  }
 }
 $33 = $7;
 $34 = ((($33)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $7;
  $38 = ((($37)) + 40|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = 1 << $39;
  $41 = $7;
  $42 = ((($41)) + 44|0);
  HEAP32[$42>>2] = $40;
  $43 = $7;
  $44 = ((($43)) + 52|0);
  HEAP32[$44>>2] = 0;
  $45 = $7;
  $46 = ((($45)) + 48|0);
  HEAP32[$46>>2] = 0;
 }
 $47 = $6;
 $48 = $7;
 $49 = ((($48)) + 44|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($47>>>0)>=($50>>>0);
 $52 = $7;
 do {
  if ($51) {
   $53 = ((($52)) + 56|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $5;
   $56 = $7;
   $57 = ((($56)) + 44|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (0 - ($58))|0;
   $60 = (($55) + ($59)|0);
   $61 = $7;
   $62 = ((($61)) + 44|0);
   $63 = HEAP32[$62>>2]|0;
   _memcpy(($54|0),($60|0),($63|0))|0;
   $64 = $7;
   $65 = ((($64)) + 52|0);
   HEAP32[$65>>2] = 0;
   $66 = $7;
   $67 = ((($66)) + 44|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $7;
   $70 = ((($69)) + 48|0);
   HEAP32[$70>>2] = $68;
  } else {
   $71 = ((($52)) + 44|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $7;
   $74 = ((($73)) + 52|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($72) - ($75))|0;
   $8 = $76;
   $77 = $8;
   $78 = $6;
   $79 = ($77>>>0)>($78>>>0);
   if ($79) {
    $80 = $6;
    $8 = $80;
   }
   $81 = $7;
   $82 = ((($81)) + 56|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $7;
   $85 = ((($84)) + 52|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($83) + ($86)|0);
   $88 = $5;
   $89 = $6;
   $90 = (0 - ($89))|0;
   $91 = (($88) + ($90)|0);
   $92 = $8;
   _memcpy(($87|0),($91|0),($92|0))|0;
   $93 = $8;
   $94 = $6;
   $95 = (($94) - ($93))|0;
   $6 = $95;
   $96 = $6;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $7;
    $99 = ((($98)) + 56|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $5;
    $102 = $6;
    $103 = (0 - ($102))|0;
    $104 = (($101) + ($103)|0);
    $105 = $6;
    _memcpy(($100|0),($104|0),($105|0))|0;
    $106 = $6;
    $107 = $7;
    $108 = ((($107)) + 52|0);
    HEAP32[$108>>2] = $106;
    $109 = $7;
    $110 = ((($109)) + 44|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $7;
    $113 = ((($112)) + 48|0);
    HEAP32[$113>>2] = $111;
    break;
   }
   $114 = $8;
   $115 = $7;
   $116 = ((($115)) + 52|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + ($114))|0;
   HEAP32[$116>>2] = $118;
   $119 = $7;
   $120 = ((($119)) + 52|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $7;
   $123 = ((($122)) + 44|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($121|0)==($124|0);
   if ($125) {
    $126 = $7;
    $127 = ((($126)) + 52|0);
    HEAP32[$127>>2] = 0;
   }
   $128 = $7;
   $129 = ((($128)) + 48|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $7;
   $132 = ((($131)) + 44|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($130>>>0)<($133>>>0);
   if ($134) {
    $135 = $8;
    $136 = $7;
    $137 = ((($136)) + 48|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + ($135))|0;
    HEAP32[$137>>2] = $139;
   }
  }
 } while(0);
 $3 = 0;
 $140 = $3;
 STACKTOP = sp;return ($140|0);
}
function _inflate_table($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sink$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $27 = sp + 168|0;
 $32 = sp + 136|0;
 $33 = sp + 104|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 while(1) {
  $34 = $13;
  $35 = ($34>>>0)<=(15);
  if (!($35)) {
   break;
  }
  $36 = $13;
  $37 = (($32) + ($36<<1)|0);
  HEAP16[$37>>1] = 0;
  $38 = $13;
  $39 = (($38) + 1)|0;
  $13 = $39;
 }
 $14 = 0;
 while(1) {
  $40 = $14;
  $41 = $9;
  $42 = ($40>>>0)<($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = $8;
  $44 = $14;
  $45 = (($43) + ($44<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = (($32) + ($47<<1)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = (($49) + 1)<<16>>16;
  HEAP16[$48>>1] = $50;
  $51 = $14;
  $52 = (($51) + 1)|0;
  $14 = $52;
 }
 $53 = $11;
 $54 = HEAP32[$53>>2]|0;
 $17 = $54;
 $16 = 15;
 while(1) {
  $55 = $16;
  $56 = ($55>>>0)>=(1);
  if (!($56)) {
   break;
  }
  $57 = $16;
  $58 = (($32) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = ($60|0)!=(0);
  if ($61) {
   break;
  }
  $62 = $16;
  $63 = (($62) + -1)|0;
  $16 = $63;
 }
 $64 = $17;
 $65 = $16;
 $66 = ($64>>>0)>($65>>>0);
 if ($66) {
  $67 = $16;
  $17 = $67;
 }
 $68 = $16;
 $69 = ($68|0)==(0);
 if ($69) {
  HEAP8[$27>>0] = 64;
  $70 = ((($27)) + 1|0);
  HEAP8[$70>>0] = 1;
  $71 = ((($27)) + 2|0);
  HEAP16[$71>>1] = 0;
  $72 = $10;
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 4|0);
  HEAP32[$72>>2] = $74;
  ;HEAP16[$73>>1]=HEAP16[$27>>1]|0;HEAP16[$73+2>>1]=HEAP16[$27+2>>1]|0;
  $75 = $10;
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($76)) + 4|0);
  HEAP32[$75>>2] = $77;
  ;HEAP16[$76>>1]=HEAP16[$27>>1]|0;HEAP16[$76+2>>1]=HEAP16[$27+2>>1]|0;
  $78 = $11;
  HEAP32[$78>>2] = 1;
  $6 = 0;
  $370 = $6;
  STACKTOP = sp;return ($370|0);
 }
 $15 = 1;
 while(1) {
  $79 = $15;
  $80 = $16;
  $81 = ($79>>>0)<($80>>>0);
  if (!($81)) {
   break;
  }
  $82 = $15;
  $83 = (($32) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84&65535;
  $86 = ($85|0)!=(0);
  if ($86) {
   break;
  }
  $87 = $15;
  $88 = (($87) + 1)|0;
  $15 = $88;
 }
 $89 = $17;
 $90 = $15;
 $91 = ($89>>>0)<($90>>>0);
 if ($91) {
  $92 = $15;
  $17 = $92;
 }
 $20 = 1;
 $13 = 1;
 while(1) {
  $93 = $13;
  $94 = ($93>>>0)<=(15);
  $95 = $20;
  if (!($94)) {
   break;
  }
  $96 = $95 << 1;
  $20 = $96;
  $97 = $13;
  $98 = (($32) + ($97<<1)|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99&65535;
  $101 = $20;
  $102 = (($101) - ($100))|0;
  $20 = $102;
  $103 = $20;
  $104 = ($103|0)<(0);
  if ($104) {
   label = 24;
   break;
  }
  $105 = $13;
  $106 = (($105) + 1)|0;
  $13 = $106;
 }
 if ((label|0) == 24) {
  $6 = -1;
  $370 = $6;
  STACKTOP = sp;return ($370|0);
 }
 $107 = ($95|0)>(0);
 if ($107) {
  $108 = $7;
  $109 = ($108|0)==(0);
  $110 = $16;
  $111 = ($110|0)!=(1);
  $or$cond = $109 | $111;
  if ($or$cond) {
   $6 = -1;
   $370 = $6;
   STACKTOP = sp;return ($370|0);
  }
 }
 $112 = ((($33)) + 2|0);
 HEAP16[$112>>1] = 0;
 $13 = 1;
 while(1) {
  $113 = $13;
  $114 = ($113>>>0)<(15);
  if (!($114)) {
   break;
  }
  $115 = $13;
  $116 = (($33) + ($115<<1)|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117&65535;
  $119 = $13;
  $120 = (($32) + ($119<<1)|0);
  $121 = HEAP16[$120>>1]|0;
  $122 = $121&65535;
  $123 = (($118) + ($122))|0;
  $124 = $123&65535;
  $125 = $13;
  $126 = (($125) + 1)|0;
  $127 = (($33) + ($126<<1)|0);
  HEAP16[$127>>1] = $124;
  $128 = $13;
  $129 = (($128) + 1)|0;
  $13 = $129;
 }
 $14 = 0;
 while(1) {
  $130 = $14;
  $131 = $9;
  $132 = ($130>>>0)<($131>>>0);
  if (!($132)) {
   break;
  }
  $133 = $8;
  $134 = $14;
  $135 = (($133) + ($134<<1)|0);
  $136 = HEAP16[$135>>1]|0;
  $137 = $136&65535;
  $138 = ($137|0)!=(0);
  if ($138) {
   $139 = $14;
   $140 = $139&65535;
   $141 = $12;
   $142 = $8;
   $143 = $14;
   $144 = (($142) + ($143<<1)|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145&65535;
   $147 = (($33) + ($146<<1)|0);
   $148 = HEAP16[$147>>1]|0;
   $149 = (($148) + 1)<<16>>16;
   HEAP16[$147>>1] = $149;
   $150 = $148&65535;
   $151 = (($141) + ($150<<1)|0);
   HEAP16[$151>>1] = $140;
  }
  $152 = $14;
  $153 = (($152) + 1)|0;
  $14 = $153;
 }
 $154 = $7;
 switch ($154|0) {
 case 0:  {
  $155 = $12;
  $30 = $155;
  $29 = $155;
  $31 = 20;
  break;
 }
 case 1:  {
  $29 = 12078;
  $30 = 12140;
  $31 = 257;
  break;
 }
 default: {
  $29 = 12202;
  $30 = 12266;
  $31 = 0;
 }
 }
 $22 = 0;
 $14 = 0;
 $156 = $15;
 $13 = $156;
 $157 = $10;
 $158 = HEAP32[$157>>2]|0;
 $28 = $158;
 $159 = $17;
 $18 = $159;
 $19 = 0;
 $25 = -1;
 $160 = $17;
 $161 = 1 << $160;
 $21 = $161;
 $162 = $21;
 $163 = (($162) - 1)|0;
 $26 = $163;
 $164 = $7;
 $165 = ($164|0)==(1);
 $166 = $21;
 $167 = ($166>>>0)>(852);
 $or$cond3 = $165 & $167;
 if (!($or$cond3)) {
  $168 = $7;
  $169 = ($168|0)==(2);
  $170 = $21;
  $171 = ($170>>>0)>(592);
  $or$cond5 = $169 & $171;
  if (!($or$cond5)) {
   while(1) {
    $172 = $13;
    $173 = $19;
    $174 = (($172) - ($173))|0;
    $175 = $174&255;
    $176 = ((($27)) + 1|0);
    HEAP8[$176>>0] = $175;
    $177 = $12;
    $178 = $14;
    $179 = (($177) + ($178<<1)|0);
    $180 = HEAP16[$179>>1]|0;
    $181 = $180&65535;
    $182 = (($181) + 1)|0;
    $183 = $31;
    $184 = ($182>>>0)<($183>>>0);
    do {
     if ($184) {
      HEAP8[$27>>0] = 0;
      $185 = $12;
      $186 = $14;
      $187 = (($185) + ($186<<1)|0);
      $188 = HEAP16[$187>>1]|0;
      $$sink$sink = $188;
     } else {
      $189 = $12;
      $190 = $14;
      $191 = (($189) + ($190<<1)|0);
      $192 = HEAP16[$191>>1]|0;
      $193 = $192&65535;
      $194 = $31;
      $195 = ($193>>>0)>=($194>>>0);
      if ($195) {
       $196 = $30;
       $197 = $12;
       $198 = $14;
       $199 = (($197) + ($198<<1)|0);
       $200 = HEAP16[$199>>1]|0;
       $201 = $200&65535;
       $202 = $31;
       $203 = (($201) - ($202))|0;
       $204 = (($196) + ($203<<1)|0);
       $205 = HEAP16[$204>>1]|0;
       $206 = $205&255;
       HEAP8[$27>>0] = $206;
       $207 = $29;
       $208 = $12;
       $209 = $14;
       $210 = (($208) + ($209<<1)|0);
       $211 = HEAP16[$210>>1]|0;
       $212 = $211&65535;
       $213 = $31;
       $214 = (($212) - ($213))|0;
       $215 = (($207) + ($214<<1)|0);
       $216 = HEAP16[$215>>1]|0;
       $$sink$sink = $216;
       break;
      } else {
       HEAP8[$27>>0] = 96;
       $$sink$sink = 0;
       break;
      }
     }
    } while(0);
    $217 = ((($27)) + 2|0);
    HEAP16[$217>>1] = $$sink$sink;
    $218 = $13;
    $219 = $19;
    $220 = (($218) - ($219))|0;
    $221 = 1 << $220;
    $23 = $221;
    $222 = $18;
    $223 = 1 << $222;
    $24 = $223;
    $224 = $24;
    $15 = $224;
    while(1) {
     $225 = $23;
     $226 = $24;
     $227 = (($226) - ($225))|0;
     $24 = $227;
     $228 = $28;
     $229 = $22;
     $230 = $19;
     $231 = $229 >>> $230;
     $232 = $24;
     $233 = (($231) + ($232))|0;
     $234 = (($228) + ($233<<2)|0);
     ;HEAP16[$234>>1]=HEAP16[$27>>1]|0;HEAP16[$234+2>>1]=HEAP16[$27+2>>1]|0;
     $235 = $24;
     $236 = ($235|0)!=(0);
     if (!($236)) {
      break;
     }
    }
    $237 = $13;
    $238 = (($237) - 1)|0;
    $239 = 1 << $238;
    $23 = $239;
    while(1) {
     $240 = $22;
     $241 = $23;
     $242 = $240 & $241;
     $243 = ($242|0)!=(0);
     $244 = $23;
     if (!($243)) {
      break;
     }
     $245 = $244 >>> 1;
     $23 = $245;
    }
    $246 = ($244|0)!=(0);
    if ($246) {
     $247 = $23;
     $248 = (($247) - 1)|0;
     $249 = $22;
     $250 = $249 & $248;
     $22 = $250;
     $251 = $23;
     $252 = $22;
     $253 = (($252) + ($251))|0;
     $22 = $253;
    } else {
     $22 = 0;
    }
    $254 = $14;
    $255 = (($254) + 1)|0;
    $14 = $255;
    $256 = $13;
    $257 = (($32) + ($256<<1)|0);
    $258 = HEAP16[$257>>1]|0;
    $259 = (($258) + -1)<<16>>16;
    HEAP16[$257>>1] = $259;
    $260 = $259&65535;
    $261 = ($260|0)==(0);
    if ($261) {
     $262 = $13;
     $263 = $16;
     $264 = ($262|0)==($263|0);
     if ($264) {
      break;
     }
     $265 = $8;
     $266 = $12;
     $267 = $14;
     $268 = (($266) + ($267<<1)|0);
     $269 = HEAP16[$268>>1]|0;
     $270 = $269&65535;
     $271 = (($265) + ($270<<1)|0);
     $272 = HEAP16[$271>>1]|0;
     $273 = $272&65535;
     $13 = $273;
    }
    $274 = $13;
    $275 = $17;
    $276 = ($274>>>0)>($275>>>0);
    if (!($276)) {
     continue;
    }
    $277 = $22;
    $278 = $26;
    $279 = $277 & $278;
    $280 = $25;
    $281 = ($279|0)!=($280|0);
    if (!($281)) {
     continue;
    }
    $282 = $19;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $17;
     $19 = $284;
    }
    $285 = $15;
    $286 = $28;
    $287 = (($286) + ($285<<2)|0);
    $28 = $287;
    $288 = $13;
    $289 = $19;
    $290 = (($288) - ($289))|0;
    $18 = $290;
    $291 = $18;
    $292 = 1 << $291;
    $20 = $292;
    while(1) {
     $293 = $18;
     $294 = $19;
     $295 = (($293) + ($294))|0;
     $296 = $16;
     $297 = ($295>>>0)<($296>>>0);
     if (!($297)) {
      break;
     }
     $298 = $18;
     $299 = $19;
     $300 = (($298) + ($299))|0;
     $301 = (($32) + ($300<<1)|0);
     $302 = HEAP16[$301>>1]|0;
     $303 = $302&65535;
     $304 = $20;
     $305 = (($304) - ($303))|0;
     $20 = $305;
     $306 = $20;
     $307 = ($306|0)<=(0);
     if ($307) {
      break;
     }
     $308 = $18;
     $309 = (($308) + 1)|0;
     $18 = $309;
     $310 = $20;
     $311 = $310 << 1;
     $20 = $311;
    }
    $312 = $18;
    $313 = 1 << $312;
    $314 = $21;
    $315 = (($314) + ($313))|0;
    $21 = $315;
    $316 = $7;
    $317 = ($316|0)==(1);
    $318 = $21;
    $319 = ($318>>>0)>(852);
    $or$cond9 = $317 & $319;
    if ($or$cond9) {
     label = 70;
     break;
    }
    $320 = $7;
    $321 = ($320|0)==(2);
    $322 = $21;
    $323 = ($322>>>0)>(592);
    $or$cond11 = $321 & $323;
    if ($or$cond11) {
     label = 70;
     break;
    }
    $324 = $22;
    $325 = $26;
    $326 = $324 & $325;
    $25 = $326;
    $327 = $18;
    $328 = $327&255;
    $329 = $10;
    $330 = HEAP32[$329>>2]|0;
    $331 = $25;
    $332 = (($330) + ($331<<2)|0);
    HEAP8[$332>>0] = $328;
    $333 = $17;
    $334 = $333&255;
    $335 = $10;
    $336 = HEAP32[$335>>2]|0;
    $337 = $25;
    $338 = (($336) + ($337<<2)|0);
    $339 = ((($338)) + 1|0);
    HEAP8[$339>>0] = $334;
    $340 = $28;
    $341 = $10;
    $342 = HEAP32[$341>>2]|0;
    $343 = $340;
    $344 = $342;
    $345 = (($343) - ($344))|0;
    $346 = (($345|0) / 4)&-1;
    $347 = $346&65535;
    $348 = $10;
    $349 = HEAP32[$348>>2]|0;
    $350 = $25;
    $351 = (($349) + ($350<<2)|0);
    $352 = ((($351)) + 2|0);
    HEAP16[$352>>1] = $347;
   }
   if ((label|0) == 70) {
    $6 = 1;
    $370 = $6;
    STACKTOP = sp;return ($370|0);
   }
   $353 = $22;
   $354 = ($353|0)!=(0);
   if ($354) {
    HEAP8[$27>>0] = 64;
    $355 = $13;
    $356 = $19;
    $357 = (($355) - ($356))|0;
    $358 = $357&255;
    $359 = ((($27)) + 1|0);
    HEAP8[$359>>0] = $358;
    $360 = ((($27)) + 2|0);
    HEAP16[$360>>1] = 0;
    $361 = $28;
    $362 = $22;
    $363 = (($361) + ($362<<2)|0);
    ;HEAP16[$363>>1]=HEAP16[$27>>1]|0;HEAP16[$363+2>>1]=HEAP16[$27+2>>1]|0;
   }
   $364 = $21;
   $365 = $10;
   $366 = HEAP32[$365>>2]|0;
   $367 = (($366) + ($364<<2)|0);
   HEAP32[$365>>2] = $367;
   $368 = $17;
   $369 = $11;
   HEAP32[$369>>2] = $368;
   $6 = 0;
   $370 = $6;
   STACKTOP = sp;return ($370|0);
  }
 }
 $6 = 1;
 $370 = $6;
 STACKTOP = sp;return ($370|0);
}
function _zcalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = Math_imul($6, $7)|0;
 $9 = (_malloc($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _zcfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _free($4);
 STACKTOP = sp;return;
}
function _inflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $20 = sp + 88|0;
 $2 = $0;
 $3 = $1;
 $25 = $2;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $4 = $27;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $5 = $29;
 $30 = $5;
 $31 = $2;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) - 5)|0;
 $35 = (($30) + ($34)|0);
 $6 = $35;
 $36 = $2;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $7 = $38;
 $39 = $7;
 $40 = $3;
 $41 = $2;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($40) - ($43))|0;
 $45 = (0 - ($44))|0;
 $46 = (($39) + ($45)|0);
 $8 = $46;
 $47 = $7;
 $48 = $2;
 $49 = ((($48)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) - 257)|0;
 $52 = (($47) + ($51)|0);
 $9 = $52;
 $53 = $4;
 $54 = ((($53)) + 44|0);
 $55 = HEAP32[$54>>2]|0;
 $10 = $55;
 $56 = $4;
 $57 = ((($56)) + 48|0);
 $58 = HEAP32[$57>>2]|0;
 $11 = $58;
 $59 = $4;
 $60 = ((($59)) + 52|0);
 $61 = HEAP32[$60>>2]|0;
 $12 = $61;
 $62 = $4;
 $63 = ((($62)) + 56|0);
 $64 = HEAP32[$63>>2]|0;
 $13 = $64;
 $65 = $4;
 $66 = ((($65)) + 60|0);
 $67 = HEAP32[$66>>2]|0;
 $14 = $67;
 $68 = $4;
 $69 = ((($68)) + 64|0);
 $70 = HEAP32[$69>>2]|0;
 $15 = $70;
 $71 = $4;
 $72 = ((($71)) + 80|0);
 $73 = HEAP32[$72>>2]|0;
 $16 = $73;
 $74 = $4;
 $75 = ((($74)) + 84|0);
 $76 = HEAP32[$75>>2]|0;
 $17 = $76;
 $77 = $4;
 $78 = ((($77)) + 88|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = 1 << $79;
 $81 = (($80) - 1)|0;
 $18 = $81;
 $82 = $4;
 $83 = ((($82)) + 92|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = 1 << $84;
 $86 = (($85) - 1)|0;
 $19 = $86;
 L1: while(1) {
  $87 = $15;
  $88 = ($87>>>0)<(15);
  if ($88) {
   $89 = $5;
   $90 = ((($89)) + 1|0);
   $5 = $90;
   $91 = HEAP8[$89>>0]|0;
   $92 = $91&255;
   $93 = $15;
   $94 = $92 << $93;
   $95 = $14;
   $96 = (($95) + ($94))|0;
   $14 = $96;
   $97 = $15;
   $98 = (($97) + 8)|0;
   $15 = $98;
   $99 = $5;
   $100 = ((($99)) + 1|0);
   $5 = $100;
   $101 = HEAP8[$99>>0]|0;
   $102 = $101&255;
   $103 = $15;
   $104 = $102 << $103;
   $105 = $14;
   $106 = (($105) + ($104))|0;
   $14 = $106;
   $107 = $15;
   $108 = (($107) + 8)|0;
   $15 = $108;
  }
  $109 = $16;
  $110 = $14;
  $111 = $18;
  $112 = $110 & $111;
  $113 = (($109) + ($112<<2)|0);
  ;HEAP16[$20>>1]=HEAP16[$113>>1]|0;HEAP16[$20+2>>1]=HEAP16[$113+2>>1]|0;
  while(1) {
   $114 = ((($20)) + 1|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&255;
   $21 = $116;
   $117 = $21;
   $118 = $14;
   $119 = $118 >>> $117;
   $14 = $119;
   $120 = $21;
   $121 = $15;
   $122 = (($121) - ($120))|0;
   $15 = $122;
   $123 = HEAP8[$20>>0]|0;
   $124 = $123&255;
   $21 = $124;
   $125 = $21;
   $126 = ($125|0)==(0);
   if ($126) {
    label = 6;
    break;
   }
   $132 = $21;
   $133 = $132 & 16;
   $134 = ($133|0)!=(0);
   if ($134) {
    label = 8;
    break;
   }
   $457 = $21;
   $458 = $457 & 64;
   $459 = ($458|0)==(0);
   if (!($459)) {
    label = 55;
    break L1;
   }
   $460 = $16;
   $461 = ((($20)) + 2|0);
   $462 = HEAP16[$461>>1]|0;
   $463 = $462&65535;
   $464 = $14;
   $465 = $21;
   $466 = 1 << $465;
   $467 = (($466) - 1)|0;
   $468 = $464 & $467;
   $469 = (($463) + ($468))|0;
   $470 = (($460) + ($469<<2)|0);
   ;HEAP16[$20>>1]=HEAP16[$470>>1]|0;HEAP16[$20+2>>1]=HEAP16[$470+2>>1]|0;
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $127 = ((($20)) + 2|0);
    $128 = HEAP16[$127>>1]|0;
    $129 = $128&255;
    $130 = $7;
    $131 = ((($130)) + 1|0);
    $7 = $131;
    HEAP8[$130>>0] = $129;
   }
   else if ((label|0) == 8) {
    label = 0;
    $135 = ((($20)) + 2|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = $136&65535;
    $22 = $137;
    $138 = $21;
    $139 = $138 & 15;
    $21 = $139;
    $140 = $21;
    $141 = ($140|0)!=(0);
    if ($141) {
     $142 = $15;
     $143 = $21;
     $144 = ($142>>>0)<($143>>>0);
     if ($144) {
      $145 = $5;
      $146 = ((($145)) + 1|0);
      $5 = $146;
      $147 = HEAP8[$145>>0]|0;
      $148 = $147&255;
      $149 = $15;
      $150 = $148 << $149;
      $151 = $14;
      $152 = (($151) + ($150))|0;
      $14 = $152;
      $153 = $15;
      $154 = (($153) + 8)|0;
      $15 = $154;
     }
     $155 = $14;
     $156 = $21;
     $157 = 1 << $156;
     $158 = (($157) - 1)|0;
     $159 = $155 & $158;
     $160 = $22;
     $161 = (($160) + ($159))|0;
     $22 = $161;
     $162 = $21;
     $163 = $14;
     $164 = $163 >>> $162;
     $14 = $164;
     $165 = $21;
     $166 = $15;
     $167 = (($166) - ($165))|0;
     $15 = $167;
    }
    $168 = $15;
    $169 = ($168>>>0)<(15);
    if ($169) {
     $170 = $5;
     $171 = ((($170)) + 1|0);
     $5 = $171;
     $172 = HEAP8[$170>>0]|0;
     $173 = $172&255;
     $174 = $15;
     $175 = $173 << $174;
     $176 = $14;
     $177 = (($176) + ($175))|0;
     $14 = $177;
     $178 = $15;
     $179 = (($178) + 8)|0;
     $15 = $179;
     $180 = $5;
     $181 = ((($180)) + 1|0);
     $5 = $181;
     $182 = HEAP8[$180>>0]|0;
     $183 = $182&255;
     $184 = $15;
     $185 = $183 << $184;
     $186 = $14;
     $187 = (($186) + ($185))|0;
     $14 = $187;
     $188 = $15;
     $189 = (($188) + 8)|0;
     $15 = $189;
    }
    $190 = $17;
    $191 = $14;
    $192 = $19;
    $193 = $191 & $192;
    $194 = (($190) + ($193<<2)|0);
    ;HEAP16[$20>>1]=HEAP16[$194>>1]|0;HEAP16[$20+2>>1]=HEAP16[$194+2>>1]|0;
    while(1) {
     $195 = ((($20)) + 1|0);
     $196 = HEAP8[$195>>0]|0;
     $197 = $196&255;
     $21 = $197;
     $198 = $21;
     $199 = $14;
     $200 = $199 >>> $198;
     $14 = $200;
     $201 = $21;
     $202 = $15;
     $203 = (($202) - ($201))|0;
     $15 = $203;
     $204 = HEAP8[$20>>0]|0;
     $205 = $204&255;
     $21 = $205;
     $206 = $21;
     $207 = $206 & 16;
     $208 = ($207|0)!=(0);
     if ($208) {
      break;
     }
     $440 = $21;
     $441 = $440 & 64;
     $442 = ($441|0)==(0);
     if (!($442)) {
      label = 52;
      break L1;
     }
     $443 = $17;
     $444 = ((($20)) + 2|0);
     $445 = HEAP16[$444>>1]|0;
     $446 = $445&65535;
     $447 = $14;
     $448 = $21;
     $449 = 1 << $448;
     $450 = (($449) - 1)|0;
     $451 = $447 & $450;
     $452 = (($446) + ($451))|0;
     $453 = (($443) + ($452<<2)|0);
     ;HEAP16[$20>>1]=HEAP16[$453>>1]|0;HEAP16[$20+2>>1]=HEAP16[$453+2>>1]|0;
    }
    $209 = ((($20)) + 2|0);
    $210 = HEAP16[$209>>1]|0;
    $211 = $210&65535;
    $23 = $211;
    $212 = $21;
    $213 = $212 & 15;
    $21 = $213;
    $214 = $15;
    $215 = $21;
    $216 = ($214>>>0)<($215>>>0);
    if ($216) {
     $217 = $5;
     $218 = ((($217)) + 1|0);
     $5 = $218;
     $219 = HEAP8[$217>>0]|0;
     $220 = $219&255;
     $221 = $15;
     $222 = $220 << $221;
     $223 = $14;
     $224 = (($223) + ($222))|0;
     $14 = $224;
     $225 = $15;
     $226 = (($225) + 8)|0;
     $15 = $226;
     $227 = $15;
     $228 = $21;
     $229 = ($227>>>0)<($228>>>0);
     if ($229) {
      $230 = $5;
      $231 = ((($230)) + 1|0);
      $5 = $231;
      $232 = HEAP8[$230>>0]|0;
      $233 = $232&255;
      $234 = $15;
      $235 = $233 << $234;
      $236 = $14;
      $237 = (($236) + ($235))|0;
      $14 = $237;
      $238 = $15;
      $239 = (($238) + 8)|0;
      $15 = $239;
     }
    }
    $240 = $14;
    $241 = $21;
    $242 = 1 << $241;
    $243 = (($242) - 1)|0;
    $244 = $240 & $243;
    $245 = $23;
    $246 = (($245) + ($244))|0;
    $23 = $246;
    $247 = $21;
    $248 = $14;
    $249 = $248 >>> $247;
    $14 = $249;
    $250 = $21;
    $251 = $15;
    $252 = (($251) - ($250))|0;
    $15 = $252;
    $253 = $7;
    $254 = $8;
    $255 = $253;
    $256 = $254;
    $257 = (($255) - ($256))|0;
    $21 = $257;
    $258 = $23;
    $259 = $21;
    $260 = ($258>>>0)>($259>>>0);
    if (!($260)) {
     $403 = $7;
     $404 = $23;
     $405 = (0 - ($404))|0;
     $406 = (($403) + ($405)|0);
     $24 = $406;
     while(1) {
      $407 = $24;
      $408 = ((($407)) + 1|0);
      $24 = $408;
      $409 = HEAP8[$407>>0]|0;
      $410 = $7;
      $411 = ((($410)) + 1|0);
      $7 = $411;
      HEAP8[$410>>0] = $409;
      $412 = $24;
      $413 = ((($412)) + 1|0);
      $24 = $413;
      $414 = HEAP8[$412>>0]|0;
      $415 = $7;
      $416 = ((($415)) + 1|0);
      $7 = $416;
      HEAP8[$415>>0] = $414;
      $417 = $24;
      $418 = ((($417)) + 1|0);
      $24 = $418;
      $419 = HEAP8[$417>>0]|0;
      $420 = $7;
      $421 = ((($420)) + 1|0);
      $7 = $421;
      HEAP8[$420>>0] = $419;
      $422 = $22;
      $423 = (($422) - 3)|0;
      $22 = $423;
      $424 = $22;
      $425 = ($424>>>0)>(2);
      if (!($425)) {
       break;
      }
     }
     $426 = $22;
     $427 = ($426|0)!=(0);
     if (!($427)) {
      break;
     }
     $428 = $24;
     $429 = ((($428)) + 1|0);
     $24 = $429;
     $430 = HEAP8[$428>>0]|0;
     $431 = $7;
     $432 = ((($431)) + 1|0);
     $7 = $432;
     HEAP8[$431>>0] = $430;
     $433 = $22;
     $434 = ($433>>>0)>(1);
     if (!($434)) {
      break;
     }
     $435 = $24;
     $436 = ((($435)) + 1|0);
     $24 = $436;
     $437 = HEAP8[$435>>0]|0;
     $438 = $7;
     $439 = ((($438)) + 1|0);
     $7 = $439;
     HEAP8[$438>>0] = $437;
     break;
    }
    $261 = $23;
    $262 = $21;
    $263 = (($261) - ($262))|0;
    $21 = $263;
    $264 = $21;
    $265 = $11;
    $266 = ($264>>>0)>($265>>>0);
    if ($266) {
     $267 = $4;
     $268 = ((($267)) + 7108|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = ($269|0)!=(0);
     if ($270) {
      label = 22;
      break L1;
     }
    }
    $274 = $13;
    $24 = $274;
    $275 = $12;
    $276 = ($275|0)==(0);
    do {
     if ($276) {
      $277 = $10;
      $278 = $21;
      $279 = (($277) - ($278))|0;
      $280 = $24;
      $281 = (($280) + ($279)|0);
      $24 = $281;
      $282 = $21;
      $283 = $22;
      $284 = ($282>>>0)<($283>>>0);
      if ($284) {
       $285 = $21;
       $286 = $22;
       $287 = (($286) - ($285))|0;
       $22 = $287;
       while(1) {
        $288 = $24;
        $289 = ((($288)) + 1|0);
        $24 = $289;
        $290 = HEAP8[$288>>0]|0;
        $291 = $7;
        $292 = ((($291)) + 1|0);
        $7 = $292;
        HEAP8[$291>>0] = $290;
        $293 = $21;
        $294 = (($293) + -1)|0;
        $21 = $294;
        $295 = ($294|0)!=(0);
        if (!($295)) {
         break;
        }
       }
       $296 = $7;
       $297 = $23;
       $298 = (0 - ($297))|0;
       $299 = (($296) + ($298)|0);
       $24 = $299;
      }
     } else {
      $300 = $12;
      $301 = $21;
      $302 = ($300>>>0)<($301>>>0);
      if (!($302)) {
       $347 = $12;
       $348 = $21;
       $349 = (($347) - ($348))|0;
       $350 = $24;
       $351 = (($350) + ($349)|0);
       $24 = $351;
       $352 = $21;
       $353 = $22;
       $354 = ($352>>>0)<($353>>>0);
       if (!($354)) {
        break;
       }
       $355 = $21;
       $356 = $22;
       $357 = (($356) - ($355))|0;
       $22 = $357;
       while(1) {
        $358 = $24;
        $359 = ((($358)) + 1|0);
        $24 = $359;
        $360 = HEAP8[$358>>0]|0;
        $361 = $7;
        $362 = ((($361)) + 1|0);
        $7 = $362;
        HEAP8[$361>>0] = $360;
        $363 = $21;
        $364 = (($363) + -1)|0;
        $21 = $364;
        $365 = ($364|0)!=(0);
        if (!($365)) {
         break;
        }
       }
       $366 = $7;
       $367 = $23;
       $368 = (0 - ($367))|0;
       $369 = (($366) + ($368)|0);
       $24 = $369;
       break;
      }
      $303 = $10;
      $304 = $12;
      $305 = (($303) + ($304))|0;
      $306 = $21;
      $307 = (($305) - ($306))|0;
      $308 = $24;
      $309 = (($308) + ($307)|0);
      $24 = $309;
      $310 = $12;
      $311 = $21;
      $312 = (($311) - ($310))|0;
      $21 = $312;
      $313 = $21;
      $314 = $22;
      $315 = ($313>>>0)<($314>>>0);
      if ($315) {
       $316 = $21;
       $317 = $22;
       $318 = (($317) - ($316))|0;
       $22 = $318;
       while(1) {
        $319 = $24;
        $320 = ((($319)) + 1|0);
        $24 = $320;
        $321 = HEAP8[$319>>0]|0;
        $322 = $7;
        $323 = ((($322)) + 1|0);
        $7 = $323;
        HEAP8[$322>>0] = $321;
        $324 = $21;
        $325 = (($324) + -1)|0;
        $21 = $325;
        $326 = ($325|0)!=(0);
        if (!($326)) {
         break;
        }
       }
       $327 = $13;
       $24 = $327;
       $328 = $12;
       $329 = $22;
       $330 = ($328>>>0)<($329>>>0);
       if ($330) {
        $331 = $12;
        $21 = $331;
        $332 = $21;
        $333 = $22;
        $334 = (($333) - ($332))|0;
        $22 = $334;
        while(1) {
         $335 = $24;
         $336 = ((($335)) + 1|0);
         $24 = $336;
         $337 = HEAP8[$335>>0]|0;
         $338 = $7;
         $339 = ((($338)) + 1|0);
         $7 = $339;
         HEAP8[$338>>0] = $337;
         $340 = $21;
         $341 = (($340) + -1)|0;
         $21 = $341;
         $342 = ($341|0)!=(0);
         if (!($342)) {
          break;
         }
        }
        $343 = $7;
        $344 = $23;
        $345 = (0 - ($344))|0;
        $346 = (($343) + ($345)|0);
        $24 = $346;
       }
      }
     }
    } while(0);
    while(1) {
     $370 = $22;
     $371 = ($370>>>0)>(2);
     if (!($371)) {
      break;
     }
     $372 = $24;
     $373 = ((($372)) + 1|0);
     $24 = $373;
     $374 = HEAP8[$372>>0]|0;
     $375 = $7;
     $376 = ((($375)) + 1|0);
     $7 = $376;
     HEAP8[$375>>0] = $374;
     $377 = $24;
     $378 = ((($377)) + 1|0);
     $24 = $378;
     $379 = HEAP8[$377>>0]|0;
     $380 = $7;
     $381 = ((($380)) + 1|0);
     $7 = $381;
     HEAP8[$380>>0] = $379;
     $382 = $24;
     $383 = ((($382)) + 1|0);
     $24 = $383;
     $384 = HEAP8[$382>>0]|0;
     $385 = $7;
     $386 = ((($385)) + 1|0);
     $7 = $386;
     HEAP8[$385>>0] = $384;
     $387 = $22;
     $388 = (($387) - 3)|0;
     $22 = $388;
    }
    $389 = $22;
    $390 = ($389|0)!=(0);
    if ($390) {
     $391 = $24;
     $392 = ((($391)) + 1|0);
     $24 = $392;
     $393 = HEAP8[$391>>0]|0;
     $394 = $7;
     $395 = ((($394)) + 1|0);
     $7 = $395;
     HEAP8[$394>>0] = $393;
     $396 = $22;
     $397 = ($396>>>0)>(1);
     if ($397) {
      $398 = $24;
      $399 = ((($398)) + 1|0);
      $24 = $399;
      $400 = HEAP8[$398>>0]|0;
      $401 = $7;
      $402 = ((($401)) + 1|0);
      $7 = $402;
      HEAP8[$401>>0] = $400;
     }
    }
   }
  } while(0);
  $478 = $5;
  $479 = $6;
  $480 = ($478>>>0)<($479>>>0);
  if (!($480)) {
   break;
  }
  $481 = $7;
  $482 = $9;
  $483 = ($481>>>0)<($482>>>0);
  if (!($483)) {
   break;
  }
 }
 do {
  if ((label|0) == 22) {
   $271 = $2;
   $272 = ((($271)) + 24|0);
   HEAP32[$272>>2] = 18781;
   $273 = $4;
   $$sink = 16209;$$sink2 = $273;
   label = 60;
  }
  else if ((label|0) == 52) {
   $454 = $2;
   $455 = ((($454)) + 24|0);
   HEAP32[$455>>2] = 18811;
   $456 = $4;
   $$sink = 16209;$$sink2 = $456;
   label = 60;
  }
  else if ((label|0) == 55) {
   $471 = $21;
   $472 = $471 & 32;
   $473 = ($472|0)!=(0);
   if ($473) {
    $474 = $4;
    $$sink = 16191;$$sink2 = $474;
    label = 60;
    break;
   } else {
    $475 = $2;
    $476 = ((($475)) + 24|0);
    HEAP32[$476>>2] = 18833;
    $477 = $4;
    $$sink = 16209;$$sink2 = $477;
    label = 60;
    break;
   }
  }
 } while(0);
 if ((label|0) == 60) {
  $484 = ((($$sink2)) + 4|0);
  HEAP32[$484>>2] = $$sink;
 }
 $485 = $15;
 $486 = $485 >>> 3;
 $22 = $486;
 $487 = $22;
 $488 = $5;
 $489 = (0 - ($487))|0;
 $490 = (($488) + ($489)|0);
 $5 = $490;
 $491 = $22;
 $492 = $491 << 3;
 $493 = $15;
 $494 = (($493) - ($492))|0;
 $15 = $494;
 $495 = $15;
 $496 = 1 << $495;
 $497 = (($496) - 1)|0;
 $498 = $14;
 $499 = $498 & $497;
 $14 = $499;
 $500 = $5;
 $501 = $2;
 HEAP32[$501>>2] = $500;
 $502 = $7;
 $503 = $2;
 $504 = ((($503)) + 12|0);
 HEAP32[$504>>2] = $502;
 $505 = $5;
 $506 = $6;
 $507 = ($505>>>0)<($506>>>0);
 if ($507) {
  $508 = $6;
  $509 = $5;
  $510 = $508;
  $511 = $509;
  $512 = (($510) - ($511))|0;
  $513 = (5 + ($512))|0;
  $522 = $513;
 } else {
  $514 = $5;
  $515 = $6;
  $516 = $514;
  $517 = $515;
  $518 = (($516) - ($517))|0;
  $519 = (5 - ($518))|0;
  $522 = $519;
 }
 $520 = $2;
 $521 = ((($520)) + 4|0);
 HEAP32[$521>>2] = $522;
 $523 = $7;
 $524 = $9;
 $525 = ($523>>>0)<($524>>>0);
 if ($525) {
  $526 = $9;
  $527 = $7;
  $528 = $526;
  $529 = $527;
  $530 = (($528) - ($529))|0;
  $531 = (257 + ($530))|0;
  $540 = $531;
  $538 = $2;
  $539 = ((($538)) + 16|0);
  HEAP32[$539>>2] = $540;
  $541 = $14;
  $542 = $4;
  $543 = ((($542)) + 60|0);
  HEAP32[$543>>2] = $541;
  $544 = $15;
  $545 = $4;
  $546 = ((($545)) + 64|0);
  HEAP32[$546>>2] = $544;
  STACKTOP = sp;return;
 } else {
  $532 = $7;
  $533 = $9;
  $534 = $532;
  $535 = $533;
  $536 = (($534) - ($535))|0;
  $537 = (257 - ($536))|0;
  $540 = $537;
  $538 = $2;
  $539 = ((($538)) + 16|0);
  HEAP32[$539>>2] = $540;
  $541 = $14;
  $542 = $4;
  $543 = ((($542)) + 60|0);
  HEAP32[$543>>2] = $541;
  $544 = $15;
  $545 = $4;
  $546 = ((($545)) + 64|0);
  HEAP32[$546>>2] = $544;
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_720();
 return;
}
function ___cxx_global_var_init_720() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(23565);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($2|0),(18861|0));
 $3 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($3|0),(18866|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(18871);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(18876);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(18888);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(18902);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(18908);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(18923);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(18927);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(18940);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(18945);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(18959);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(18965);
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(18972|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($5|0),(18984|0));
 $6 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($6|0),4,(19017|0));
 $7 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($7|0),(19030|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(19046);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(19076);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(19113);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(19152);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(19183);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(19223);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(19252);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(19290);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(19320);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(19359);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(19391);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(19424);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(19457);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(19491);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(19524);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(19558);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(19589);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(19621);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 255;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $3 = $1;
 $4 = -32768 << 16 >> 16;
 $5 = 32767 << 16 >> 16;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 65535;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (16|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (40|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (48|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (56|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (64|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (72|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (80|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (88|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (96|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (104|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (112|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (144|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (168|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (400|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (392|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (384|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (376|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (368|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (360|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (352|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (344|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (328|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (336|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (320|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (312|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (304|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___strdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
 var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
 var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
 var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
 var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
 var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[5746]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (23024 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[5746] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(22992)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (23024 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[5746] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(23004)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (23024 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[5746] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(22992)>>2] = $76;
     HEAP32[(23004)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(22988)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (23288 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     $$sink12$i = $131&1;
     $132 = (((($124)) + 16|0) + ($$sink12$i<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(0|0);
     if ($134) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01724$i = $124;$$01733$i = $128;$136 = $133;
      while(1) {
       $135 = ((($136)) + 4|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = $137 & -8;
       $139 = (($138) - ($6))|0;
       $140 = ($139>>>0)<($$01733$i>>>0);
       $$$0173$i = $140 ? $139 : $$01733$i;
       $$$0172$i = $140 ? $136 : $$01724$i;
       $141 = ((($136)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       $$sink1$i = $143&1;
       $144 = (((($136)) + 16|0) + ($$sink1$i<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(0|0);
       if ($146) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01724$i = $$$0172$i;$$01733$i = $$$0173$i;$136 = $145;
       }
      }
     }
     $147 = (($$0172$lcssa$i) + ($6)|0);
     $148 = ($147>>>0)>($$0172$lcssa$i>>>0);
     if ($148) {
      $149 = ((($$0172$lcssa$i)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ((($$0172$lcssa$i)) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==($$0172$lcssa$i|0);
      do {
       if ($153) {
        $158 = ((($$0172$lcssa$i)) + 20|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        if ($160) {
         $161 = ((($$0172$lcssa$i)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0|0);
         if ($163) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $162;$$1178$i = $161;
         }
        } else {
         $$1176$i = $159;$$1178$i = $158;
        }
        while(1) {
         $164 = ((($$1176$i)) + 20|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $$1176$i = $165;$$1178$i = $164;
          continue;
         }
         $167 = ((($$1176$i)) + 16|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          break;
         } else {
          $$1176$i = $168;$$1178$i = $167;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $154 = ((($$0172$lcssa$i)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($155)) + 12|0);
        HEAP32[$156>>2] = $152;
        $157 = ((($152)) + 8|0);
        HEAP32[$157>>2] = $155;
        $$3$i = $152;
       }
      } while(0);
      $170 = ($150|0)==(0|0);
      do {
       if (!($170)) {
        $171 = ((($$0172$lcssa$i)) + 28|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (23288 + ($172<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($$0172$lcssa$i|0)==($174|0);
        if ($175) {
         HEAP32[$173>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $176 = 1 << $172;
          $177 = $176 ^ -1;
          $178 = $98 & $177;
          HEAP32[(22988)>>2] = $178;
          break;
         }
        } else {
         $179 = ((($150)) + 16|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $181&1;
         $182 = (((($150)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$182>>2] = $$3$i;
         $183 = ($$3$i|0)==(0|0);
         if ($183) {
          break;
         }
        }
        $184 = ((($$3$i)) + 24|0);
        HEAP32[$184>>2] = $150;
        $185 = ((($$0172$lcssa$i)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(0|0);
        if (!($187)) {
         $188 = ((($$3$i)) + 16|0);
         HEAP32[$188>>2] = $186;
         $189 = ((($186)) + 24|0);
         HEAP32[$189>>2] = $$3$i;
        }
        $190 = ((($$0172$lcssa$i)) + 20|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(0|0);
        if (!($192)) {
         $193 = ((($$3$i)) + 20|0);
         HEAP32[$193>>2] = $191;
         $194 = ((($191)) + 24|0);
         HEAP32[$194>>2] = $$3$i;
        }
       }
      } while(0);
      $195 = ($$0173$lcssa$i>>>0)<(16);
      if ($195) {
       $196 = (($$0173$lcssa$i) + ($6))|0;
       $197 = $196 | 3;
       $198 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = (($$0172$lcssa$i) + ($196)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 1;
       HEAP32[$200>>2] = $202;
      } else {
       $203 = $6 | 3;
       $204 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$204>>2] = $203;
       $205 = $$0173$lcssa$i | 1;
       $206 = ((($147)) + 4|0);
       HEAP32[$206>>2] = $205;
       $207 = (($147) + ($$0173$lcssa$i)|0);
       HEAP32[$207>>2] = $$0173$lcssa$i;
       $208 = ($33|0)==(0);
       if (!($208)) {
        $209 = HEAP32[(23004)>>2]|0;
        $210 = $33 >>> 3;
        $211 = $210 << 1;
        $212 = (23024 + ($211<<2)|0);
        $213 = 1 << $210;
        $214 = $8 & $213;
        $215 = ($214|0)==(0);
        if ($215) {
         $216 = $8 | $213;
         HEAP32[5746] = $216;
         $$pre$i = ((($212)) + 8|0);
         $$0$i = $212;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $217 = ((($212)) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $$0$i = $218;$$pre$phi$iZ2D = $217;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $209;
        $219 = ((($$0$i)) + 12|0);
        HEAP32[$219>>2] = $209;
        $220 = ((($209)) + 8|0);
        HEAP32[$220>>2] = $$0$i;
        $221 = ((($209)) + 12|0);
        HEAP32[$221>>2] = $212;
       }
       HEAP32[(22992)>>2] = $$0173$lcssa$i;
       HEAP32[(23004)>>2] = $147;
      }
      $222 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $222;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $223 = ($0>>>0)>(4294967231);
   if ($223) {
    $$0192 = -1;
   } else {
    $224 = (($0) + 11)|0;
    $225 = $224 & -8;
    $226 = HEAP32[(22988)>>2]|0;
    $227 = ($226|0)==(0);
    if ($227) {
     $$0192 = $225;
    } else {
     $228 = (0 - ($225))|0;
     $229 = $224 >>> 8;
     $230 = ($229|0)==(0);
     if ($230) {
      $$0336$i = 0;
     } else {
      $231 = ($225>>>0)>(16777215);
      if ($231) {
       $$0336$i = 31;
      } else {
       $232 = (($229) + 1048320)|0;
       $233 = $232 >>> 16;
       $234 = $233 & 8;
       $235 = $229 << $234;
       $236 = (($235) + 520192)|0;
       $237 = $236 >>> 16;
       $238 = $237 & 4;
       $239 = $238 | $234;
       $240 = $235 << $238;
       $241 = (($240) + 245760)|0;
       $242 = $241 >>> 16;
       $243 = $242 & 2;
       $244 = $239 | $243;
       $245 = (14 - ($244))|0;
       $246 = $240 << $243;
       $247 = $246 >>> 15;
       $248 = (($245) + ($247))|0;
       $249 = $248 << 1;
       $250 = (($248) + 7)|0;
       $251 = $225 >>> $250;
       $252 = $251 & 1;
       $253 = $252 | $249;
       $$0336$i = $253;
      }
     }
     $254 = (23288 + ($$0336$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0|0);
     L74: do {
      if ($256) {
       $$2333$i = 0;$$3$i199 = 0;$$3328$i = $228;
       label = 57;
      } else {
       $257 = ($$0336$i|0)==(31);
       $258 = $$0336$i >>> 1;
       $259 = (25 - ($258))|0;
       $260 = $257 ? 0 : $259;
       $261 = $225 << $260;
       $$0320$i = 0;$$0325$i = $228;$$0331$i = $255;$$0337$i = $261;$$0340$i = 0;
       while(1) {
        $262 = ((($$0331$i)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $263 & -8;
        $265 = (($264) - ($225))|0;
        $266 = ($265>>>0)<($$0325$i>>>0);
        if ($266) {
         $267 = ($265|0)==(0);
         if ($267) {
          $$43298$i = 0;$$43357$i = $$0331$i;$$49$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $265;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $268 = ((($$0331$i)) + 20|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $$0337$i >>> 31;
        $271 = (((($$0331$i)) + 16|0) + ($270<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($269|0)==(0|0);
        $274 = ($269|0)==($272|0);
        $or$cond1$i198 = $273 | $274;
        $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
        $275 = ($272|0)==(0|0);
        $not$3$i = $275 ^ 1;
        $276 = $not$3$i&1;
        $$0337$$i = $$0337$i << $276;
        if ($275) {
         $$2333$i = $$1341$i;$$3$i199 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $272;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $277 = ($$2333$i|0)==(0|0);
      $278 = ($$3$i199|0)==(0|0);
      $or$cond$i200 = $277 & $278;
      if ($or$cond$i200) {
       $279 = 2 << $$0336$i;
       $280 = (0 - ($279))|0;
       $281 = $279 | $280;
       $282 = $226 & $281;
       $283 = ($282|0)==(0);
       if ($283) {
        $$0192 = $225;
        break;
       }
       $284 = (0 - ($282))|0;
       $285 = $282 & $284;
       $286 = (($285) + -1)|0;
       $287 = $286 >>> 12;
       $288 = $287 & 16;
       $289 = $286 >>> $288;
       $290 = $289 >>> 5;
       $291 = $290 & 8;
       $292 = $291 | $288;
       $293 = $289 >>> $291;
       $294 = $293 >>> 2;
       $295 = $294 & 4;
       $296 = $292 | $295;
       $297 = $293 >>> $295;
       $298 = $297 >>> 1;
       $299 = $298 & 2;
       $300 = $296 | $299;
       $301 = $297 >>> $299;
       $302 = $301 >>> 1;
       $303 = $302 & 1;
       $304 = $300 | $303;
       $305 = $301 >>> $303;
       $306 = (($304) + ($305))|0;
       $307 = (23288 + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $308;
      } else {
       $$4$ph$i = $$3$i199;$$4335$ph$i = $$2333$i;
      }
      $309 = ($$4335$ph$i|0)==(0|0);
      if ($309) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$43298$i = $$3328$i;$$43357$i = $$4335$ph$i;$$49$i = $$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $310 = ((($$43357$i)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $311 & -8;
       $313 = (($312) - ($225))|0;
       $314 = ($313>>>0)<($$43298$i>>>0);
       $$$4329$i = $314 ? $313 : $$43298$i;
       $$4335$$4$i = $314 ? $$43357$i : $$49$i;
       $315 = ((($$43357$i)) + 16|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)==(0|0);
       $$sink2$i202 = $317&1;
       $318 = (((($$43357$i)) + 16|0) + ($$sink2$i202<<2)|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ($319|0)==(0|0);
       if ($320) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$43298$i = $$$4329$i;$$43357$i = $319;$$49$i = $$4335$$4$i;
        label = 61;
       }
      }
     }
     $321 = ($$4$lcssa$i|0)==(0|0);
     if ($321) {
      $$0192 = $225;
     } else {
      $322 = HEAP32[(22992)>>2]|0;
      $323 = (($322) - ($225))|0;
      $324 = ($$4329$lcssa$i>>>0)<($323>>>0);
      if ($324) {
       $325 = (($$4$lcssa$i) + ($225)|0);
       $326 = ($325>>>0)>($$4$lcssa$i>>>0);
       if (!($326)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $327 = ((($$4$lcssa$i)) + 24|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($$4$lcssa$i)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($330|0)==($$4$lcssa$i|0);
       do {
        if ($331) {
         $336 = ((($$4$lcssa$i)) + 20|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = ($337|0)==(0|0);
         if ($338) {
          $339 = ((($$4$lcssa$i)) + 16|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = ($340|0)==(0|0);
          if ($341) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $340;$$1351$i = $339;
          }
         } else {
          $$1347$i = $337;$$1351$i = $336;
         }
         while(1) {
          $342 = ((($$1347$i)) + 20|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = ($343|0)==(0|0);
          if (!($344)) {
           $$1347$i = $343;$$1351$i = $342;
           continue;
          }
          $345 = ((($$1347$i)) + 16|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($346|0)==(0|0);
          if ($347) {
           break;
          } else {
           $$1347$i = $346;$$1351$i = $345;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $332 = ((($$4$lcssa$i)) + 8|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ((($333)) + 12|0);
         HEAP32[$334>>2] = $330;
         $335 = ((($330)) + 8|0);
         HEAP32[$335>>2] = $333;
         $$3349$i = $330;
        }
       } while(0);
       $348 = ($328|0)==(0|0);
       do {
        if ($348) {
         $431 = $226;
        } else {
         $349 = ((($$4$lcssa$i)) + 28|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (23288 + ($350<<2)|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ($$4$lcssa$i|0)==($352|0);
         if ($353) {
          HEAP32[$351>>2] = $$3349$i;
          $cond$i206 = ($$3349$i|0)==(0|0);
          if ($cond$i206) {
           $354 = 1 << $350;
           $355 = $354 ^ -1;
           $356 = $226 & $355;
           HEAP32[(22988)>>2] = $356;
           $431 = $356;
           break;
          }
         } else {
          $357 = ((($328)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)!=($$4$lcssa$i|0);
          $$sink3$i = $359&1;
          $360 = (((($328)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$360>>2] = $$3349$i;
          $361 = ($$3349$i|0)==(0|0);
          if ($361) {
           $431 = $226;
           break;
          }
         }
         $362 = ((($$3349$i)) + 24|0);
         HEAP32[$362>>2] = $328;
         $363 = ((($$4$lcssa$i)) + 16|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if (!($365)) {
          $366 = ((($$3349$i)) + 16|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
         }
         $368 = ((($$4$lcssa$i)) + 20|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = ($369|0)==(0|0);
         if ($370) {
          $431 = $226;
         } else {
          $371 = ((($$3349$i)) + 20|0);
          HEAP32[$371>>2] = $369;
          $372 = ((($369)) + 24|0);
          HEAP32[$372>>2] = $$3349$i;
          $431 = $226;
         }
        }
       } while(0);
       $373 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($373) {
         $374 = (($$4329$lcssa$i) + ($225))|0;
         $375 = $374 | 3;
         $376 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$376>>2] = $375;
         $377 = (($$4$lcssa$i) + ($374)|0);
         $378 = ((($377)) + 4|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = $379 | 1;
         HEAP32[$378>>2] = $380;
        } else {
         $381 = $225 | 3;
         $382 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$382>>2] = $381;
         $383 = $$4329$lcssa$i | 1;
         $384 = ((($325)) + 4|0);
         HEAP32[$384>>2] = $383;
         $385 = (($325) + ($$4329$lcssa$i)|0);
         HEAP32[$385>>2] = $$4329$lcssa$i;
         $386 = $$4329$lcssa$i >>> 3;
         $387 = ($$4329$lcssa$i>>>0)<(256);
         if ($387) {
          $388 = $386 << 1;
          $389 = (23024 + ($388<<2)|0);
          $390 = HEAP32[5746]|0;
          $391 = 1 << $386;
          $392 = $390 & $391;
          $393 = ($392|0)==(0);
          if ($393) {
           $394 = $390 | $391;
           HEAP32[5746] = $394;
           $$pre$i207 = ((($389)) + 8|0);
           $$0345$i = $389;$$pre$phi$i208Z2D = $$pre$i207;
          } else {
           $395 = ((($389)) + 8|0);
           $396 = HEAP32[$395>>2]|0;
           $$0345$i = $396;$$pre$phi$i208Z2D = $395;
          }
          HEAP32[$$pre$phi$i208Z2D>>2] = $325;
          $397 = ((($$0345$i)) + 12|0);
          HEAP32[$397>>2] = $325;
          $398 = ((($325)) + 8|0);
          HEAP32[$398>>2] = $$0345$i;
          $399 = ((($325)) + 12|0);
          HEAP32[$399>>2] = $389;
          break;
         }
         $400 = $$4329$lcssa$i >>> 8;
         $401 = ($400|0)==(0);
         if ($401) {
          $$0339$i = 0;
         } else {
          $402 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($402) {
           $$0339$i = 31;
          } else {
           $403 = (($400) + 1048320)|0;
           $404 = $403 >>> 16;
           $405 = $404 & 8;
           $406 = $400 << $405;
           $407 = (($406) + 520192)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 4;
           $410 = $409 | $405;
           $411 = $406 << $409;
           $412 = (($411) + 245760)|0;
           $413 = $412 >>> 16;
           $414 = $413 & 2;
           $415 = $410 | $414;
           $416 = (14 - ($415))|0;
           $417 = $411 << $414;
           $418 = $417 >>> 15;
           $419 = (($416) + ($418))|0;
           $420 = $419 << 1;
           $421 = (($419) + 7)|0;
           $422 = $$4329$lcssa$i >>> $421;
           $423 = $422 & 1;
           $424 = $423 | $420;
           $$0339$i = $424;
          }
         }
         $425 = (23288 + ($$0339$i<<2)|0);
         $426 = ((($325)) + 28|0);
         HEAP32[$426>>2] = $$0339$i;
         $427 = ((($325)) + 16|0);
         $428 = ((($427)) + 4|0);
         HEAP32[$428>>2] = 0;
         HEAP32[$427>>2] = 0;
         $429 = 1 << $$0339$i;
         $430 = $431 & $429;
         $432 = ($430|0)==(0);
         if ($432) {
          $433 = $431 | $429;
          HEAP32[(22988)>>2] = $433;
          HEAP32[$425>>2] = $325;
          $434 = ((($325)) + 24|0);
          HEAP32[$434>>2] = $425;
          $435 = ((($325)) + 12|0);
          HEAP32[$435>>2] = $325;
          $436 = ((($325)) + 8|0);
          HEAP32[$436>>2] = $325;
          break;
         }
         $437 = HEAP32[$425>>2]|0;
         $438 = ($$0339$i|0)==(31);
         $439 = $$0339$i >>> 1;
         $440 = (25 - ($439))|0;
         $441 = $438 ? 0 : $440;
         $442 = $$4329$lcssa$i << $441;
         $$0322$i = $442;$$0323$i = $437;
         while(1) {
          $443 = ((($$0323$i)) + 4|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = $444 & -8;
          $446 = ($445|0)==($$4329$lcssa$i|0);
          if ($446) {
           label = 97;
           break;
          }
          $447 = $$0322$i >>> 31;
          $448 = (((($$0323$i)) + 16|0) + ($447<<2)|0);
          $449 = $$0322$i << 1;
          $450 = HEAP32[$448>>2]|0;
          $451 = ($450|0)==(0|0);
          if ($451) {
           label = 96;
           break;
          } else {
           $$0322$i = $449;$$0323$i = $450;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$448>>2] = $325;
          $452 = ((($325)) + 24|0);
          HEAP32[$452>>2] = $$0323$i;
          $453 = ((($325)) + 12|0);
          HEAP32[$453>>2] = $325;
          $454 = ((($325)) + 8|0);
          HEAP32[$454>>2] = $325;
          break;
         }
         else if ((label|0) == 97) {
          $455 = ((($$0323$i)) + 8|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = ((($456)) + 12|0);
          HEAP32[$457>>2] = $325;
          HEAP32[$455>>2] = $325;
          $458 = ((($325)) + 8|0);
          HEAP32[$458>>2] = $456;
          $459 = ((($325)) + 12|0);
          HEAP32[$459>>2] = $$0323$i;
          $460 = ((($325)) + 24|0);
          HEAP32[$460>>2] = 0;
          break;
         }
        }
       } while(0);
       $461 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $461;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $225;
      }
     }
    }
   }
  }
 } while(0);
 $462 = HEAP32[(22992)>>2]|0;
 $463 = ($462>>>0)<($$0192>>>0);
 if (!($463)) {
  $464 = (($462) - ($$0192))|0;
  $465 = HEAP32[(23004)>>2]|0;
  $466 = ($464>>>0)>(15);
  if ($466) {
   $467 = (($465) + ($$0192)|0);
   HEAP32[(23004)>>2] = $467;
   HEAP32[(22992)>>2] = $464;
   $468 = $464 | 1;
   $469 = ((($467)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($465) + ($462)|0);
   HEAP32[$470>>2] = $464;
   $471 = $$0192 | 3;
   $472 = ((($465)) + 4|0);
   HEAP32[$472>>2] = $471;
  } else {
   HEAP32[(22992)>>2] = 0;
   HEAP32[(23004)>>2] = 0;
   $473 = $462 | 3;
   $474 = ((($465)) + 4|0);
   HEAP32[$474>>2] = $473;
   $475 = (($465) + ($462)|0);
   $476 = ((($475)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 | 1;
   HEAP32[$476>>2] = $478;
  }
  $479 = ((($465)) + 8|0);
  $$0 = $479;
  STACKTOP = sp;return ($$0|0);
 }
 $480 = HEAP32[(22996)>>2]|0;
 $481 = ($480>>>0)>($$0192>>>0);
 if ($481) {
  $482 = (($480) - ($$0192))|0;
  HEAP32[(22996)>>2] = $482;
  $483 = HEAP32[(23008)>>2]|0;
  $484 = (($483) + ($$0192)|0);
  HEAP32[(23008)>>2] = $484;
  $485 = $482 | 1;
  $486 = ((($484)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = $$0192 | 3;
  $488 = ((($483)) + 4|0);
  HEAP32[$488>>2] = $487;
  $489 = ((($483)) + 8|0);
  $$0 = $489;
  STACKTOP = sp;return ($$0|0);
 }
 $490 = HEAP32[5864]|0;
 $491 = ($490|0)==(0);
 if ($491) {
  HEAP32[(23464)>>2] = 4096;
  HEAP32[(23460)>>2] = 4096;
  HEAP32[(23468)>>2] = -1;
  HEAP32[(23472)>>2] = -1;
  HEAP32[(23476)>>2] = 0;
  HEAP32[(23428)>>2] = 0;
  $492 = $1;
  $493 = $492 & -16;
  $494 = $493 ^ 1431655768;
  HEAP32[5864] = $494;
  $498 = 4096;
 } else {
  $$pre$i195 = HEAP32[(23464)>>2]|0;
  $498 = $$pre$i195;
 }
 $495 = (($$0192) + 48)|0;
 $496 = (($$0192) + 47)|0;
 $497 = (($498) + ($496))|0;
 $499 = (0 - ($498))|0;
 $500 = $497 & $499;
 $501 = ($500>>>0)>($$0192>>>0);
 if (!($501)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $502 = HEAP32[(23424)>>2]|0;
 $503 = ($502|0)==(0);
 if (!($503)) {
  $504 = HEAP32[(23416)>>2]|0;
  $505 = (($504) + ($500))|0;
  $506 = ($505>>>0)<=($504>>>0);
  $507 = ($505>>>0)>($502>>>0);
  $or$cond1$i = $506 | $507;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $508 = HEAP32[(23428)>>2]|0;
 $509 = $508 & 4;
 $510 = ($509|0)==(0);
 L167: do {
  if ($510) {
   $511 = HEAP32[(23008)>>2]|0;
   $512 = ($511|0)==(0|0);
   L169: do {
    if ($512) {
     label = 118;
    } else {
     $$0$i20$i = (23432);
     while(1) {
      $513 = HEAP32[$$0$i20$i>>2]|0;
      $514 = ($513>>>0)>($511>>>0);
      if (!($514)) {
       $515 = ((($$0$i20$i)) + 4|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = (($513) + ($516)|0);
       $518 = ($517>>>0)>($511>>>0);
       if ($518) {
        break;
       }
      }
      $519 = ((($$0$i20$i)) + 8|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $520;
      }
     }
     $544 = (($497) - ($480))|0;
     $545 = $544 & $499;
     $546 = ($545>>>0)<(2147483647);
     if ($546) {
      $547 = (_sbrk(($545|0))|0);
      $548 = HEAP32[$$0$i20$i>>2]|0;
      $549 = HEAP32[$515>>2]|0;
      $550 = (($548) + ($549)|0);
      $551 = ($547|0)==($550|0);
      if ($551) {
       $552 = ($547|0)==((-1)|0);
       if ($552) {
        $$2234243136$i = $545;
       } else {
        $$723947$i = $545;$$748$i = $547;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $547;$$2253$ph$i = $545;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $522 = (_sbrk(0)|0);
     $523 = ($522|0)==((-1)|0);
     if ($523) {
      $$2234243136$i = 0;
     } else {
      $524 = $522;
      $525 = HEAP32[(23460)>>2]|0;
      $526 = (($525) + -1)|0;
      $527 = $526 & $524;
      $528 = ($527|0)==(0);
      $529 = (($526) + ($524))|0;
      $530 = (0 - ($525))|0;
      $531 = $529 & $530;
      $532 = (($531) - ($524))|0;
      $533 = $528 ? 0 : $532;
      $$$i = (($533) + ($500))|0;
      $534 = HEAP32[(23416)>>2]|0;
      $535 = (($$$i) + ($534))|0;
      $536 = ($$$i>>>0)>($$0192>>>0);
      $537 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $536 & $537;
      if ($or$cond$i) {
       $538 = HEAP32[(23424)>>2]|0;
       $539 = ($538|0)==(0);
       if (!($539)) {
        $540 = ($535>>>0)<=($534>>>0);
        $541 = ($535>>>0)>($538>>>0);
        $or$cond2$i = $540 | $541;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $542 = (_sbrk(($$$i|0))|0);
       $543 = ($542|0)==($522|0);
       if ($543) {
        $$723947$i = $$$i;$$748$i = $522;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $542;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $553 = (0 - ($$2253$ph$i))|0;
     $554 = ($$2247$ph$i|0)!=((-1)|0);
     $555 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $555 & $554;
     $556 = ($495>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $556 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $566 = ($$2247$ph$i|0)==((-1)|0);
      if ($566) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $557 = HEAP32[(23464)>>2]|0;
     $558 = (($496) - ($$2253$ph$i))|0;
     $559 = (($558) + ($557))|0;
     $560 = (0 - ($557))|0;
     $561 = $559 & $560;
     $562 = ($561>>>0)<(2147483647);
     if (!($562)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $563 = (_sbrk(($561|0))|0);
     $564 = ($563|0)==((-1)|0);
     if ($564) {
      (_sbrk(($553|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $565 = (($561) + ($$2253$ph$i))|0;
      $$723947$i = $565;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $567 = HEAP32[(23428)>>2]|0;
   $568 = $567 | 4;
   HEAP32[(23428)>>2] = $568;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $569 = ($500>>>0)<(2147483647);
  if ($569) {
   $570 = (_sbrk(($500|0))|0);
   $571 = (_sbrk(0)|0);
   $572 = ($570|0)!=((-1)|0);
   $573 = ($571|0)!=((-1)|0);
   $or$cond5$i = $572 & $573;
   $574 = ($570>>>0)<($571>>>0);
   $or$cond11$i = $574 & $or$cond5$i;
   $575 = $571;
   $576 = $570;
   $577 = (($575) - ($576))|0;
   $578 = (($$0192) + 40)|0;
   $579 = ($577>>>0)>($578>>>0);
   $$$4236$i = $579 ? $577 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $580 = ($570|0)==((-1)|0);
   $not$$i = $579 ^ 1;
   $581 = $580 | $not$$i;
   $or$cond49$i = $581 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $570;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $582 = HEAP32[(23416)>>2]|0;
  $583 = (($582) + ($$723947$i))|0;
  HEAP32[(23416)>>2] = $583;
  $584 = HEAP32[(23420)>>2]|0;
  $585 = ($583>>>0)>($584>>>0);
  if ($585) {
   HEAP32[(23420)>>2] = $583;
  }
  $586 = HEAP32[(23008)>>2]|0;
  $587 = ($586|0)==(0|0);
  do {
   if ($587) {
    $588 = HEAP32[(23000)>>2]|0;
    $589 = ($588|0)==(0|0);
    $590 = ($$748$i>>>0)<($588>>>0);
    $or$cond12$i = $589 | $590;
    if ($or$cond12$i) {
     HEAP32[(23000)>>2] = $$748$i;
    }
    HEAP32[(23432)>>2] = $$748$i;
    HEAP32[(23436)>>2] = $$723947$i;
    HEAP32[(23444)>>2] = 0;
    $591 = HEAP32[5864]|0;
    HEAP32[(23020)>>2] = $591;
    HEAP32[(23016)>>2] = -1;
    HEAP32[(23036)>>2] = (23024);
    HEAP32[(23032)>>2] = (23024);
    HEAP32[(23044)>>2] = (23032);
    HEAP32[(23040)>>2] = (23032);
    HEAP32[(23052)>>2] = (23040);
    HEAP32[(23048)>>2] = (23040);
    HEAP32[(23060)>>2] = (23048);
    HEAP32[(23056)>>2] = (23048);
    HEAP32[(23068)>>2] = (23056);
    HEAP32[(23064)>>2] = (23056);
    HEAP32[(23076)>>2] = (23064);
    HEAP32[(23072)>>2] = (23064);
    HEAP32[(23084)>>2] = (23072);
    HEAP32[(23080)>>2] = (23072);
    HEAP32[(23092)>>2] = (23080);
    HEAP32[(23088)>>2] = (23080);
    HEAP32[(23100)>>2] = (23088);
    HEAP32[(23096)>>2] = (23088);
    HEAP32[(23108)>>2] = (23096);
    HEAP32[(23104)>>2] = (23096);
    HEAP32[(23116)>>2] = (23104);
    HEAP32[(23112)>>2] = (23104);
    HEAP32[(23124)>>2] = (23112);
    HEAP32[(23120)>>2] = (23112);
    HEAP32[(23132)>>2] = (23120);
    HEAP32[(23128)>>2] = (23120);
    HEAP32[(23140)>>2] = (23128);
    HEAP32[(23136)>>2] = (23128);
    HEAP32[(23148)>>2] = (23136);
    HEAP32[(23144)>>2] = (23136);
    HEAP32[(23156)>>2] = (23144);
    HEAP32[(23152)>>2] = (23144);
    HEAP32[(23164)>>2] = (23152);
    HEAP32[(23160)>>2] = (23152);
    HEAP32[(23172)>>2] = (23160);
    HEAP32[(23168)>>2] = (23160);
    HEAP32[(23180)>>2] = (23168);
    HEAP32[(23176)>>2] = (23168);
    HEAP32[(23188)>>2] = (23176);
    HEAP32[(23184)>>2] = (23176);
    HEAP32[(23196)>>2] = (23184);
    HEAP32[(23192)>>2] = (23184);
    HEAP32[(23204)>>2] = (23192);
    HEAP32[(23200)>>2] = (23192);
    HEAP32[(23212)>>2] = (23200);
    HEAP32[(23208)>>2] = (23200);
    HEAP32[(23220)>>2] = (23208);
    HEAP32[(23216)>>2] = (23208);
    HEAP32[(23228)>>2] = (23216);
    HEAP32[(23224)>>2] = (23216);
    HEAP32[(23236)>>2] = (23224);
    HEAP32[(23232)>>2] = (23224);
    HEAP32[(23244)>>2] = (23232);
    HEAP32[(23240)>>2] = (23232);
    HEAP32[(23252)>>2] = (23240);
    HEAP32[(23248)>>2] = (23240);
    HEAP32[(23260)>>2] = (23248);
    HEAP32[(23256)>>2] = (23248);
    HEAP32[(23268)>>2] = (23256);
    HEAP32[(23264)>>2] = (23256);
    HEAP32[(23276)>>2] = (23264);
    HEAP32[(23272)>>2] = (23264);
    HEAP32[(23284)>>2] = (23272);
    HEAP32[(23280)>>2] = (23272);
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(23008)>>2] = $600;
    HEAP32[(22996)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($$748$i) + ($592)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(23472)>>2]|0;
    HEAP32[(23012)>>2] = $606;
   } else {
    $$024367$i = (23432);
    while(1) {
     $607 = HEAP32[$$024367$i>>2]|0;
     $608 = ((($$024367$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 143;
      break;
     }
     $612 = ((($$024367$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024367$i = $613;
     }
    }
    if ((label|0) == 143) {
     $615 = ((($$024367$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($607>>>0)<=($586>>>0);
      $620 = ($$748$i>>>0)>($586>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(22996)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($586)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($586) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(23008)>>2] = $631;
       HEAP32[(22996)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($586) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(23472)>>2]|0;
       HEAP32[(23012)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(23000)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(23000)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (23432);
    while(1) {
     $641 = HEAP32[$$124466$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 151;
      break;
     }
     $643 = ((($$124466$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      $$0$i$i$i = (23432);
      break;
     } else {
      $$124466$i = $644;
     }
    }
    if ((label|0) == 151) {
     $646 = ((($$124466$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $650 = ((($$124466$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($586|0)==($668|0);
      do {
       if ($676) {
        $677 = HEAP32[(22996)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(22996)>>2] = $678;
        HEAP32[(23008)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(23004)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(22992)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(22992)>>2] = $684;
         HEAP32[(23004)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L234: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[5746]|0;
            $703 = $702 & $701;
            HEAP32[5746] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (23288 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(22988)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(22988)>>2] = $736;
             break L234;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)!=($668|0);
             $$sink1$i$i = $739&1;
             $740 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$740>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L234;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0260$i$i = $754;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0260$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0260$i$i)|0);
        HEAP32[$760>>2] = $$0260$i$i;
        $761 = $$0260$i$i >>> 3;
        $762 = ($$0260$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (23024 + ($763<<2)|0);
         $765 = HEAP32[5746]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[5746] = $769;
          $$pre$i17$i = ((($764)) + 8|0);
          $$0268$i$i = $764;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0268$i$i = $771;$$pre$phi$i18$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $772 = ((($$0268$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0268$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0260$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0269$i$i = 0;
         } else {
          $777 = ($$0260$i$i>>>0)>(16777215);
          if ($777) {
           $$0269$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0260$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0269$i$i = $799;
         }
        } while(0);
        $800 = (23288 + ($$0269$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0269$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(22988)>>2]|0;
        $805 = 1 << $$0269$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(22988)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ($$0269$i$i|0)==(31);
        $814 = $$0269$i$i >>> 1;
        $815 = (25 - ($814))|0;
        $816 = $813 ? 0 : $815;
        $817 = $$0260$i$i << $816;
        $$0261$i$i = $817;$$0262$i$i = $812;
        while(1) {
         $818 = ((($$0262$i$i)) + 4|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = $819 & -8;
         $821 = ($820|0)==($$0260$i$i|0);
         if ($821) {
          label = 192;
          break;
         }
         $822 = $$0261$i$i >>> 31;
         $823 = (((($$0262$i$i)) + 16|0) + ($822<<2)|0);
         $824 = $$0261$i$i << 1;
         $825 = HEAP32[$823>>2]|0;
         $826 = ($825|0)==(0|0);
         if ($826) {
          label = 191;
          break;
         } else {
          $$0261$i$i = $824;$$0262$i$i = $825;
         }
        }
        if ((label|0) == 191) {
         HEAP32[$823>>2] = $672;
         $827 = ((($672)) + 24|0);
         HEAP32[$827>>2] = $$0262$i$i;
         $828 = ((($672)) + 12|0);
         HEAP32[$828>>2] = $672;
         $829 = ((($672)) + 8|0);
         HEAP32[$829>>2] = $672;
         break;
        }
        else if ((label|0) == 192) {
         $830 = ((($$0262$i$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ((($831)) + 12|0);
         HEAP32[$832>>2] = $672;
         HEAP32[$830>>2] = $672;
         $833 = ((($672)) + 8|0);
         HEAP32[$833>>2] = $831;
         $834 = ((($672)) + 12|0);
         HEAP32[$834>>2] = $$0262$i$i;
         $835 = ((($672)) + 24|0);
         HEAP32[$835>>2] = 0;
         break;
        }
       }
      } while(0);
      $960 = ((($660)) + 8|0);
      $$0 = $960;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (23432);
     }
    }
    while(1) {
     $836 = HEAP32[$$0$i$i$i>>2]|0;
     $837 = ($836>>>0)>($586>>>0);
     if (!($837)) {
      $838 = ((($$0$i$i$i)) + 4|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = (($836) + ($839)|0);
      $841 = ($840>>>0)>($586>>>0);
      if ($841) {
       break;
      }
     }
     $842 = ((($$0$i$i$i)) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $$0$i$i$i = $843;
    }
    $844 = ((($840)) + -47|0);
    $845 = ((($844)) + 8|0);
    $846 = $845;
    $847 = $846 & 7;
    $848 = ($847|0)==(0);
    $849 = (0 - ($846))|0;
    $850 = $849 & 7;
    $851 = $848 ? 0 : $850;
    $852 = (($844) + ($851)|0);
    $853 = ((($586)) + 16|0);
    $854 = ($852>>>0)<($853>>>0);
    $855 = $854 ? $586 : $852;
    $856 = ((($855)) + 8|0);
    $857 = ((($855)) + 24|0);
    $858 = (($$723947$i) + -40)|0;
    $859 = ((($$748$i)) + 8|0);
    $860 = $859;
    $861 = $860 & 7;
    $862 = ($861|0)==(0);
    $863 = (0 - ($860))|0;
    $864 = $863 & 7;
    $865 = $862 ? 0 : $864;
    $866 = (($$748$i) + ($865)|0);
    $867 = (($858) - ($865))|0;
    HEAP32[(23008)>>2] = $866;
    HEAP32[(22996)>>2] = $867;
    $868 = $867 | 1;
    $869 = ((($866)) + 4|0);
    HEAP32[$869>>2] = $868;
    $870 = (($$748$i) + ($858)|0);
    $871 = ((($870)) + 4|0);
    HEAP32[$871>>2] = 40;
    $872 = HEAP32[(23472)>>2]|0;
    HEAP32[(23012)>>2] = $872;
    $873 = ((($855)) + 4|0);
    HEAP32[$873>>2] = 27;
    ;HEAP32[$856>>2]=HEAP32[(23432)>>2]|0;HEAP32[$856+4>>2]=HEAP32[(23432)+4>>2]|0;HEAP32[$856+8>>2]=HEAP32[(23432)+8>>2]|0;HEAP32[$856+12>>2]=HEAP32[(23432)+12>>2]|0;
    HEAP32[(23432)>>2] = $$748$i;
    HEAP32[(23436)>>2] = $$723947$i;
    HEAP32[(23444)>>2] = 0;
    HEAP32[(23440)>>2] = $856;
    $875 = $857;
    while(1) {
     $874 = ((($875)) + 4|0);
     HEAP32[$874>>2] = 7;
     $876 = ((($875)) + 8|0);
     $877 = ($876>>>0)<($840>>>0);
     if ($877) {
      $875 = $874;
     } else {
      break;
     }
    }
    $878 = ($855|0)==($586|0);
    if (!($878)) {
     $879 = $855;
     $880 = $586;
     $881 = (($879) - ($880))|0;
     $882 = HEAP32[$873>>2]|0;
     $883 = $882 & -2;
     HEAP32[$873>>2] = $883;
     $884 = $881 | 1;
     $885 = ((($586)) + 4|0);
     HEAP32[$885>>2] = $884;
     HEAP32[$855>>2] = $881;
     $886 = $881 >>> 3;
     $887 = ($881>>>0)<(256);
     if ($887) {
      $888 = $886 << 1;
      $889 = (23024 + ($888<<2)|0);
      $890 = HEAP32[5746]|0;
      $891 = 1 << $886;
      $892 = $890 & $891;
      $893 = ($892|0)==(0);
      if ($893) {
       $894 = $890 | $891;
       HEAP32[5746] = $894;
       $$pre$i$i = ((($889)) + 8|0);
       $$0206$i$i = $889;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $895 = ((($889)) + 8|0);
       $896 = HEAP32[$895>>2]|0;
       $$0206$i$i = $896;$$pre$phi$i$iZ2D = $895;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $586;
      $897 = ((($$0206$i$i)) + 12|0);
      HEAP32[$897>>2] = $586;
      $898 = ((($586)) + 8|0);
      HEAP32[$898>>2] = $$0206$i$i;
      $899 = ((($586)) + 12|0);
      HEAP32[$899>>2] = $889;
      break;
     }
     $900 = $881 >>> 8;
     $901 = ($900|0)==(0);
     if ($901) {
      $$0207$i$i = 0;
     } else {
      $902 = ($881>>>0)>(16777215);
      if ($902) {
       $$0207$i$i = 31;
      } else {
       $903 = (($900) + 1048320)|0;
       $904 = $903 >>> 16;
       $905 = $904 & 8;
       $906 = $900 << $905;
       $907 = (($906) + 520192)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 4;
       $910 = $909 | $905;
       $911 = $906 << $909;
       $912 = (($911) + 245760)|0;
       $913 = $912 >>> 16;
       $914 = $913 & 2;
       $915 = $910 | $914;
       $916 = (14 - ($915))|0;
       $917 = $911 << $914;
       $918 = $917 >>> 15;
       $919 = (($916) + ($918))|0;
       $920 = $919 << 1;
       $921 = (($919) + 7)|0;
       $922 = $881 >>> $921;
       $923 = $922 & 1;
       $924 = $923 | $920;
       $$0207$i$i = $924;
      }
     }
     $925 = (23288 + ($$0207$i$i<<2)|0);
     $926 = ((($586)) + 28|0);
     HEAP32[$926>>2] = $$0207$i$i;
     $927 = ((($586)) + 20|0);
     HEAP32[$927>>2] = 0;
     HEAP32[$853>>2] = 0;
     $928 = HEAP32[(22988)>>2]|0;
     $929 = 1 << $$0207$i$i;
     $930 = $928 & $929;
     $931 = ($930|0)==(0);
     if ($931) {
      $932 = $928 | $929;
      HEAP32[(22988)>>2] = $932;
      HEAP32[$925>>2] = $586;
      $933 = ((($586)) + 24|0);
      HEAP32[$933>>2] = $925;
      $934 = ((($586)) + 12|0);
      HEAP32[$934>>2] = $586;
      $935 = ((($586)) + 8|0);
      HEAP32[$935>>2] = $586;
      break;
     }
     $936 = HEAP32[$925>>2]|0;
     $937 = ($$0207$i$i|0)==(31);
     $938 = $$0207$i$i >>> 1;
     $939 = (25 - ($938))|0;
     $940 = $937 ? 0 : $939;
     $941 = $881 << $940;
     $$0201$i$i = $941;$$0202$i$i = $936;
     while(1) {
      $942 = ((($$0202$i$i)) + 4|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = $943 & -8;
      $945 = ($944|0)==($881|0);
      if ($945) {
       label = 213;
       break;
      }
      $946 = $$0201$i$i >>> 31;
      $947 = (((($$0202$i$i)) + 16|0) + ($946<<2)|0);
      $948 = $$0201$i$i << 1;
      $949 = HEAP32[$947>>2]|0;
      $950 = ($949|0)==(0|0);
      if ($950) {
       label = 212;
       break;
      } else {
       $$0201$i$i = $948;$$0202$i$i = $949;
      }
     }
     if ((label|0) == 212) {
      HEAP32[$947>>2] = $586;
      $951 = ((($586)) + 24|0);
      HEAP32[$951>>2] = $$0202$i$i;
      $952 = ((($586)) + 12|0);
      HEAP32[$952>>2] = $586;
      $953 = ((($586)) + 8|0);
      HEAP32[$953>>2] = $586;
      break;
     }
     else if ((label|0) == 213) {
      $954 = ((($$0202$i$i)) + 8|0);
      $955 = HEAP32[$954>>2]|0;
      $956 = ((($955)) + 12|0);
      HEAP32[$956>>2] = $586;
      HEAP32[$954>>2] = $586;
      $957 = ((($586)) + 8|0);
      HEAP32[$957>>2] = $955;
      $958 = ((($586)) + 12|0);
      HEAP32[$958>>2] = $$0202$i$i;
      $959 = ((($586)) + 24|0);
      HEAP32[$959>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $961 = HEAP32[(22996)>>2]|0;
  $962 = ($961>>>0)>($$0192>>>0);
  if ($962) {
   $963 = (($961) - ($$0192))|0;
   HEAP32[(22996)>>2] = $963;
   $964 = HEAP32[(23008)>>2]|0;
   $965 = (($964) + ($$0192)|0);
   HEAP32[(23008)>>2] = $965;
   $966 = $963 | 1;
   $967 = ((($965)) + 4|0);
   HEAP32[$967>>2] = $966;
   $968 = $$0192 | 3;
   $969 = ((($964)) + 4|0);
   HEAP32[$969>>2] = $968;
   $970 = ((($964)) + 8|0);
   $$0 = $970;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $971 = (___errno_location()|0);
 HEAP32[$971>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
 var $cond374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(23000)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(23004)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    HEAP32[(22992)>>2] = $15;
    $83 = $80 & -2;
    HEAP32[$79>>2] = $83;
    $84 = $15 | 1;
    $85 = ((($14)) + 4|0);
    HEAP32[$85>>2] = $84;
    $86 = (($14) + ($15)|0);
    HEAP32[$86>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[5746]|0;
     $29 = $28 & $27;
     HEAP32[5746] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (23288 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond373 = ($$3|0)==(0|0);
     if ($cond373) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(22988)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(22988)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=($14|0);
     $$sink3 = $65&1;
     $66 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$66>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(23008)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(22996)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(22996)>>2] = $98;
   HEAP32[(23008)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(23004)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(23004)>>2] = 0;
   HEAP32[(22992)>>2] = 0;
   return;
  }
  $103 = HEAP32[(23004)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(22992)>>2]|0;
   $106 = (($105) + ($$1347))|0;
   HEAP32[(22992)>>2] = $106;
   HEAP32[(23004)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1347))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[5746]|0;
     $122 = $121 & $120;
     HEAP32[5746] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $138;$$1367 = $134;
       }
      } else {
       $$1363 = $136;$$1367 = $135;
      }
      while(1) {
       $140 = ((($$1363)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if (!($142)) {
        $$1363 = $141;$$1367 = $140;
        continue;
       }
       $143 = ((($$1363)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if ($145) {
        break;
       } else {
        $$1363 = $144;$$1367 = $143;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3365 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (23288 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3365;
      $cond374 = ($$3365|0)==(0|0);
      if ($cond374) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(22988)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(22988)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)!=($7|0);
      $$sink5 = $158&1;
      $159 = (((($126)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$159>>2] = $$3365;
      $160 = ($$3365|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3365)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3365)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3365;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3365)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3365;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(23004)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(22992)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1347 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1347)|0);
  HEAP32[$180>>2] = $$1347;
  $$2 = $$1347;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (23024 + ($183<<2)|0);
  $185 = HEAP32[5746]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[5746] = $189;
   $$pre = ((($184)) + 8|0);
   $$0368 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0368 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0368)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0368;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0361 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0361 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0361 = $219;
  }
 }
 $220 = (23288 + ($$0361<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0361;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(22988)>>2]|0;
 $225 = 1 << $$0361;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(22988)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ($$0361|0)==(31);
   $234 = $$0361 >>> 1;
   $235 = (25 - ($234))|0;
   $236 = $233 ? 0 : $235;
   $237 = $$2 << $236;
   $$0348 = $237;$$0349 = $232;
   while(1) {
    $238 = ((($$0349)) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8;
    $241 = ($240|0)==($$2|0);
    if ($241) {
     label = 73;
     break;
    }
    $242 = $$0348 >>> 31;
    $243 = (((($$0349)) + 16|0) + ($242<<2)|0);
    $244 = $$0348 << 1;
    $245 = HEAP32[$243>>2]|0;
    $246 = ($245|0)==(0|0);
    if ($246) {
     label = 72;
     break;
    } else {
     $$0348 = $244;$$0349 = $245;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$243>>2] = $$1;
    $247 = ((($$1)) + 24|0);
    HEAP32[$247>>2] = $$0349;
    $248 = ((($$1)) + 12|0);
    HEAP32[$248>>2] = $$1;
    $249 = ((($$1)) + 8|0);
    HEAP32[$249>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $250 = ((($$0349)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($251)) + 12|0);
    HEAP32[$252>>2] = $$1;
    HEAP32[$250>>2] = $$1;
    $253 = ((($$1)) + 8|0);
    HEAP32[$253>>2] = $251;
    $254 = ((($$1)) + 12|0);
    HEAP32[$254>>2] = $$0349;
    $255 = ((($$1)) + 24|0);
    HEAP32[$255>>2] = 0;
    break;
   }
  }
 } while(0);
 $256 = HEAP32[(23016)>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[(23016)>>2] = $257;
 $258 = ($257|0)==(0);
 if ($258) {
  $$0195$in$i = (23440);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $259 = ($$0195$i|0)==(0|0);
  $260 = ((($$0195$i)) + 8|0);
  if ($259) {
   break;
  } else {
   $$0195$in$i = $260;
  }
 }
 HEAP32[(23016)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(23464)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(23008)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(22996)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(23008)>>2] = $33;
  HEAP32[(22996)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(23004)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(22992)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(22992)>>2] = $storemerge1;
  HEAP32[(23004)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[5746]|0;
    $81 = $80 & $79;
    HEAP32[5746] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (23288 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(22988)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(22988)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=($5|0);
     $$sink1 = $117&1;
     $118 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$118>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $68 | $132;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(23004)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    HEAP32[(22992)>>2] = $12;
    $79 = $76 & -2;
    HEAP32[$75>>2] = $79;
    $80 = $12 | 1;
    $81 = ((($11)) + 4|0);
    HEAP32[$81>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[5746]|0;
     $25 = $24 & $23;
     HEAP32[5746] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (23288 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(22988)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(22988)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=($11|0);
     $$sink2 = $61&1;
     $62 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$62>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1365 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(23008)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(22996)>>2]|0;
   $89 = (($88) + ($$1365))|0;
   HEAP32[(22996)>>2] = $89;
   HEAP32[(23008)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(23004)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(23004)>>2] = 0;
   HEAP32[(22992)>>2] = 0;
   return;
  }
  $94 = HEAP32[(23004)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(22992)>>2]|0;
   $97 = (($96) + ($$1365))|0;
   HEAP32[(22992)>>2] = $97;
   HEAP32[(23004)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1365))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[5746]|0;
     $113 = $112 & $111;
     HEAP32[5746] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $129;$$1384 = $125;
       }
      } else {
       $$1380 = $127;$$1384 = $126;
      }
      while(1) {
       $131 = ((($$1380)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if (!($133)) {
        $$1380 = $132;$$1384 = $131;
        continue;
       }
       $134 = ((($$1380)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($135|0)==(0|0);
       if ($136) {
        break;
       } else {
        $$1380 = $135;$$1384 = $134;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3382 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (23288 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3382;
      $cond3 = ($$3382|0)==(0|0);
      if ($cond3) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(22988)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(22988)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)!=($2|0);
      $$sink4 = $149&1;
      $150 = (((($117)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$150>>2] = $$3382;
      $151 = ($$3382|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3382)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3382)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3382;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3382)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3382;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(23004)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(22992)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1365 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1365)|0);
  HEAP32[$171>>2] = $$1365;
  $$2 = $$1365;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (23024 + ($174<<2)|0);
  $176 = HEAP32[5746]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[5746] = $180;
   $$pre = ((($175)) + 8|0);
   $$0385 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0385 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0385)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0385;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0378 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0378 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0378 = $210;
  }
 }
 $211 = (23288 + ($$0378<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0378;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(22988)>>2]|0;
 $216 = 1 << $$0378;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(22988)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ($$0378|0)==(31);
 $225 = $$0378 >>> 1;
 $226 = (25 - ($225))|0;
 $227 = $224 ? 0 : $226;
 $228 = $$2 << $227;
 $$0366 = $228;$$0367 = $223;
 while(1) {
  $229 = ((($$0367)) + 4|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $230 & -8;
  $232 = ($231|0)==($$2|0);
  if ($232) {
   label = 69;
   break;
  }
  $233 = $$0366 >>> 31;
  $234 = (((($$0367)) + 16|0) + ($233<<2)|0);
  $235 = $$0366 << 1;
  $236 = HEAP32[$234>>2]|0;
  $237 = ($236|0)==(0|0);
  if ($237) {
   label = 68;
   break;
  } else {
   $$0366 = $235;$$0367 = $236;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$234>>2] = $$1;
  $238 = ((($$1)) + 24|0);
  HEAP32[$238>>2] = $$0367;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $$1;
  $240 = ((($$1)) + 8|0);
  HEAP32[$240>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $241 = ((($$0367)) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 12|0);
  HEAP32[$243>>2] = $$1;
  HEAP32[$241>>2] = $$1;
  $244 = ((($$1)) + 8|0);
  HEAP32[$244>>2] = $242;
  $245 = ((($$1)) + 12|0);
  HEAP32[$245>>2] = $$0367;
  $246 = ((($$1)) + 24|0);
  HEAP32[$246>>2] = 0;
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23480|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 2;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((23548|0));
 return (23556|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((23548|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2357]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[2357]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 127]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 127]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9432|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 127]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$57 = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$57|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$57)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$57)|0);
  $27 = (($4) - ($$57))|0;
  $$054$ph = $27;$$056$ph = $26;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $28 = ($$054$ph|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 127]($3,$$05659,$$05460)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$05460) - ($33))|0;
    $41 = (($$05659) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$05460 = $40;$$05659 = $41;
    }
   }
   $37 = ($36|0)==(0);
   if (!($37)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$05460))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($36|0)==(0);
  if ($43) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 127]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   (_memcpy(($31|0),($$141|0),($$143|0))|0);
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_259()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_259() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 127]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0;
 var $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$279$ = 0, $$286 = 0, $$287 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre = 0, $$pre342 = 0, $$pre344 = 0, $$pre345 = 0, $$pre345$pre = 0, $$pre346 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge308 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond281 = 0, $storemerge274 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP32[$5>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 88;
   break;
  } else {
   $23 = $21;$25 = $20;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249303 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249303;
      break L12;
     }
     $30 = ((($$0249303)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249303 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $20;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$20,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$$0269 = $$0269$phi;
   continue;
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre342 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269;$$sink = 1;
  } else {
   $44 = ((($$pre342)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre342)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269;$$sink = 1;
   }
  }
  $51 = (($$pre342) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge308 = $55 | $58;
  if ($brmerge308) {
   $$0262$lcssa = 0;$$lcssa291 = $52;$$lcssa292 = $51;
  } else {
   $$0262309 = 0;$60 = $52;$65 = $51;
   while(1) {
    $59 = $60 << 24 >> 24;
    $61 = (($59) + -32)|0;
    $62 = 1 << $61;
    $63 = $62 | $$0262309;
    $64 = ((($65)) + 1|0);
    HEAP32[$5>>2] = $64;
    $66 = HEAP8[$64>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = (($67) + -32)|0;
    $69 = ($68>>>0)>(31);
    $70 = 1 << $68;
    $71 = $70 & 75913;
    $72 = ($71|0)==(0);
    $brmerge = $69 | $72;
    if ($brmerge) {
     $$0262$lcssa = $63;$$lcssa291 = $66;$$lcssa292 = $64;
     break;
    } else {
     $$0262309 = $63;$60 = $66;$65 = $64;
    }
   }
  }
  $73 = ($$lcssa291<<24>>24)==(42);
  if ($73) {
   $74 = ((($$lcssa292)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = (_isdigit($76)|0);
   $78 = ($77|0)==(0);
   if ($78) {
    label = 23;
   } else {
    $79 = HEAP32[$5>>2]|0;
    $80 = ((($79)) + 2|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(36);
    if ($82) {
     $83 = ((($79)) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = (($85) + -48)|0;
     $87 = (($4) + ($86<<2)|0);
     HEAP32[$87>>2] = 10;
     $88 = HEAP8[$83>>0]|0;
     $89 = $88 << 24 >> 24;
     $90 = (($89) + -48)|0;
     $91 = (($3) + ($90<<3)|0);
     $92 = $91;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($92) + 4)|0;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($79)) + 3|0);
     $$0259 = $94;$$2271 = 1;$storemerge274 = $98;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 23) {
    label = 0;
    $99 = ($$1270|0)==(0);
    if (!($99)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $100 = $arglist_current;
     $101 = ((0) + 4|0);
     $expanded4 = $101;
     $expanded = (($expanded4) - 1)|0;
     $102 = (($100) + ($expanded))|0;
     $103 = ((0) + 4|0);
     $expanded8 = $103;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $104 = $102 & $expanded6;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $arglist_next = ((($105)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $363 = $106;
    } else {
     $363 = 0;
    }
    $107 = HEAP32[$5>>2]|0;
    $108 = ((($107)) + 1|0);
    $$0259 = $363;$$2271 = 0;$storemerge274 = $108;
   }
   HEAP32[$5>>2] = $storemerge274;
   $109 = ($$0259|0)<(0);
   $110 = $$0262$lcssa | 8192;
   $111 = (0 - ($$0259))|0;
   $$$0262 = $109 ? $110 : $$0262$lcssa;
   $$$0259 = $109 ? $111 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$115 = $storemerge274;
  } else {
   $112 = (_getint($5)|0);
   $113 = ($112|0)<(0);
   if ($113) {
    $$0 = -1;
    break;
   }
   $$pre344 = HEAP32[$5>>2]|0;
   $$1260 = $112;$$1263 = $$0262$lcssa;$$3272 = $$1270;$115 = $$pre344;
  }
  $114 = HEAP8[$115>>0]|0;
  $116 = ($114<<24>>24)==(46);
  do {
   if ($116) {
    $117 = ((($115)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = ($118<<24>>24)==(42);
    if (!($119)) {
     $155 = ((($115)) + 1|0);
     HEAP32[$5>>2] = $155;
     $156 = (_getint($5)|0);
     $$pre345$pre = HEAP32[$5>>2]|0;
     $$0254 = $156;$$pre345 = $$pre345$pre;
     break;
    }
    $120 = ((($115)) + 2|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121 << 24 >> 24;
    $123 = (_isdigit($122)|0);
    $124 = ($123|0)==(0);
    if (!($124)) {
     $125 = HEAP32[$5>>2]|0;
     $126 = ((($125)) + 3|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = ($127<<24>>24)==(36);
     if ($128) {
      $129 = ((($125)) + 2|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = (($131) + -48)|0;
      $133 = (($4) + ($132<<2)|0);
      HEAP32[$133>>2] = 10;
      $134 = HEAP8[$129>>0]|0;
      $135 = $134 << 24 >> 24;
      $136 = (($135) + -48)|0;
      $137 = (($3) + ($136<<3)|0);
      $138 = $137;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = (($138) + 4)|0;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($125)) + 4|0);
      HEAP32[$5>>2] = $144;
      $$0254 = $140;$$pre345 = $144;
      break;
     }
    }
    $145 = ($$3272|0)==(0);
    if (!($145)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $146 = $arglist_current2;
     $147 = ((0) + 4|0);
     $expanded11 = $147;
     $expanded10 = (($expanded11) - 1)|0;
     $148 = (($146) + ($expanded10))|0;
     $149 = ((0) + 4|0);
     $expanded15 = $149;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $150 = $148 & $expanded13;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $arglist_next3 = ((($151)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $364 = $152;
    } else {
     $364 = 0;
    }
    $153 = HEAP32[$5>>2]|0;
    $154 = ((($153)) + 2|0);
    HEAP32[$5>>2] = $154;
    $$0254 = $364;$$pre345 = $154;
   } else {
    $$0254 = -1;$$pre345 = $115;
   }
  } while(0);
  $$0252 = 0;$158 = $$pre345;
  while(1) {
   $157 = HEAP8[$158>>0]|0;
   $159 = $157 << 24 >> 24;
   $160 = (($159) + -65)|0;
   $161 = ($160>>>0)>(57);
   if ($161) {
    $$0 = -1;
    break L1;
   }
   $162 = ((($158)) + 1|0);
   HEAP32[$5>>2] = $162;
   $163 = HEAP8[$158>>0]|0;
   $164 = $163 << 24 >> 24;
   $165 = (($164) + -65)|0;
   $166 = ((20276 + (($$0252*58)|0)|0) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($168) + -1)|0;
   $170 = ($169>>>0)<(8);
   if ($170) {
    $$0252 = $168;$158 = $162;
   } else {
    break;
   }
  }
  $171 = ($167<<24>>24)==(0);
  if ($171) {
   $$0 = -1;
   break;
  }
  $172 = ($167<<24>>24)==(19);
  $173 = ($$0253|0)>(-1);
  do {
   if ($172) {
    if ($173) {
     $$0 = -1;
     break L1;
    } else {
     label = 50;
    }
   } else {
    if ($173) {
     $174 = (($4) + ($$0253<<2)|0);
     HEAP32[$174>>2] = $168;
     $175 = (($3) + ($$0253<<3)|0);
     $176 = $175;
     $177 = $176;
     $178 = HEAP32[$177>>2]|0;
     $179 = (($176) + 4)|0;
     $180 = $179;
     $181 = HEAP32[$180>>2]|0;
     $182 = $6;
     $183 = $182;
     HEAP32[$183>>2] = $178;
     $184 = (($182) + 4)|0;
     $185 = $184;
     HEAP32[$185>>2] = $181;
     label = 50;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$168,$2);
    $$pre346 = HEAP32[$5>>2]|0;
    $187 = $$pre346;
   }
  } while(0);
  if ((label|0) == 50) {
   label = 0;
   if ($10) {
    $187 = $162;
   } else {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
    continue;
   }
  }
  $186 = ((($187)) + -1|0);
  $188 = HEAP8[$186>>0]|0;
  $189 = $188 << 24 >> 24;
  $190 = ($$0252|0)!=(0);
  $191 = $189 & 15;
  $192 = ($191|0)==(3);
  $or$cond276 = $190 & $192;
  $193 = $189 & -33;
  $$0235 = $or$cond276 ? $193 : $189;
  $194 = $$1263 & 8192;
  $195 = ($194|0)==(0);
  $196 = $$1263 & -65537;
  $$1263$ = $195 ? $$1263 : $196;
  L73: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $203 = HEAP32[$6>>2]|0;
     HEAP32[$203>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 1:  {
     $204 = HEAP32[$6>>2]|0;
     HEAP32[$204>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 2:  {
     $205 = ($$1248|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = HEAP32[$6>>2]|0;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $$1248;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 3:  {
     $212 = $$1248&65535;
     $213 = HEAP32[$6>>2]|0;
     HEAP16[$213>>1] = $212;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $$1248&255;
     $215 = HEAP32[$6>>2]|0;
     HEAP8[$215>>0] = $214;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 6:  {
     $216 = HEAP32[$6>>2]|0;
     HEAP32[$216>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 7:  {
     $217 = ($$1248|0)<(0);
     $218 = $217 << 31 >> 31;
     $219 = HEAP32[$6>>2]|0;
     $220 = $219;
     $221 = $220;
     HEAP32[$221>>2] = $$1248;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $218;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $224 = ($$0254>>>0)>(8);
    $225 = $224 ? $$0254 : 8;
    $226 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $225;$$3265 = $226;
    label = 62;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 62;
    break;
   }
   case 111:  {
    $242 = $6;
    $243 = $242;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($242) + 4)|0;
    $246 = $245;
    $247 = HEAP32[$246>>2]|0;
    $248 = (_fmt_o($244,$247,$11)|0);
    $249 = $$1263$ & 8;
    $250 = ($249|0)==(0);
    $251 = $248;
    $252 = (($12) - ($251))|0;
    $253 = ($$0254|0)>($252|0);
    $254 = (($252) + 1)|0;
    $255 = $250 | $253;
    $$0254$$0254$ = $255 ? $$0254 : $254;
    $$0228 = $248;$$1233 = 0;$$1238 = 20740;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$280 = $244;$282 = $247;
    label = 68;
    break;
   }
   case 105: case 100:  {
    $256 = $6;
    $257 = $256;
    $258 = HEAP32[$257>>2]|0;
    $259 = (($256) + 4)|0;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)<(0);
    if ($262) {
     $263 = (_i64Subtract(0,0,($258|0),($261|0))|0);
     $264 = tempRet0;
     $265 = $6;
     $266 = $265;
     HEAP32[$266>>2] = $263;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $264;
     $$0232 = 1;$$0237 = 20740;$275 = $263;$276 = $264;
     label = 67;
     break L73;
    } else {
     $269 = $$1263$ & 2048;
     $270 = ($269|0)==(0);
     $271 = $$1263$ & 1;
     $272 = ($271|0)==(0);
     $$ = $272 ? 20740 : (20742);
     $$$ = $270 ? $$ : (20741);
     $273 = $$1263$ & 2049;
     $274 = ($273|0)!=(0);
     $$279$ = $274&1;
     $$0232 = $$279$;$$0237 = $$$;$275 = $258;$276 = $261;
     label = 67;
     break L73;
    }
    break;
   }
   case 117:  {
    $197 = $6;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $$0232 = 0;$$0237 = 20740;$275 = $199;$276 = $202;
    label = 67;
    break;
   }
   case 99:  {
    $292 = $6;
    $293 = $292;
    $294 = HEAP32[$293>>2]|0;
    $295 = (($292) + 4)|0;
    $296 = $295;
    $297 = HEAP32[$296>>2]|0;
    $298 = $294&255;
    HEAP8[$13>>0] = $298;
    $$2 = $13;$$2234 = 0;$$2239 = 20740;$$2251 = $11;$$5 = 1;$$6268 = $196;
    break;
   }
   case 109:  {
    $299 = (___errno_location()|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = (_strerror($300)|0);
    $$1 = $301;
    label = 72;
    break;
   }
   case 115:  {
    $302 = HEAP32[$6>>2]|0;
    $303 = ($302|0)!=(0|0);
    $304 = $303 ? $302 : 20750;
    $$1 = $304;
    label = 72;
    break;
   }
   case 67:  {
    $311 = $6;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = (($311) + 4)|0;
    $315 = $314;
    $316 = HEAP32[$315>>2]|0;
    HEAP32[$8>>2] = $313;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258354 = -1;$365 = $8;
    label = 76;
    break;
   }
   case 83:  {
    $$pre348 = HEAP32[$6>>2]|0;
    $317 = ($$0254|0)==(0);
    if ($317) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$4258354 = $$0254;$365 = $$pre348;
     label = 76;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $339 = +HEAPF64[$6>>3];
    $340 = (_fmt_fp($0,$339,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $340;$$0247 = $$1248;$$0269 = $$3272;
    continue L1;
    break;
   }
   default: {
    $$2 = $20;$$2234 = 0;$$2239 = 20740;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L97: do {
   if ((label|0) == 62) {
    label = 0;
    $227 = $6;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = (($227) + 4)|0;
    $231 = $230;
    $232 = HEAP32[$231>>2]|0;
    $233 = $$1236 & 32;
    $234 = (_fmt_x($229,$232,$11,$233)|0);
    $235 = ($229|0)==(0);
    $236 = ($232|0)==(0);
    $237 = $235 & $236;
    $238 = $$3265 & 8;
    $239 = ($238|0)==(0);
    $or$cond278 = $239 | $237;
    $240 = $$1236 >> 4;
    $241 = (20740 + ($240)|0);
    $$286 = $or$cond278 ? 20740 : $241;
    $$287 = $or$cond278 ? 0 : 2;
    $$0228 = $234;$$1233 = $$287;$$1238 = $$286;$$2256 = $$1255;$$4266 = $$3265;$280 = $229;$282 = $232;
    label = 68;
   }
   else if ((label|0) == 67) {
    label = 0;
    $277 = (_fmt_u($275,$276,$11)|0);
    $$0228 = $277;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$280 = $275;$282 = $276;
    label = 68;
   }
   else if ((label|0) == 72) {
    label = 0;
    $305 = (_memchr($$1,0,$$0254)|0);
    $306 = ($305|0)==(0|0);
    $307 = $305;
    $308 = $$1;
    $309 = (($307) - ($308))|0;
    $310 = (($$1) + ($$0254)|0);
    $$3257 = $306 ? $$0254 : $309;
    $$1250 = $306 ? $310 : $305;
    $$2 = $$1;$$2234 = 0;$$2239 = 20740;$$2251 = $$1250;$$5 = $$3257;$$6268 = $196;
   }
   else if ((label|0) == 76) {
    label = 0;
    $$0229316 = $365;$$0240315 = 0;$$1244314 = 0;
    while(1) {
     $318 = HEAP32[$$0229316>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $$0240$lcssa = $$0240315;$$2245 = $$1244314;
      break;
     }
     $320 = (_wctomb($9,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($$4258354) - ($$0240315))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond281 = $321 | $323;
     if ($or$cond281) {
      $$0240$lcssa = $$0240315;$$2245 = $320;
      break;
     }
     $324 = ((($$0229316)) + 4|0);
     $325 = (($320) + ($$0240315))|0;
     $326 = ($$4258354>>>0)>($325>>>0);
     if ($326) {
      $$0229316 = $324;$$0240315 = $325;$$1244314 = $320;
     } else {
      $$0240$lcssa = $325;$$2245 = $320;
      break;
     }
    }
    $327 = ($$2245|0)<(0);
    if ($327) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $328 = ($$0240$lcssa|0)==(0);
    if ($328) {
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$1230327 = $365;$$1241326 = 0;
     while(1) {
      $329 = HEAP32[$$1230327>>2]|0;
      $330 = ($329|0)==(0);
      if ($330) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $331 = (_wctomb($9,$329)|0);
      $332 = (($331) + ($$1241326))|0;
      $333 = ($332|0)>($$0240$lcssa|0);
      if ($333) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $334 = ((($$1230327)) + 4|0);
      _out($0,$9,$331);
      $335 = ($332>>>0)<($$0240$lcssa>>>0);
      if ($335) {
       $$1230327 = $334;$$1241326 = $332;
      } else {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 68) {
   label = 0;
   $278 = ($$2256|0)>(-1);
   $279 = $$4266 & -65537;
   $$$4266 = $278 ? $279 : $$4266;
   $281 = ($280|0)!=(0);
   $283 = ($282|0)!=(0);
   $284 = $281 | $283;
   $285 = ($$2256|0)!=(0);
   $or$cond = $285 | $284;
   $286 = $$0228;
   $287 = (($12) - ($286))|0;
   $288 = $284 ^ 1;
   $289 = $288&1;
   $290 = (($287) + ($289))|0;
   $291 = ($$2256|0)>($290|0);
   $$2256$ = $291 ? $$2256 : $290;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 85) {
   label = 0;
   $336 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa356,$336);
   $337 = ($$1260|0)>($$0240$lcssa356|0);
   $338 = $337 ? $$1260 : $$0240$lcssa356;
   $$0243 = $338;$$0247 = $$1248;$$0269 = $$3272;
   continue;
  }
  $341 = $$2251;
  $342 = $$2;
  $343 = (($341) - ($342))|0;
  $344 = ($$5|0)<($343|0);
  $$$5 = $344 ? $343 : $$5;
  $345 = (($$$5) + ($$2234))|0;
  $346 = ($$1260|0)<($345|0);
  $$2261 = $346 ? $345 : $$1260;
  _pad($0,32,$$2261,$345,$$6268);
  _out($0,$$2239,$$2234);
  $347 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$345,$347);
  _pad($0,48,$$$5,$343,0);
  _out($0,$$2,$343);
  $348 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$345,$348);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;
 }
 L116: do {
  if ((label|0) == 88) {
   $349 = ($0|0)==(0|0);
   if ($349) {
    $350 = ($$0269|0)==(0);
    if ($350) {
     $$0 = 0;
    } else {
     $$2242302 = 1;
     while(1) {
      $351 = (($4) + ($$2242302<<2)|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       $$2242$lcssa = $$2242302;
       break;
      }
      $355 = (($3) + ($$2242302<<3)|0);
      _pop_arg($355,$352,$2);
      $356 = (($$2242302) + 1)|0;
      $357 = ($$2242302|0)<(9);
      if ($357) {
       $$2242302 = $356;
      } else {
       $$2242$lcssa = $356;
       break;
      }
     }
     $354 = ($$2242$lcssa|0)<(10);
     if ($354) {
      $$3300 = $$2242$lcssa;
      while(1) {
       $360 = (($4) + ($$3300<<2)|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($361|0)==(0);
       if (!($362)) {
        $$0 = -1;
        break L116;
       }
       $358 = (($$3300) + 1)|0;
       $359 = ($$3300|0)<(9);
       if ($359) {
        $$3300 = $358;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (20792 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_848()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = - $1;
  $$0471 = $14;$$0520 = 1;$$0521 = 20757;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (20758) : (20763);
  $$$ = $16 ? $$ : (20760);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 20776 : 20780;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 20784 : 20788;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad($0,32,$2,$31,$32);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = - $35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = - $56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (20792 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad($0,32,$2,$106,$4);
    _out($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad($0,48,$2,$106,$107);
    _out($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad($0,48,$108,0,0);
    _out($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$123 = $$pr;
    while(1) {
     $124 = ($123|0)<(29);
     $125 = $124 ? $123 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$123 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = - $$543;
      $232 = - $$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad($0,32,$2,$323,$4);
   _out($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out($0,20808,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out($0,20808,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function ___pthread_self_848() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (20810 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 20898;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 20898;
  } else {
   $$01214 = 20898;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt13runtime_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9784);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(71,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 0]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(256|0),(17|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,216,200,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 63]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 63]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 63]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 63]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $43 = ((($0)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 63]($44,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 63]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$13>>2] = $2;
      $33 = ((($1)) + 40|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$33>>2] = $35;
      $36 = ((($1)) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(1);
      if ($38) {
       $39 = ((($1)) + 24|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(2);
       if ($41) {
        $42 = ((($1)) + 54|0);
        HEAP8[$42>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 63]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22832|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_846($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = (($5) + -1)|0;
  $8 = ($7|0)<(0);
  if ($8) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_846($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9784);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($0)) + 8|0);
    $21 = ((($1)) + 54|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$20>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$20>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $56 = ((($0)) + 16|0);
    $57 = ((($0)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($0)) + 16|0) + ($58<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$1,$2,$3,$4);
    $60 = ((($0)) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($1)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $78 = ((($1)) + 54|0);
       $$2 = $60;
       while(1) {
        $87 = HEAP8[$78>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $91 = ((($$2)) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = ((($1)) + 24|0);
      $77 = ((($1)) + 54|0);
      $$1 = $60;
      while(1) {
       $79 = HEAP8[$77>>0]|0;
       $80 = ($79<<24>>24)==(0);
       if (!($80)) {
        break L1;
       }
       $81 = HEAP32[$66>>2]|0;
       $82 = ($81|0)==(1);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = ($83|0)==(1);
        if ($84) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $85 = ((($$1)) + 8|0);
       $86 = ($85>>>0)<($59>>>0);
       if ($86) {
        $$1 = $85;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = ((($1)) + 54|0);
    $$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $72 = ((($$0)) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($0)) + 16|0);
     $23 = ((($0)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($0)) + 16|0) + ($24<<3)|0);
     $26 = ((($1)) + 52|0);
     $27 = ((($1)) + 53|0);
     $28 = ((($1)) + 54|0);
     $29 = ((($0)) + 8|0);
     $30 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $22;$$085$off0 = 0;
     L32: while(1) {
      $31 = ($$084>>>0)<($25>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$26>>0] = 0;
      HEAP8[$27>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$28>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$27>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$26>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$29>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L32;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$30>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L32;
        }
        $40 = HEAP32[$29>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L32;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$13>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = ((($1)) + 36|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==(1);
        if ($52) {
         $53 = HEAP32[$30>>2]|0;
         $54 = ($53|0)==(2);
         if ($54) {
          HEAP8[$28>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $55 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $55 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $55 = 3;
     }
     HEAP32[$19>>2] = $55;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 63]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 63]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 63]($13,$1,$17,$20,$4);
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9764);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5890]|0;
 $1 = (($0) + 0)|0;
 HEAP32[5890] = $1;
 $2 = $0;
 return ($2|0);
}
function runPostSets() {
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&0]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function ___cxa_allocate_exception__wrapper(p0) {
 p0 = p0|0; return ___cxa_allocate_exception(p0|0)|0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b3(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b4() {
 ; nullFunc_v(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_vi(5);
}
function ___cxa_free_exception__wrapper(p0) {
 p0 = p0|0; ___cxa_free_exception(p0|0);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(6);
}
function _emscripten_longjmp__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0);
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function ___cxa_throw__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0);
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}
function b9(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(9);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt9bad_alloc4whatEv,b0,b0,__ZNKSt13runtime_error4whatEv,b0,b0,b0,b0,b0,b0
,b0,___cxa_allocate_exception__wrapper,b0,b0,b0,_png_create_info_struct,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_malloc,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_png_get_image_width,_png_get_image_height,_png_get_channels,_png_get_color_type,_png_get_bit_depth,b1,b1,b1,b1,b1,b1,_png_get_rowbytes,b1,b1,b1,b1,b1,b1,b1
,_png_user_version_check,_png_malloc_warn,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,b2,___stdio_write,___stdio_seek,___stdout_write,b2,b2,b2,b2,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,_png_set_longjmp_fn,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_png_get_valid,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,_png_zalloc,b2,b2,b2,b2,b2,b2,b2,_zcalloc,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,_png_create_read_struct,b3,b3];
var FUNCTION_TABLE_v = [b4];
var FUNCTION_TABLE_vi = [b5,b5,b5,b5,b5,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b5,b5,b5,b5,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b5,b5,b5,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b5,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b5,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b5,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b5,b5,b5
,b5,b5,b5,b5,___cxa_free_exception__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_png_set_swap,_png_set_palette_to_rgb,_png_set_expand_gray_1_2_4_to_8,b5,_png_set_tRNS_to_alpha,b5,b5,b5,b5,_free,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,__ZNSt13runtime_errorC2EPKc,b6,b6,b6,b6,_emscripten_longjmp__wrapper,b6,b6,_png_read_info,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_png_read_update_info,b6,b6,_png_read_image,b6,b6,b6,b6,b6
,b6,b6,b6,_png_zfree,b6,b6,b6,b6,b6,b6,b6,_zcfree,__ZNSt3__218__libcpp_refstringC2EPKc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,___cxa_throw__wrapper,b7,b7,b7,b7,_png_set_read_fn,__Z23ReadDataFromInputStreamP14png_struct_defPhj,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,_png_default_read_data,_png_read_filter_row_sub,_png_read_filter_row_up,_png_read_filter_row_avg,_png_read_filter_row_paeth_multibyte_pixel,_png_read_filter_row_paeth_1byte_pixel,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b8,b8,b8,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_png_set_mem_fn,_png_set_error_fn
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__Z4loadjjiii,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN10emscripten8internal7InvokerIvJjjiiiEE6invokeEPFvjjiiiEjjiii,b10,b10
,b10,b10,b10,b10,b10];

  return { __GLOBAL__sub_I_LoaderPNG_cpp: __GLOBAL__sub_I_LoaderPNG_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_replace_memory: _emscripten_replace_memory, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _realloc: _realloc, _saveSetjmp: _saveSetjmp, _sbrk: _sbrk, _testSetjmp: _testSetjmp, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_LoaderPNG_cpp = asm["__GLOBAL__sub_I_LoaderPNG_cpp"]; asm["__GLOBAL__sub_I_LoaderPNG_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_LoaderPNG_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__saveSetjmp.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__testSetjmp.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_LoaderPNG_cpp = Module["__GLOBAL__sub_I_LoaderPNG_cpp"] = asm["__GLOBAL__sub_I_LoaderPNG_cpp"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}





  return Module;
};
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = Module;
else if (typeof define === 'function' && define['amd'])
  define([], function() { return Module; });
else if (typeof exports === 'object')
  exports["Module"] = Module;
